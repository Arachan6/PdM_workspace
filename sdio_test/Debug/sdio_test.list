
sdio_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d38  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004ee4  08004ee4  00005ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f10  08004f10  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f10  08004f10  00005f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f18  08004f18  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f18  08004f18  00005f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f1c  08004f1c  00005f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f20  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000814  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000820  20000820  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000128a0  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e6a  00000000  00000000  000188dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  0001b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c1b  00000000  00000000  0001c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026798  00000000  00000000  0001d353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015482  00000000  00000000  00043aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0278  00000000  00000000  00058f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001391e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004138  00000000  00000000  00139228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0013d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004ecc 	.word	0x08004ecc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004ecc 	.word	0x08004ecc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <MX_ETH_Init+0x84>)
 80004e2:	4a20      	ldr	r2, [pc, #128]	@ (8000564 <MX_ETH_Init+0x88>)
 80004e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80004e6:	4b20      	ldr	r3, [pc, #128]	@ (8000568 <MX_ETH_Init+0x8c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80004ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000568 <MX_ETH_Init+0x8c>)
 80004ee:	2280      	movs	r2, #128	@ 0x80
 80004f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80004f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000568 <MX_ETH_Init+0x8c>)
 80004f4:	22e1      	movs	r2, #225	@ 0xe1
 80004f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000568 <MX_ETH_Init+0x8c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <MX_ETH_Init+0x8c>)
 8000500:	2200      	movs	r2, #0
 8000502:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000504:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <MX_ETH_Init+0x8c>)
 8000506:	2200      	movs	r2, #0
 8000508:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800050a:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <MX_ETH_Init+0x84>)
 800050c:	4a16      	ldr	r2, [pc, #88]	@ (8000568 <MX_ETH_Init+0x8c>)
 800050e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000510:	4b13      	ldr	r3, [pc, #76]	@ (8000560 <MX_ETH_Init+0x84>)
 8000512:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000516:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000518:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <MX_ETH_Init+0x84>)
 800051a:	4a14      	ldr	r2, [pc, #80]	@ (800056c <MX_ETH_Init+0x90>)
 800051c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800051e:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <MX_ETH_Init+0x84>)
 8000520:	4a13      	ldr	r2, [pc, #76]	@ (8000570 <MX_ETH_Init+0x94>)
 8000522:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000524:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <MX_ETH_Init+0x84>)
 8000526:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800052a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800052c:	480c      	ldr	r0, [pc, #48]	@ (8000560 <MX_ETH_Init+0x84>)
 800052e:	f000 fdad 	bl	800108c <HAL_ETH_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000538:	f000 fa10 	bl	800095c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800053c:	2238      	movs	r2, #56	@ 0x38
 800053e:	2100      	movs	r1, #0
 8000540:	480c      	ldr	r0, [pc, #48]	@ (8000574 <MX_ETH_Init+0x98>)
 8000542:	f004 fc96 	bl	8004e72 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000546:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <MX_ETH_Init+0x98>)
 8000548:	2221      	movs	r2, #33	@ 0x21
 800054a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800054c:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <MX_ETH_Init+0x98>)
 800054e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000552:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <MX_ETH_Init+0x98>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200001a0 	.word	0x200001a0
 8000564:	40028000 	.word	0x40028000
 8000568:	20000250 	.word	0x20000250
 800056c:	200000c8 	.word	0x200000c8
 8000570:	20000028 	.word	0x20000028
 8000574:	20000168 	.word	0x20000168

08000578 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08e      	sub	sp, #56	@ 0x38
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a55      	ldr	r2, [pc, #340]	@ (80006ec <HAL_ETH_MspInit+0x174>)
 8000596:	4293      	cmp	r3, r2
 8000598:	f040 80a4 	bne.w	80006e4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
 80005a0:	4b53      	ldr	r3, [pc, #332]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a4:	4a52      	ldr	r2, [pc, #328]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 80005a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ac:	4b50      	ldr	r3, [pc, #320]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005b4:	623b      	str	r3, [r7, #32]
 80005b6:	6a3b      	ldr	r3, [r7, #32]
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
 80005bc:	4b4c      	ldr	r3, [pc, #304]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c0:	4a4b      	ldr	r2, [pc, #300]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 80005c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c8:	4b49      	ldr	r3, [pc, #292]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005d0:	61fb      	str	r3, [r7, #28]
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
 80005d8:	4b45      	ldr	r3, [pc, #276]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005dc:	4a44      	ldr	r2, [pc, #272]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 80005de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80005e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e4:	4b42      	ldr	r3, [pc, #264]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80005ec:	61bb      	str	r3, [r7, #24]
 80005ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	4b3e      	ldr	r3, [pc, #248]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f8:	4a3d      	ldr	r2, [pc, #244]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000600:	4b3b      	ldr	r3, [pc, #236]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	4b37      	ldr	r3, [pc, #220]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000614:	4a36      	ldr	r2, [pc, #216]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6313      	str	r3, [r2, #48]	@ 0x30
 800061c:	4b34      	ldr	r3, [pc, #208]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	4b30      	ldr	r3, [pc, #192]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000630:	4a2f      	ldr	r2, [pc, #188]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 8000632:	f043 0302 	orr.w	r3, r3, #2
 8000636:	6313      	str	r3, [r2, #48]	@ 0x30
 8000638:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063c:	f003 0302 	and.w	r3, r3, #2
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064c:	4a28      	ldr	r2, [pc, #160]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 800064e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000652:	6313      	str	r3, [r2, #48]	@ 0x30
 8000654:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <HAL_ETH_MspInit+0x178>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000660:	2332      	movs	r3, #50	@ 0x32
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000670:	230b      	movs	r3, #11
 8000672:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000678:	4619      	mov	r1, r3
 800067a:	481e      	ldr	r0, [pc, #120]	@ (80006f4 <HAL_ETH_MspInit+0x17c>)
 800067c:	f001 f82e 	bl	80016dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000680:	2386      	movs	r3, #134	@ 0x86
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000690:	230b      	movs	r3, #11
 8000692:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000698:	4619      	mov	r1, r3
 800069a:	4817      	ldr	r0, [pc, #92]	@ (80006f8 <HAL_ETH_MspInit+0x180>)
 800069c:	f001 f81e 	bl	80016dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a6:	2302      	movs	r3, #2
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ae:	2303      	movs	r3, #3
 80006b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b2:	230b      	movs	r3, #11
 80006b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ba:	4619      	mov	r1, r3
 80006bc:	480f      	ldr	r0, [pc, #60]	@ (80006fc <HAL_ETH_MspInit+0x184>)
 80006be:	f001 f80d 	bl	80016dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006c2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006dc:	4619      	mov	r1, r3
 80006de:	4808      	ldr	r0, [pc, #32]	@ (8000700 <HAL_ETH_MspInit+0x188>)
 80006e0:	f000 fffc 	bl	80016dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80006e4:	bf00      	nop
 80006e6:	3738      	adds	r7, #56	@ 0x38
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40028000 	.word	0x40028000
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020000 	.word	0x40020000
 80006fc:	40020400 	.word	0x40020400
 8000700:	40021800 	.word	0x40021800

08000704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	4b4c      	ldr	r3, [pc, #304]	@ (8000850 <MX_GPIO_Init+0x14c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a4b      	ldr	r2, [pc, #300]	@ (8000850 <MX_GPIO_Init+0x14c>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b49      	ldr	r3, [pc, #292]	@ (8000850 <MX_GPIO_Init+0x14c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	4b45      	ldr	r3, [pc, #276]	@ (8000850 <MX_GPIO_Init+0x14c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a44      	ldr	r2, [pc, #272]	@ (8000850 <MX_GPIO_Init+0x14c>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b42      	ldr	r3, [pc, #264]	@ (8000850 <MX_GPIO_Init+0x14c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b3e      	ldr	r3, [pc, #248]	@ (8000850 <MX_GPIO_Init+0x14c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a3d      	ldr	r2, [pc, #244]	@ (8000850 <MX_GPIO_Init+0x14c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b3b      	ldr	r3, [pc, #236]	@ (8000850 <MX_GPIO_Init+0x14c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b37      	ldr	r3, [pc, #220]	@ (8000850 <MX_GPIO_Init+0x14c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a36      	ldr	r2, [pc, #216]	@ (8000850 <MX_GPIO_Init+0x14c>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b34      	ldr	r3, [pc, #208]	@ (8000850 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b30      	ldr	r3, [pc, #192]	@ (8000850 <MX_GPIO_Init+0x14c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a2f      	ldr	r2, [pc, #188]	@ (8000850 <MX_GPIO_Init+0x14c>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b2d      	ldr	r3, [pc, #180]	@ (8000850 <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <MX_GPIO_Init+0x14c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a28      	ldr	r2, [pc, #160]	@ (8000850 <MX_GPIO_Init+0x14c>)
 80007b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007c8:	4822      	ldr	r0, [pc, #136]	@ (8000854 <MX_GPIO_Init+0x150>)
 80007ca:	f001 f933 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2140      	movs	r1, #64	@ 0x40
 80007d2:	4821      	ldr	r0, [pc, #132]	@ (8000858 <MX_GPIO_Init+0x154>)
 80007d4:	f001 f92e 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	481b      	ldr	r0, [pc, #108]	@ (800085c <MX_GPIO_Init+0x158>)
 80007f0:	f000 ff74 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007f4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4811      	ldr	r0, [pc, #68]	@ (8000854 <MX_GPIO_Init+0x150>)
 800080e:	f000 ff65 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000812:	2340      	movs	r3, #64	@ 0x40
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	480b      	ldr	r0, [pc, #44]	@ (8000858 <MX_GPIO_Init+0x154>)
 800082a:	f000 ff57 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_GPIO_Init+0x154>)
 8000842:	f000 ff4b 	bl	80016dc <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3730      	adds	r7, #48	@ 0x30
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40020400 	.word	0x40020400
 8000858:	40021800 	.word	0x40021800
 800085c:	40020800 	.word	0x40020800

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000864:	f000 fa96 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000868:	f000 f80e 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086c:	f7ff ff4a 	bl	8000704 <MX_GPIO_Init>
  MX_ETH_Init();
 8000870:	f7ff fe34 	bl	80004dc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000874:	f000 f96a 	bl	8000b4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000878:	f000 f9da 	bl	8000c30 <MX_USB_OTG_FS_PCD_Init>
  MX_SDIO_SD_Init();
 800087c:	f000 f874 	bl	8000968 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000880:	f004 f926 	bl	8004ad0 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <main+0x24>

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	@ 0x50
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2230      	movs	r2, #48	@ 0x30
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f004 faeb 	bl	8004e72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b28      	ldr	r3, [pc, #160]	@ (8000954 <SystemClock_Config+0xcc>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	4a27      	ldr	r2, [pc, #156]	@ (8000954 <SystemClock_Config+0xcc>)
 80008b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <SystemClock_Config+0xcc>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <SystemClock_Config+0xd0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a21      	ldr	r2, [pc, #132]	@ (8000958 <SystemClock_Config+0xd0>)
 80008d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <SystemClock_Config+0xd0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f8:	2304      	movs	r3, #4
 80008fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008fc:	23a8      	movs	r3, #168	@ 0xa8
 80008fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000904:	2307      	movs	r3, #7
 8000906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4618      	mov	r0, r3
 800090e:	f001 f9b9 	bl	8001c84 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000918:	f000 f820 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
 800091e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2302      	movs	r3, #2
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000928:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800092e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2105      	movs	r1, #5
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fc1a 	bl	8002174 <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000946:	f000 f809 	bl	800095c <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	3750      	adds	r7, #80	@ 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <Error_Handler+0x8>

08000968 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_SDIO_SD_Init+0x38>)
 800096e:	4a0d      	ldr	r2, [pc, #52]	@ (80009a4 <MX_SDIO_SD_Init+0x3c>)
 8000970:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_SDIO_SD_Init+0x38>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_SDIO_SD_Init+0x38>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MX_SDIO_SD_Init+0x38>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_SDIO_SD_Init+0x38>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800098a:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <MX_SDIO_SD_Init+0x38>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000990:	4b03      	ldr	r3, [pc, #12]	@ (80009a0 <MX_SDIO_SD_Init+0x38>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	20000258 	.word	0x20000258
 80009a4:	40012c00 	.word	0x40012c00

080009a8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <HAL_SD_MspInit+0xc0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d14a      	bne.n	8000a60 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <HAL_SD_MspInit+0xc4>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a26      	ldr	r2, [pc, #152]	@ (8000a6c <HAL_SD_MspInit+0xc4>)
 80009d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <HAL_SD_MspInit+0xc4>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <HAL_SD_MspInit+0xc4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a1f      	ldr	r2, [pc, #124]	@ (8000a6c <HAL_SD_MspInit+0xc4>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <HAL_SD_MspInit+0xc4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <HAL_SD_MspInit+0xc4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <HAL_SD_MspInit+0xc4>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <HAL_SD_MspInit+0xc4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000a1e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a30:	230c      	movs	r3, #12
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <HAL_SD_MspInit+0xc8>)
 8000a3c:	f000 fe4e 	bl	80016dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a40:	2304      	movs	r3, #4
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a50:	230c      	movs	r3, #12
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <HAL_SD_MspInit+0xcc>)
 8000a5c:	f000 fe3e 	bl	80016dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40012c00 	.word	0x40012c00
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40020c00 	.word	0x40020c00

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <NMI_Handler+0x4>

08000ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <MemManage_Handler+0x4>

08000ae0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <UsageFault_Handler+0x4>

08000af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1e:	f000 f98b 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <MX_USART3_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b84:	f002 fcae 	bl	80034e4 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f7ff fee5 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200002dc 	.word	0x200002dc
 8000b9c:	40004800 	.word	0x40004800

08000ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a19      	ldr	r2, [pc, #100]	@ (8000c24 <HAL_UART_MspInit+0x84>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12c      	bne.n	8000c1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	4a17      	ldr	r2, [pc, #92]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <HAL_UART_MspInit+0x8c>)
 8000c18:	f000 fd60 	bl	80016dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	@ 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40004800 	.word	0x40004800
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020c00 	.word	0x40020c00

08000c30 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3e:	2204      	movs	r2, #4
 8000c40:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c44:	2202      	movs	r2, #2
 8000c46:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c74:	f000 fef7 	bl	8001a66 <HAL_PCD_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f7ff fe6d 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000324 	.word	0x20000324

08000c8c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cac:	d13f      	bne.n	8000d2e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <HAL_PCD_MspInit+0xac>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a20      	ldr	r2, [pc, #128]	@ (8000d38 <HAL_PCD_MspInit+0xac>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <HAL_PCD_MspInit+0xac>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cca:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cdc:	230a      	movs	r3, #10
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4815      	ldr	r0, [pc, #84]	@ (8000d3c <HAL_PCD_MspInit+0xb0>)
 8000ce8:	f000 fcf8 	bl	80016dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480e      	ldr	r0, [pc, #56]	@ (8000d3c <HAL_PCD_MspInit+0xb0>)
 8000d02:	f000 fceb 	bl	80016dc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <HAL_PCD_MspInit+0xac>)
 8000d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d38 <HAL_PCD_MspInit+0xac>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d10:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <HAL_PCD_MspInit+0xac>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <HAL_PCD_MspInit+0xac>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d22:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <HAL_PCD_MspInit+0xac>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	@ 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020000 	.word	0x40020000

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d44:	f7ff fef0 	bl	8000b28 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	@ (8000d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f004 f889 	bl	8004e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fd75 	bl	8000860 <main>
  bx  lr    
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d78:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d84:	08004f20 	.word	0x08004f20
  ldr r2, =_sbss
 8000d88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d8c:	20000820 	.word	0x20000820

08000d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d98:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <HAL_Init+0x40>)
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da4:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <HAL_Init+0x40>)
 8000daa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a07      	ldr	r2, [pc, #28]	@ (8000dd4 <HAL_Init+0x40>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f931 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 f808 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff fe56 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023c00 	.word	0x40023c00

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_InitTick+0x54>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_InitTick+0x58>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f93b 	bl	8001072 <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e14:	f000 f911 	bl	800103a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	@ (8000e34 <HAL_InitTick+0x5c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000808 	.word	0x20000808

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000808 	.word	0x20000808

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffde 	bl	8000e60 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	@ (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	@ (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	@ 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff47 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff ff5c 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff8e 	bl	8000f78 <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffb0 	bl	8000fe0 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e06c      	b.n	8001178 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d106      	bne.n	80010b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2223      	movs	r2, #35	@ 0x23
 80010ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff fa61 	bl	8000578 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b31      	ldr	r3, [pc, #196]	@ (8001180 <HAL_ETH_Init+0xf4>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a30      	ldr	r2, [pc, #192]	@ (8001180 <HAL_ETH_Init+0xf4>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001180 <HAL_ETH_Init+0xf4>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80010d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001184 <HAL_ETH_Init+0xf8>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001184 <HAL_ETH_Init+0xf8>)
 80010d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80010dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010de:	4b29      	ldr	r3, [pc, #164]	@ (8001184 <HAL_ETH_Init+0xf8>)
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	4927      	ldr	r1, [pc, #156]	@ (8001184 <HAL_ETH_Init+0xf8>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80010ec:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <HAL_ETH_Init+0xf8>)
 80010ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001106:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001108:	f7ff feaa 	bl	8000e60 <HAL_GetTick>
 800110c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800110e:	e011      	b.n	8001134 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001110:	f7ff fea6 	bl	8000e60 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800111e:	d909      	bls.n	8001134 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2204      	movs	r2, #4
 8001124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	22e0      	movs	r2, #224	@ 0xe0
 800112c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e021      	b.n	8001178 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1e4      	bne.n	8001110 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f958 	bl	80013fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f9ff 	bl	8001550 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 fa55 	bl	8001602 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	461a      	mov	r2, r3
 800115e:	2100      	movs	r1, #0
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 f9bd 	bl	80014e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2210      	movs	r2, #16
 8001172:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40013800 	.word	0x40013800

08001188 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4b51      	ldr	r3, [pc, #324]	@ (80012e4 <ETH_SetMACConfig+0x15c>)
 800119e:	4013      	ands	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	7c1b      	ldrb	r3, [r3, #16]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <ETH_SetMACConfig+0x28>
 80011aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011ae:	e000      	b.n	80011b2 <ETH_SetMACConfig+0x2a>
 80011b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	7c5b      	ldrb	r3, [r3, #17]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <ETH_SetMACConfig+0x38>
 80011ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011be:	e000      	b.n	80011c2 <ETH_SetMACConfig+0x3a>
 80011c0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80011c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	7fdb      	ldrb	r3, [r3, #31]
 80011ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80011d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80011d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	7f92      	ldrb	r2, [r2, #30]
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d102      	bne.n	80011e6 <ETH_SetMACConfig+0x5e>
 80011e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011e4:	e000      	b.n	80011e8 <ETH_SetMACConfig+0x60>
 80011e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80011e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	7f1b      	ldrb	r3, [r3, #28]
 80011ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80011f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80011f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	791b      	ldrb	r3, [r3, #4]
 80011fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80011fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001206:	2a00      	cmp	r2, #0
 8001208:	d102      	bne.n	8001210 <ETH_SetMACConfig+0x88>
 800120a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800120e:	e000      	b.n	8001212 <ETH_SetMACConfig+0x8a>
 8001210:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001212:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	7bdb      	ldrb	r3, [r3, #15]
 8001218:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800121a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001220:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001228:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800122a:	4313      	orrs	r3, r2
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001242:	2001      	movs	r0, #1
 8001244:	f7ff fe18 	bl	8000e78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800125e:	4013      	ands	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001266:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800126e:	2a00      	cmp	r2, #0
 8001270:	d101      	bne.n	8001276 <ETH_SetMACConfig+0xee>
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	e000      	b.n	8001278 <ETH_SetMACConfig+0xf0>
 8001276:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001278:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800127e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001286:	2a01      	cmp	r2, #1
 8001288:	d101      	bne.n	800128e <ETH_SetMACConfig+0x106>
 800128a:	2208      	movs	r2, #8
 800128c:	e000      	b.n	8001290 <ETH_SetMACConfig+0x108>
 800128e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001290:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001298:	2a01      	cmp	r2, #1
 800129a:	d101      	bne.n	80012a0 <ETH_SetMACConfig+0x118>
 800129c:	2204      	movs	r2, #4
 800129e:	e000      	b.n	80012a2 <ETH_SetMACConfig+0x11a>
 80012a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80012a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80012aa:	2a01      	cmp	r2, #1
 80012ac:	d101      	bne.n	80012b2 <ETH_SetMACConfig+0x12a>
 80012ae:	2202      	movs	r2, #2
 80012b0:	e000      	b.n	80012b4 <ETH_SetMACConfig+0x12c>
 80012b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012b4:	4313      	orrs	r3, r2
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff fdd3 	bl	8000e78 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	ff20810f 	.word	0xff20810f

080012e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4b3d      	ldr	r3, [pc, #244]	@ (80013f8 <ETH_SetDMAConfig+0x110>)
 8001302:	4013      	ands	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	7b1b      	ldrb	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <ETH_SetDMAConfig+0x2c>
 800130e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001312:	e000      	b.n	8001316 <ETH_SetDMAConfig+0x2e>
 8001314:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	7b5b      	ldrb	r3, [r3, #13]
 800131a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800131c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	7f52      	ldrb	r2, [r2, #29]
 8001322:	2a00      	cmp	r2, #0
 8001324:	d102      	bne.n	800132c <ETH_SetDMAConfig+0x44>
 8001326:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800132a:	e000      	b.n	800132e <ETH_SetDMAConfig+0x46>
 800132c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800132e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	7b9b      	ldrb	r3, [r3, #14]
 8001334:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001336:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800133c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	7f1b      	ldrb	r3, [r3, #28]
 8001342:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001344:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	7f9b      	ldrb	r3, [r3, #30]
 800134a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800134c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001352:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800135a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800135c:	4313      	orrs	r3, r2
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800136c:	461a      	mov	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff fd7a 	bl	8000e78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800138c:	461a      	mov	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	791b      	ldrb	r3, [r3, #4]
 8001396:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800139c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80013a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80013a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80013b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80013ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80013c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff fd4b 	bl	8000e78 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	f8de3f23 	.word	0xf8de3f23

080013fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0a6      	sub	sp, #152	@ 0x98
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001404:	2301      	movs	r3, #1
 8001406:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001410:	2300      	movs	r3, #0
 8001412:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800141a:	2301      	movs	r3, #1
 800141c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001426:	2301      	movs	r3, #1
 8001428:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001438:	2300      	movs	r3, #0
 800143a:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001442:	2300      	movs	r3, #0
 8001444:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800145e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001462:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001464:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001468:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001470:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001474:	4619      	mov	r1, r3
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fe86 	bl	8001188 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800147c:	2301      	movs	r3, #1
 800147e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001480:	2301      	movs	r3, #1
 8001482:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001484:	2301      	movs	r3, #1
 8001486:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800148a:	2301      	movs	r3, #1
 800148c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800149e:	2300      	movs	r3, #0
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80014ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80014b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80014b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80014be:	2301      	movs	r3, #1
 80014c0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff08 	bl	80012e8 <ETH_SetDMAConfig>
}
 80014d8:	bf00      	nop
 80014da:	3798      	adds	r7, #152	@ 0x98
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3305      	adds	r3, #5
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	3204      	adds	r2, #4
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <ETH_MACAddressConfig+0x68>)
 8001502:	4413      	add	r3, r2
 8001504:	461a      	mov	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3303      	adds	r3, #3
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	061a      	lsls	r2, r3, #24
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3302      	adds	r3, #2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	041b      	lsls	r3, r3, #16
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3301      	adds	r3, #1
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	4313      	orrs	r3, r2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	4313      	orrs	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <ETH_MACAddressConfig+0x6c>)
 8001532:	4413      	add	r3, r2
 8001534:	461a      	mov	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	6013      	str	r3, [r2, #0]
}
 800153a:	bf00      	nop
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40028040 	.word	0x40028040
 800154c:	40028044 	.word	0x40028044

08001550 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	e03e      	b.n	80015dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68d9      	ldr	r1, [r3, #12]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	440b      	add	r3, r1
 800156e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	3206      	adds	r2, #6
 8001590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d80c      	bhi.n	80015c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68d9      	ldr	r1, [r3, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	461a      	mov	r2, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	e004      	b.n	80015ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	461a      	mov	r2, r3
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3301      	adds	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d9bd      	bls.n	800155e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015f4:	611a      	str	r2, [r3, #16]
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001602:	b480      	push	{r7}
 8001604:	b085      	sub	sp, #20
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e046      	b.n	800169e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6919      	ldr	r1, [r3, #16]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800164c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001654:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	3212      	adds	r2, #18
 800166a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d80c      	bhi.n	800168e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6919      	ldr	r1, [r3, #16]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	461a      	mov	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	e004      	b.n	8001698 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	461a      	mov	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d9b5      	bls.n	8001610 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ce:	60da      	str	r2, [r3, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	@ 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	e177      	b.n	80019e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016f8:	2201      	movs	r2, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	429a      	cmp	r2, r3
 8001712:	f040 8166 	bne.w	80019e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b01      	cmp	r3, #1
 8001720:	d005      	beq.n	800172e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172a:	2b02      	cmp	r3, #2
 800172c:	d130      	bne.n	8001790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001764:	2201      	movs	r2, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 0201 	and.w	r2, r3, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b03      	cmp	r3, #3
 800179a:	d017      	beq.n	80017cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d123      	bne.n	8001820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	08da      	lsrs	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3208      	adds	r2, #8
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	08da      	lsrs	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3208      	adds	r2, #8
 800181a:	69b9      	ldr	r1, [r7, #24]
 800181c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0203 	and.w	r2, r3, #3
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80c0 	beq.w	80019e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b66      	ldr	r3, [pc, #408]	@ (8001a00 <HAL_GPIO_Init+0x324>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	4a65      	ldr	r2, [pc, #404]	@ (8001a00 <HAL_GPIO_Init+0x324>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001870:	6453      	str	r3, [r2, #68]	@ 0x44
 8001872:	4b63      	ldr	r3, [pc, #396]	@ (8001a00 <HAL_GPIO_Init+0x324>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800187e:	4a61      	ldr	r2, [pc, #388]	@ (8001a04 <HAL_GPIO_Init+0x328>)
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	220f      	movs	r2, #15
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a58      	ldr	r2, [pc, #352]	@ (8001a08 <HAL_GPIO_Init+0x32c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d037      	beq.n	800191a <HAL_GPIO_Init+0x23e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a57      	ldr	r2, [pc, #348]	@ (8001a0c <HAL_GPIO_Init+0x330>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d031      	beq.n	8001916 <HAL_GPIO_Init+0x23a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a56      	ldr	r2, [pc, #344]	@ (8001a10 <HAL_GPIO_Init+0x334>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d02b      	beq.n	8001912 <HAL_GPIO_Init+0x236>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a55      	ldr	r2, [pc, #340]	@ (8001a14 <HAL_GPIO_Init+0x338>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d025      	beq.n	800190e <HAL_GPIO_Init+0x232>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a54      	ldr	r2, [pc, #336]	@ (8001a18 <HAL_GPIO_Init+0x33c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01f      	beq.n	800190a <HAL_GPIO_Init+0x22e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a53      	ldr	r2, [pc, #332]	@ (8001a1c <HAL_GPIO_Init+0x340>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d019      	beq.n	8001906 <HAL_GPIO_Init+0x22a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a52      	ldr	r2, [pc, #328]	@ (8001a20 <HAL_GPIO_Init+0x344>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x226>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a51      	ldr	r2, [pc, #324]	@ (8001a24 <HAL_GPIO_Init+0x348>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x222>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a50      	ldr	r2, [pc, #320]	@ (8001a28 <HAL_GPIO_Init+0x34c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x21e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4f      	ldr	r2, [pc, #316]	@ (8001a2c <HAL_GPIO_Init+0x350>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x21a>
 80018f2:	2309      	movs	r3, #9
 80018f4:	e012      	b.n	800191c <HAL_GPIO_Init+0x240>
 80018f6:	230a      	movs	r3, #10
 80018f8:	e010      	b.n	800191c <HAL_GPIO_Init+0x240>
 80018fa:	2308      	movs	r3, #8
 80018fc:	e00e      	b.n	800191c <HAL_GPIO_Init+0x240>
 80018fe:	2307      	movs	r3, #7
 8001900:	e00c      	b.n	800191c <HAL_GPIO_Init+0x240>
 8001902:	2306      	movs	r3, #6
 8001904:	e00a      	b.n	800191c <HAL_GPIO_Init+0x240>
 8001906:	2305      	movs	r3, #5
 8001908:	e008      	b.n	800191c <HAL_GPIO_Init+0x240>
 800190a:	2304      	movs	r3, #4
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x240>
 800190e:	2303      	movs	r3, #3
 8001910:	e004      	b.n	800191c <HAL_GPIO_Init+0x240>
 8001912:	2302      	movs	r3, #2
 8001914:	e002      	b.n	800191c <HAL_GPIO_Init+0x240>
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_GPIO_Init+0x240>
 800191a:	2300      	movs	r3, #0
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	f002 0203 	and.w	r2, r2, #3
 8001922:	0092      	lsls	r2, r2, #2
 8001924:	4093      	lsls	r3, r2
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800192c:	4935      	ldr	r1, [pc, #212]	@ (8001a04 <HAL_GPIO_Init+0x328>)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	3302      	adds	r3, #2
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a30 <HAL_GPIO_Init+0x354>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800195e:	4a34      	ldr	r2, [pc, #208]	@ (8001a30 <HAL_GPIO_Init+0x354>)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001964:	4b32      	ldr	r3, [pc, #200]	@ (8001a30 <HAL_GPIO_Init+0x354>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001988:	4a29      	ldr	r2, [pc, #164]	@ (8001a30 <HAL_GPIO_Init+0x354>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800198e:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <HAL_GPIO_Init+0x354>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a30 <HAL_GPIO_Init+0x354>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <HAL_GPIO_Init+0x354>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019dc:	4a14      	ldr	r2, [pc, #80]	@ (8001a30 <HAL_GPIO_Init+0x354>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3301      	adds	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	2b0f      	cmp	r3, #15
 80019ec:	f67f ae84 	bls.w	80016f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40013800 	.word	0x40013800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020c00 	.word	0x40020c00
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40021400 	.word	0x40021400
 8001a20:	40021800 	.word	0x40021800
 8001a24:	40021c00 	.word	0x40021c00
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	40022400 	.word	0x40022400
 8001a30:	40013c00 	.word	0x40013c00

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a50:	e003      	b.n	8001a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	619a      	str	r2, [r3, #24]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af02      	add	r7, sp, #8
 8001a6c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e101      	b.n	8001c7c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff f8fa 	bl	8000c8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aa6:	d102      	bne.n	8001aae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fd70 	bl	8004598 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7c1a      	ldrb	r2, [r3, #16]
 8001ac0:	f88d 2000 	strb.w	r2, [sp]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac8:	f002 fd02 	bl	80044d0 <USB_CoreInit>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0ce      	b.n	8001c7c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f002 fd68 	bl	80045ba <USB_SetCurrentMode>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0bf      	b.n	8001c7c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e04a      	b.n	8001b98 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	3315      	adds	r3, #21
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4413      	add	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	3314      	adds	r3, #20
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	b298      	uxth	r0, r3
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	332e      	adds	r3, #46	@ 0x2e
 8001b3e:	4602      	mov	r2, r0
 8001b40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	3318      	adds	r3, #24
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	331c      	adds	r3, #28
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	3320      	adds	r3, #32
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b7e:	7bfa      	ldrb	r2, [r7, #15]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3324      	adds	r3, #36	@ 0x24
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	3301      	adds	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	791b      	ldrb	r3, [r3, #4]
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d3af      	bcc.n	8001b02 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e044      	b.n	8001c32 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	791b      	ldrb	r3, [r3, #4]
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d3b5      	bcc.n	8001ba8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7c1a      	ldrb	r2, [r3, #16]
 8001c44:	f88d 2000 	strb.w	r2, [sp]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c4c:	f002 fd02 	bl	8004654 <USB_DevInit>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00c      	b.n	8001c7c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 feca 	bl	8004a0e <USB_DevDisconnect>

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e267      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d075      	beq.n	8001d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ca2:	4b88      	ldr	r3, [pc, #544]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d00c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cae:	4b85      	ldr	r3, [pc, #532]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d112      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cba:	4b82      	ldr	r3, [pc, #520]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d05b      	beq.n	8001d8c <HAL_RCC_OscConfig+0x108>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d157      	bne.n	8001d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e242      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x74>
 8001cea:	4b76      	ldr	r3, [pc, #472]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a75      	ldr	r2, [pc, #468]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e01d      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b70      	ldr	r3, [pc, #448]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a6f      	ldr	r2, [pc, #444]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a6c      	ldr	r2, [pc, #432]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001d1c:	4b69      	ldr	r3, [pc, #420]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a68      	ldr	r2, [pc, #416]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b66      	ldr	r3, [pc, #408]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a65      	ldr	r2, [pc, #404]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f890 	bl	8000e60 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff f88c 	bl	8000e60 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	@ 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e207      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0xc0>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff f87c 	bl	8000e60 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff f878 	bl	8000e60 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	@ 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1f3      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	4b51      	ldr	r3, [pc, #324]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0xe8>
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d063      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da6:	4b47      	ldr	r3, [pc, #284]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d11c      	bne.n	8001dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db2:	4b44      	ldr	r3, [pc, #272]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d116      	bne.n	8001dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	4b41      	ldr	r3, [pc, #260]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e1c7      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4937      	ldr	r1, [pc, #220]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	e03a      	b.n	8001e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df4:	4b34      	ldr	r3, [pc, #208]	@ (8001ec8 <HAL_RCC_OscConfig+0x244>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff f831 	bl	8000e60 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e02:	f7ff f82d 	bl	8000e60 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1a8      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4925      	ldr	r1, [pc, #148]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
 8001e34:	e015      	b.n	8001e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e36:	4b24      	ldr	r3, [pc, #144]	@ (8001ec8 <HAL_RCC_OscConfig+0x244>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f810 	bl	8000e60 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e44:	f7ff f80c 	bl	8000e60 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e187      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d036      	beq.n	8001edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d016      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <HAL_RCC_OscConfig+0x248>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7fe fff0 	bl	8000e60 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e84:	f7fe ffec 	bl	8000e60 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e167      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x200>
 8001ea2:	e01b      	b.n	8001edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea4:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <HAL_RCC_OscConfig+0x248>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7fe ffd9 	bl	8000e60 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb0:	e00e      	b.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7fe ffd5 	bl	8000e60 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d907      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e150      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	42470000 	.word	0x42470000
 8001ecc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	4b88      	ldr	r3, [pc, #544]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ea      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8097 	beq.w	8002018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eee:	4b81      	ldr	r3, [pc, #516]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	4b7d      	ldr	r3, [pc, #500]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	4a7c      	ldr	r2, [pc, #496]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	4b77      	ldr	r3, [pc, #476]	@ (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f26:	4b74      	ldr	r3, [pc, #464]	@ (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a73      	ldr	r2, [pc, #460]	@ (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f32:	f7fe ff95 	bl	8000e60 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3a:	f7fe ff91 	bl	8000e60 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e10c      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2ea>
 8001f60:	4b64      	ldr	r3, [pc, #400]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f64:	4a63      	ldr	r2, [pc, #396]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f6c:	e01c      	b.n	8001fa8 <HAL_RCC_OscConfig+0x324>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x30c>
 8001f76:	4b5f      	ldr	r3, [pc, #380]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7a:	4a5e      	ldr	r2, [pc, #376]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f82:	4b5c      	ldr	r3, [pc, #368]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f86:	4a5b      	ldr	r2, [pc, #364]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x324>
 8001f90:	4b58      	ldr	r3, [pc, #352]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f94:	4a57      	ldr	r2, [pc, #348]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9c:	4b55      	ldr	r3, [pc, #340]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa0:	4a54      	ldr	r2, [pc, #336]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	f023 0304 	bic.w	r3, r3, #4
 8001fa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d015      	beq.n	8001fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7fe ff56 	bl	8000e60 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7fe ff52 	bl	8000e60 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e0cb      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	4b49      	ldr	r3, [pc, #292]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0ee      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x334>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7fe ff40 	bl	8000e60 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7fe ff3c 	bl	8000e60 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e0b5      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ee      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200c:	4b39      	ldr	r3, [pc, #228]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	4a38      	ldr	r2, [pc, #224]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002016:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a1 	beq.w	8002164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002022:	4b34      	ldr	r3, [pc, #208]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d05c      	beq.n	80020e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d141      	bne.n	80020ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b31      	ldr	r3, [pc, #196]	@ (80020fc <HAL_RCC_OscConfig+0x478>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe ff10 	bl	8000e60 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002044:	f7fe ff0c 	bl	8000e60 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e087      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002056:	4b27      	ldr	r3, [pc, #156]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	019b      	lsls	r3, r3, #6
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002078:	085b      	lsrs	r3, r3, #1
 800207a:	3b01      	subs	r3, #1
 800207c:	041b      	lsls	r3, r3, #16
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	491b      	ldr	r1, [pc, #108]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800208c:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <HAL_RCC_OscConfig+0x478>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7fe fee5 	bl	8000e60 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209a:	f7fe fee1 	bl	8000e60 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e05c      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ac:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x416>
 80020b8:	e054      	b.n	8002164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <HAL_RCC_OscConfig+0x478>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe fece 	bl	8000e60 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe feca 	bl	8000e60 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e045      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x444>
 80020e6:	e03d      	b.n	8002164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e038      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40007000 	.word	0x40007000
 80020fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_RCC_OscConfig+0x4ec>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d028      	beq.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d121      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d11a      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002138:	4293      	cmp	r3, r2
 800213a:	d111      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	3b01      	subs	r3, #1
 800214a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d107      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0cc      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b68      	ldr	r3, [pc, #416]	@ (800232c <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d90c      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b65      	ldr	r3, [pc, #404]	@ (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	@ (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a58      	ldr	r2, [pc, #352]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a52      	ldr	r2, [pc, #328]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d044      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d119      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d003      	beq.n	8002232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800222e:	2b03      	cmp	r3, #3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b3f      	ldr	r3, [pc, #252]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3b      	ldr	r3, [pc, #236]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e067      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b37      	ldr	r3, [pc, #220]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4934      	ldr	r1, [pc, #208]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7fe fdfc 	bl	8000e60 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7fe fdf8 	bl	8000e60 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e04f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2b      	ldr	r3, [pc, #172]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b25      	ldr	r3, [pc, #148]	@ (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d20c      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b22      	ldr	r3, [pc, #136]	@ (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	@ (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e6:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fd5c 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00
 8002330:	40023800 	.word	0x40023800
 8002334:	08004ee4 	.word	0x08004ee4
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002344:	b094      	sub	sp, #80	@ 0x50
 8002346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	647b      	str	r3, [r7, #68]	@ 0x44
 800234c:	2300      	movs	r3, #0
 800234e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002350:	2300      	movs	r3, #0
 8002352:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002358:	4b79      	ldr	r3, [pc, #484]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d00d      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x40>
 8002364:	2b08      	cmp	r3, #8
 8002366:	f200 80e1 	bhi.w	800252c <HAL_RCC_GetSysClockFreq+0x1ec>
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x34>
 800236e:	2b04      	cmp	r3, #4
 8002370:	d003      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x3a>
 8002372:	e0db      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b73      	ldr	r3, [pc, #460]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x204>)
 8002376:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002378:	e0db      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800237a:	4b73      	ldr	r3, [pc, #460]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x208>)
 800237c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800237e:	e0d8      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002380:	4b6f      	ldr	r3, [pc, #444]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002388:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800238a:	4b6d      	ldr	r3, [pc, #436]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d063      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002396:	4b6a      	ldr	r3, [pc, #424]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	2200      	movs	r2, #0
 800239e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023aa:	2300      	movs	r3, #0
 80023ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023b2:	4622      	mov	r2, r4
 80023b4:	462b      	mov	r3, r5
 80023b6:	f04f 0000 	mov.w	r0, #0
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	0159      	lsls	r1, r3, #5
 80023c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c4:	0150      	lsls	r0, r2, #5
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4621      	mov	r1, r4
 80023cc:	1a51      	subs	r1, r2, r1
 80023ce:	6139      	str	r1, [r7, #16]
 80023d0:	4629      	mov	r1, r5
 80023d2:	eb63 0301 	sbc.w	r3, r3, r1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023e4:	4659      	mov	r1, fp
 80023e6:	018b      	lsls	r3, r1, #6
 80023e8:	4651      	mov	r1, sl
 80023ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ee:	4651      	mov	r1, sl
 80023f0:	018a      	lsls	r2, r1, #6
 80023f2:	4651      	mov	r1, sl
 80023f4:	ebb2 0801 	subs.w	r8, r2, r1
 80023f8:	4659      	mov	r1, fp
 80023fa:	eb63 0901 	sbc.w	r9, r3, r1
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800240e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002412:	4690      	mov	r8, r2
 8002414:	4699      	mov	r9, r3
 8002416:	4623      	mov	r3, r4
 8002418:	eb18 0303 	adds.w	r3, r8, r3
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	462b      	mov	r3, r5
 8002420:	eb49 0303 	adc.w	r3, r9, r3
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002432:	4629      	mov	r1, r5
 8002434:	024b      	lsls	r3, r1, #9
 8002436:	4621      	mov	r1, r4
 8002438:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800243c:	4621      	mov	r1, r4
 800243e:	024a      	lsls	r2, r1, #9
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002446:	2200      	movs	r2, #0
 8002448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800244a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800244c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002450:	f7fd fecc 	bl	80001ec <__aeabi_uldivmod>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4613      	mov	r3, r2
 800245a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800245c:	e058      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245e:	4b38      	ldr	r3, [pc, #224]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	2200      	movs	r2, #0
 8002466:	4618      	mov	r0, r3
 8002468:	4611      	mov	r1, r2
 800246a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800246e:	623b      	str	r3, [r7, #32]
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
 8002474:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002478:	4642      	mov	r2, r8
 800247a:	464b      	mov	r3, r9
 800247c:	f04f 0000 	mov.w	r0, #0
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	0159      	lsls	r1, r3, #5
 8002486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800248a:	0150      	lsls	r0, r2, #5
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4641      	mov	r1, r8
 8002492:	ebb2 0a01 	subs.w	sl, r2, r1
 8002496:	4649      	mov	r1, r9
 8002498:	eb63 0b01 	sbc.w	fp, r3, r1
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024b0:	ebb2 040a 	subs.w	r4, r2, sl
 80024b4:	eb63 050b 	sbc.w	r5, r3, fp
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	00eb      	lsls	r3, r5, #3
 80024c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024c6:	00e2      	lsls	r2, r4, #3
 80024c8:	4614      	mov	r4, r2
 80024ca:	461d      	mov	r5, r3
 80024cc:	4643      	mov	r3, r8
 80024ce:	18e3      	adds	r3, r4, r3
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	464b      	mov	r3, r9
 80024d4:	eb45 0303 	adc.w	r3, r5, r3
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024e6:	4629      	mov	r1, r5
 80024e8:	028b      	lsls	r3, r1, #10
 80024ea:	4621      	mov	r1, r4
 80024ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f0:	4621      	mov	r1, r4
 80024f2:	028a      	lsls	r2, r1, #10
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024fa:	2200      	movs	r2, #0
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	61fa      	str	r2, [r7, #28]
 8002500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002504:	f7fd fe72 	bl	80001ec <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4613      	mov	r3, r2
 800250e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	3301      	adds	r3, #1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002520:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800252a:	e002      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x204>)
 800252e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002534:	4618      	mov	r0, r3
 8002536:	3750      	adds	r7, #80	@ 0x50
 8002538:	46bd      	mov	sp, r7
 800253a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	00f42400 	.word	0x00f42400
 8002548:	007a1200 	.word	0x007a1200

0800254c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002550:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <HAL_RCC_GetHCLKFreq+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000000 	.word	0x20000000

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002568:	f7ff fff0 	bl	800254c <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0a9b      	lsrs	r3, r3, #10
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	@ (8002588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	08004ef4 	.word	0x08004ef4

0800258c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002590:	f7ff ffdc 	bl	800254c <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0b5b      	lsrs	r3, r3, #13
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4903      	ldr	r1, [pc, #12]	@ (80025b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40023800 	.word	0x40023800
 80025b0:	08004ef4 	.word	0x08004ef4

080025b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e022      	b.n	800260c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7fe f9e5 	bl	80009a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2203      	movs	r2, #3
 80025e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f814 	bl	8002614 <HAL_SD_InitCard>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00a      	b.n	800260c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002614:	b5b0      	push	{r4, r5, r7, lr}
 8002616:	b08e      	sub	sp, #56	@ 0x38
 8002618:	af04      	add	r7, sp, #16
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002630:	2376      	movs	r3, #118	@ 0x76
 8002632:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681d      	ldr	r5, [r3, #0]
 8002638:	466c      	mov	r4, sp
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800264c:	4628      	mov	r0, r5
 800264e:	f001 fa0d 	bl	8003a6c <SDIO_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e04f      	b.n	8002704 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002664:	4b29      	ldr	r3, [pc, #164]	@ (800270c <HAL_SD_InitCard+0xf8>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f001 fa45 	bl	8003afe <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002674:	4b25      	ldr	r3, [pc, #148]	@ (800270c <HAL_SD_InitCard+0xf8>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800267a:	2002      	movs	r0, #2
 800267c:	f7fe fbfc 	bl	8000e78 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fe79 	bl	8003378 <SD_PowerON>
 8002686:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e02e      	b.n	8002704 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fd98 	bl	80031dc <SD_InitCard>
 80026ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e01b      	b.n	8002704 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 faa4 	bl	8003c22 <SDMMC_CmdBlockLength>
 80026da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00f      	beq.n	8002702 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <HAL_SD_InitCard+0xfc>)
 80026e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3728      	adds	r7, #40	@ 0x28
 8002708:	46bd      	mov	sp, r7
 800270a:	bdb0      	pop	{r4, r5, r7, pc}
 800270c:	422580a0 	.word	0x422580a0
 8002710:	004005ff 	.word	0x004005ff

08002714 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b092      	sub	sp, #72	@ 0x48
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002722:	f7fe fb9d 	bl	8000e60 <HAL_GetTick>
 8002726:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d107      	bne.n	8002746 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e1c5      	b.n	8002ad2 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	f040 81b8 	bne.w	8002ac4 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800275a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	441a      	add	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002764:	429a      	cmp	r2, r3
 8002766:	d907      	bls.n	8002778 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e1ac      	b.n	8002ad2 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2203      	movs	r2, #3
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2200      	movs	r2, #0
 8002786:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278c:	2b01      	cmp	r3, #1
 800278e:	d002      	beq.n	8002796 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002792:	025b      	lsls	r3, r3, #9
 8002794:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800279a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	025b      	lsls	r3, r3, #9
 80027a0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80027a2:	2390      	movs	r3, #144	@ 0x90
 80027a4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80027a6:	2302      	movs	r3, #2
 80027a8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80027ae:	2301      	movs	r3, #1
 80027b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f107 0214 	add.w	r2, r7, #20
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 fa04 	bl	8003bca <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d90a      	bls.n	80027de <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2202      	movs	r2, #2
 80027cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 fa68 	bl	8003caa <SDMMC_CmdReadMultiBlock>
 80027da:	6478      	str	r0, [r7, #68]	@ 0x44
 80027dc:	e009      	b.n	80027f2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 fa3b 	bl	8003c66 <SDMMC_CmdReadSingleBlock>
 80027f0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80027f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d012      	beq.n	800281e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a7e      	ldr	r2, [pc, #504]	@ (80029f8 <HAL_SD_ReadBlocks+0x2e4>)
 80027fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002806:	431a      	orrs	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e159      	b.n	8002ad2 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002822:	e061      	b.n	80028e8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d03c      	beq.n	80028ac <HAL_SD_ReadBlocks+0x198>
 8002832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d039      	beq.n	80028ac <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002838:	2300      	movs	r3, #0
 800283a:	643b      	str	r3, [r7, #64]	@ 0x40
 800283c:	e033      	b.n	80028a6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f001 f93d 	bl	8003ac2 <SDIO_ReadFIFO>
 8002848:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800284a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284c:	b2da      	uxtb	r2, r3
 800284e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002850:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002854:	3301      	adds	r3, #1
 8002856:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800285a:	3b01      	subs	r3, #1
 800285c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	b2da      	uxtb	r2, r3
 8002864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002866:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800286a:	3301      	adds	r3, #1
 800286c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800286e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002870:	3b01      	subs	r3, #1
 8002872:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002876:	0c1b      	lsrs	r3, r3, #16
 8002878:	b2da      	uxtb	r2, r3
 800287a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800287c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800287e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002880:	3301      	adds	r3, #1
 8002882:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002886:	3b01      	subs	r3, #1
 8002888:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800288a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288c:	0e1b      	lsrs	r3, r3, #24
 800288e:	b2da      	uxtb	r2, r3
 8002890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002892:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002896:	3301      	adds	r3, #1
 8002898:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800289a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800289c:	3b01      	subs	r3, #1
 800289e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80028a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028a2:	3301      	adds	r3, #1
 80028a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80028a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028a8:	2b07      	cmp	r3, #7
 80028aa:	d9c8      	bls.n	800283e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80028ac:	f7fe fad8 	bl	8000e60 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d902      	bls.n	80028c2 <HAL_SD_ReadBlocks+0x1ae>
 80028bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d112      	bne.n	80028e8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a4c      	ldr	r2, [pc, #304]	@ (80029f8 <HAL_SD_ReadBlocks+0x2e4>)
 80028c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e0f4      	b.n	8002ad2 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ee:	f240 332a 	movw	r3, #810	@ 0x32a
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d095      	beq.n	8002824 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d022      	beq.n	800294c <HAL_SD_ReadBlocks+0x238>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d91f      	bls.n	800294c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002910:	2b03      	cmp	r3, #3
 8002912:	d01b      	beq.n	800294c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f001 fa2d 	bl	8003d78 <SDMMC_CmdStopTransfer>
 800291e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002922:	2b00      	cmp	r3, #0
 8002924:	d012      	beq.n	800294c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a33      	ldr	r2, [pc, #204]	@ (80029f8 <HAL_SD_ReadBlocks+0x2e4>)
 800292c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002934:	431a      	orrs	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0c2      	b.n	8002ad2 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_SD_ReadBlocks+0x254>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002964:	2b00      	cmp	r3, #0
 8002966:	d012      	beq.n	800298e <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a22      	ldr	r2, [pc, #136]	@ (80029f8 <HAL_SD_ReadBlocks+0x2e4>)
 800296e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002974:	f043 0208 	orr.w	r2, r3, #8
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0a1      	b.n	8002ad2 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d012      	beq.n	80029c2 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a15      	ldr	r2, [pc, #84]	@ (80029f8 <HAL_SD_ReadBlocks+0x2e4>)
 80029a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a8:	f043 0202 	orr.w	r2, r3, #2
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e087      	b.n	8002ad2 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d064      	beq.n	8002a9a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a08      	ldr	r2, [pc, #32]	@ (80029f8 <HAL_SD_ReadBlocks+0x2e4>)
 80029d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e06d      	b.n	8002ad2 <HAL_SD_ReadBlocks+0x3be>
 80029f6:	bf00      	nop
 80029f8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 f85e 	bl	8003ac2 <SDIO_ReadFIFO>
 8002a06:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a12:	3301      	adds	r3, #1
 8002a14:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a24:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a28:	3301      	adds	r3, #1
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a34:	0c1b      	lsrs	r3, r3, #16
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3e:	3301      	adds	r3, #1
 8002a40:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a44:	3b01      	subs	r3, #1
 8002a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4a:	0e1b      	lsrs	r3, r3, #24
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a50:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a54:	3301      	adds	r3, #1
 8002a56:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002a5e:	f7fe f9ff 	bl	8000e60 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d902      	bls.n	8002a74 <HAL_SD_ReadBlocks+0x360>
 8002a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d112      	bne.n	8002a9a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a18      	ldr	r2, [pc, #96]	@ (8002adc <HAL_SD_ReadBlocks+0x3c8>)
 8002a7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e01b      	b.n	8002ad2 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_SD_ReadBlocks+0x39a>
 8002aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1a6      	bne.n	80029fc <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002ab6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e006      	b.n	8002ad2 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
  }
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3748      	adds	r7, #72	@ 0x48
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	004005ff 	.word	0x004005ff

08002ae0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b092      	sub	sp, #72	@ 0x48
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002aee:	f7fe f9b7 	bl	8000e60 <HAL_GetTick>
 8002af2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b06:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e16d      	b.n	8002dee <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	f040 8160 	bne.w	8002de0 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002b26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	441a      	add	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d907      	bls.n	8002b44 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b38:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e154      	b.n	8002dee <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2203      	movs	r2, #3
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2200      	movs	r2, #0
 8002b52:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d002      	beq.n	8002b62 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5e:	025b      	lsls	r3, r3, #9
 8002b60:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b66:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	025b      	lsls	r3, r3, #9
 8002b6c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002b6e:	2390      	movs	r3, #144	@ 0x90
 8002b70:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f107 0218 	add.w	r2, r7, #24
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 f81e 	bl	8003bca <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d90a      	bls.n	8002baa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 f8c6 	bl	8003d32 <SDMMC_CmdWriteMultiBlock>
 8002ba6:	6478      	str	r0, [r7, #68]	@ 0x44
 8002ba8:	e009      	b.n	8002bbe <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2210      	movs	r2, #16
 8002bae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 f899 	bl	8003cee <SDMMC_CmdWriteSingleBlock>
 8002bbc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d012      	beq.n	8002bea <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a8b      	ldr	r2, [pc, #556]	@ (8002df8 <HAL_SD_WriteBlocks+0x318>)
 8002bca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e101      	b.n	8002dee <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002bee:	e065      	b.n	8002cbc <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d040      	beq.n	8002c80 <HAL_SD_WriteBlocks+0x1a0>
 8002bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d03d      	beq.n	8002c80 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c08:	e037      	b.n	8002c7a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c12:	3301      	adds	r3, #1
 8002c14:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	021a      	lsls	r2, r3, #8
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c30:	3b01      	subs	r3, #1
 8002c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c42:	3301      	adds	r3, #1
 8002c44:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	061a      	lsls	r2, r3, #24
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c60:	3b01      	subs	r3, #1
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f107 0214 	add.w	r2, r7, #20
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 ff34 	bl	8003adc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c76:	3301      	adds	r3, #1
 8002c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c7c:	2b07      	cmp	r3, #7
 8002c7e:	d9c4      	bls.n	8002c0a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002c80:	f7fe f8ee 	bl	8000e60 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d902      	bls.n	8002c96 <HAL_SD_WriteBlocks+0x1b6>
 8002c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d112      	bne.n	8002cbc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a57      	ldr	r2, [pc, #348]	@ (8002df8 <HAL_SD_WriteBlocks+0x318>)
 8002c9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e098      	b.n	8002dee <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cc2:	f240 331a 	movw	r3, #794	@ 0x31a
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d091      	beq.n	8002bf0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d022      	beq.n	8002d20 <HAL_SD_WriteBlocks+0x240>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d91f      	bls.n	8002d20 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d01b      	beq.n	8002d20 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 f843 	bl	8003d78 <SDMMC_CmdStopTransfer>
 8002cf2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a3e      	ldr	r2, [pc, #248]	@ (8002df8 <HAL_SD_WriteBlocks+0x318>)
 8002d00:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e066      	b.n	8002dee <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_SD_WriteBlocks+0x25c>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d012      	beq.n	8002d62 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2d      	ldr	r2, [pc, #180]	@ (8002df8 <HAL_SD_WriteBlocks+0x318>)
 8002d42:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d48:	f043 0208 	orr.w	r2, r3, #8
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e045      	b.n	8002dee <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d012      	beq.n	8002d96 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a20      	ldr	r2, [pc, #128]	@ (8002df8 <HAL_SD_WriteBlocks+0x318>)
 8002d76:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7c:	f043 0202 	orr.w	r2, r3, #2
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e02b      	b.n	8002dee <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a13      	ldr	r2, [pc, #76]	@ (8002df8 <HAL_SD_WriteBlocks+0x318>)
 8002daa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db0:	f043 0210 	orr.w	r2, r3, #16
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e011      	b.n	8002dee <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002dd2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e006      	b.n	8002dee <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3748      	adds	r7, #72	@ 0x48
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	004005ff 	.word	0x004005ff

08002dfc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e0a:	0f9b      	lsrs	r3, r3, #30
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e16:	0e9b      	lsrs	r3, r3, #26
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e28:	0e1b      	lsrs	r3, r3, #24
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e3a:	0c1b      	lsrs	r3, r3, #16
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e5c:	0d1b      	lsrs	r3, r3, #20
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e68:	0c1b      	lsrs	r3, r3, #16
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e7a:	0bdb      	lsrs	r3, r3, #15
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e8c:	0b9b      	lsrs	r3, r3, #14
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e9e:	0b5b      	lsrs	r3, r3, #13
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eb0:	0b1b      	lsrs	r3, r3, #12
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d163      	bne.n	8002f94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ed0:	009a      	lsls	r2, r3, #2
 8002ed2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002edc:	0f92      	lsrs	r2, r2, #30
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee8:	0edb      	lsrs	r3, r3, #27
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002efa:	0e1b      	lsrs	r3, r3, #24
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f0c:	0d5b      	lsrs	r3, r3, #21
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f1e:	0c9b      	lsrs	r3, r3, #18
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f30:	0bdb      	lsrs	r3, r3, #15
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	7e1b      	ldrb	r3, [r3, #24]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	3302      	adds	r3, #2
 8002f54:	2201      	movs	r2, #1
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002f5e:	fb03 f202 	mul.w	r2, r3, r2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	7a1b      	ldrb	r3, [r3, #8]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	2201      	movs	r2, #1
 8002f72:	409a      	lsls	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002f80:	0a52      	lsrs	r2, r2, #9
 8002f82:	fb03 f202 	mul.w	r2, r3, r2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f90:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f92:	e031      	b.n	8002ff8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d11d      	bne.n	8002fd8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	431a      	orrs	r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	029a      	lsls	r2, r3, #10
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fcc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002fd6:	e00f      	b.n	8002ff8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a58      	ldr	r2, [pc, #352]	@ (8003140 <HAL_SD_GetCardCSD+0x344>)
 8002fde:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e09d      	b.n	8003134 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ffc:	0b9b      	lsrs	r3, r3, #14
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	b2da      	uxtb	r2, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800300e:	09db      	lsrs	r3, r3, #7
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003016:	b2da      	uxtb	r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003026:	b2da      	uxtb	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003030:	0fdb      	lsrs	r3, r3, #31
 8003032:	b2da      	uxtb	r2, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303c:	0f5b      	lsrs	r3, r3, #29
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	b2da      	uxtb	r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	0e9b      	lsrs	r3, r3, #26
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	b2da      	uxtb	r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003060:	0d9b      	lsrs	r3, r3, #22
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	b2da      	uxtb	r2, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003072:	0d5b      	lsrs	r3, r3, #21
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	b2da      	uxtb	r2, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	b2da      	uxtb	r2, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a2:	0bdb      	lsrs	r3, r3, #15
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b6:	0b9b      	lsrs	r3, r3, #14
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	0b5b      	lsrs	r3, r3, #13
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030de:	0b1b      	lsrs	r3, r3, #12
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f2:	0a9b      	lsrs	r3, r3, #10
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	b2da      	uxtb	r2, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311a:	085b      	lsrs	r3, r3, #1
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003122:	b2da      	uxtb	r2, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	004005ff 	.word	0x004005ff

08003144 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	4619      	mov	r1, r3
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f970 	bl	8003494 <SD_SendStatus>
 80031b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	0a5b      	lsrs	r3, r3, #9
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80031d2:	693b      	ldr	r3, [r7, #16]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80031dc:	b5b0      	push	{r4, r5, r7, lr}
 80031de:	b094      	sub	sp, #80	@ 0x50
 80031e0:	af04      	add	r7, sp, #16
 80031e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80031e4:	2301      	movs	r3, #1
 80031e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fc94 	bl	8003b1a <SDIO_GetPowerState>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80031f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80031fc:	e0b8      	b.n	8003370 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	2b03      	cmp	r3, #3
 8003204:	d02f      	beq.n	8003266 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fe7b 	bl	8003f06 <SDMMC_CmdSendCID>
 8003210:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <SD_InitCard+0x40>
    {
      return errorstate;
 8003218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321a:	e0a9      	b.n	8003370 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fcbe 	bl	8003ba4 <SDIO_GetResponse>
 8003228:	4602      	mov	r2, r0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2104      	movs	r1, #4
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fcb5 	bl	8003ba4 <SDIO_GetResponse>
 800323a:	4602      	mov	r2, r0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2108      	movs	r1, #8
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fcac 	bl	8003ba4 <SDIO_GetResponse>
 800324c:	4602      	mov	r2, r0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	210c      	movs	r1, #12
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fca3 	bl	8003ba4 <SDIO_GetResponse>
 800325e:	4602      	mov	r2, r0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326a:	2b03      	cmp	r3, #3
 800326c:	d00d      	beq.n	800328a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f107 020e 	add.w	r2, r7, #14
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fe81 	bl	8003f80 <SDMMC_CmdSetRelAdd>
 800327e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <SD_InitCard+0xae>
    {
      return errorstate;
 8003286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003288:	e072      	b.n	8003370 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	2b03      	cmp	r3, #3
 8003290:	d036      	beq.n	8003300 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003292:	89fb      	ldrh	r3, [r7, #14]
 8003294:	461a      	mov	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f000 fe4b 	bl	8003f42 <SDMMC_CmdSendCSD>
 80032ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80032ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80032b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032b6:	e05b      	b.n	8003370 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fc70 	bl	8003ba4 <SDIO_GetResponse>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2104      	movs	r1, #4
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fc67 	bl	8003ba4 <SDIO_GetResponse>
 80032d6:	4602      	mov	r2, r0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2108      	movs	r1, #8
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fc5e 	bl	8003ba4 <SDIO_GetResponse>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	210c      	movs	r1, #12
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fc55 	bl	8003ba4 <SDIO_GetResponse>
 80032fa:	4602      	mov	r2, r0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2104      	movs	r1, #4
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fc4c 	bl	8003ba4 <SDIO_GetResponse>
 800330c:	4603      	mov	r3, r0
 800330e:	0d1a      	lsrs	r2, r3, #20
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003314:	f107 0310 	add.w	r3, r7, #16
 8003318:	4619      	mov	r1, r3
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff fd6e 	bl	8002dfc <HAL_SD_GetCardCSD>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003326:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800332a:	e021      	b.n	8003370 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	2200      	movs	r2, #0
 8003338:	461c      	mov	r4, r3
 800333a:	4615      	mov	r5, r2
 800333c:	4622      	mov	r2, r4
 800333e:	462b      	mov	r3, r5
 8003340:	4608      	mov	r0, r1
 8003342:	f000 fd3b 	bl	8003dbc <SDMMC_CmdSelDesel>
 8003346:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <SD_InitCard+0x176>
  {
    return errorstate;
 800334e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003350:	e00e      	b.n	8003370 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681d      	ldr	r5, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	466c      	mov	r4, sp
 800335a:	f103 0210 	add.w	r2, r3, #16
 800335e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003364:	3304      	adds	r3, #4
 8003366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003368:	4628      	mov	r0, r5
 800336a:	f000 fb7f 	bl	8003a6c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3740      	adds	r7, #64	@ 0x40
 8003374:	46bd      	mov	sp, r7
 8003376:	bdb0      	pop	{r4, r5, r7, pc}

08003378 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fd36 	bl	8003e02 <SDMMC_CmdGoIdleState>
 8003396:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	e072      	b.n	8003488 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fd49 	bl	8003e3e <SDMMC_CmdOperCond>
 80033ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00d      	beq.n	80033d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fd1f 	bl	8003e02 <SDMMC_CmdGoIdleState>
 80033c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	e05b      	b.n	8003488 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d137      	bne.n	800344e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fd49 	bl	8003e7c <SDMMC_CmdAppCommand>
 80033ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d02d      	beq.n	800344e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80033f6:	e047      	b.n	8003488 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fd3c 	bl	8003e7c <SDMMC_CmdAppCommand>
 8003404:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <SD_PowerON+0x98>
    {
      return errorstate;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	e03b      	b.n	8003488 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	491e      	ldr	r1, [pc, #120]	@ (8003490 <SD_PowerON+0x118>)
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fd52 	bl	8003ec0 <SDMMC_CmdAppOperCommand>
 800341c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003424:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003428:	e02e      	b.n	8003488 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fbb7 	bl	8003ba4 <SDIO_GetResponse>
 8003436:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	0fdb      	lsrs	r3, r3, #31
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <SD_PowerON+0xcc>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <SD_PowerON+0xce>
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]

    count++;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	3301      	adds	r3, #1
 800344c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003454:	4293      	cmp	r3, r2
 8003456:	d802      	bhi.n	800345e <SD_PowerON+0xe6>
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0cc      	beq.n	80033f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003464:	4293      	cmp	r3, r2
 8003466:	d902      	bls.n	800346e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003468:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800346c:	e00c      	b.n	8003488 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	645a      	str	r2, [r3, #68]	@ 0x44
 800347e:	e002      	b.n	8003486 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	c1100000 	.word	0xc1100000

08003494 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80034a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80034a8:	e018      	b.n	80034dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b2:	041b      	lsls	r3, r3, #16
 80034b4:	4619      	mov	r1, r3
 80034b6:	4610      	mov	r0, r2
 80034b8:	f000 fd83 	bl	8003fc2 <SDMMC_CmdSendStatus>
 80034bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	e009      	b.n	80034dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fb68 	bl	8003ba4 <SDIO_GetResponse>
 80034d4:	4602      	mov	r2, r0
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e042      	b.n	800357c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd fb48 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2224      	movs	r2, #36	@ 0x24
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f82b 	bl	8003584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800353c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800354c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800355c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003588:	b0c0      	sub	sp, #256	@ 0x100
 800358a:	af00      	add	r7, sp, #0
 800358c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a0:	68d9      	ldr	r1, [r3, #12]
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	ea40 0301 	orr.w	r3, r0, r1
 80035ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80035dc:	f021 010c 	bic.w	r1, r1, #12
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80035ea:	430b      	orrs	r3, r1
 80035ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80035fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fe:	6999      	ldr	r1, [r3, #24]
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	ea40 0301 	orr.w	r3, r0, r1
 800360a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b8f      	ldr	r3, [pc, #572]	@ (8003850 <UART_SetConfig+0x2cc>)
 8003614:	429a      	cmp	r2, r3
 8003616:	d005      	beq.n	8003624 <UART_SetConfig+0xa0>
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4b8d      	ldr	r3, [pc, #564]	@ (8003854 <UART_SetConfig+0x2d0>)
 8003620:	429a      	cmp	r2, r3
 8003622:	d104      	bne.n	800362e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003624:	f7fe ffb2 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 8003628:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800362c:	e003      	b.n	8003636 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800362e:	f7fe ff99 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8003632:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003640:	f040 810c 	bne.w	800385c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003648:	2200      	movs	r2, #0
 800364a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800364e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003652:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003656:	4622      	mov	r2, r4
 8003658:	462b      	mov	r3, r5
 800365a:	1891      	adds	r1, r2, r2
 800365c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800365e:	415b      	adcs	r3, r3
 8003660:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003666:	4621      	mov	r1, r4
 8003668:	eb12 0801 	adds.w	r8, r2, r1
 800366c:	4629      	mov	r1, r5
 800366e:	eb43 0901 	adc.w	r9, r3, r1
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800367e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003686:	4690      	mov	r8, r2
 8003688:	4699      	mov	r9, r3
 800368a:	4623      	mov	r3, r4
 800368c:	eb18 0303 	adds.w	r3, r8, r3
 8003690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003694:	462b      	mov	r3, r5
 8003696:	eb49 0303 	adc.w	r3, r9, r3
 800369a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800369e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80036ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036b2:	460b      	mov	r3, r1
 80036b4:	18db      	adds	r3, r3, r3
 80036b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80036b8:	4613      	mov	r3, r2
 80036ba:	eb42 0303 	adc.w	r3, r2, r3
 80036be:	657b      	str	r3, [r7, #84]	@ 0x54
 80036c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80036c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80036c8:	f7fc fd90 	bl	80001ec <__aeabi_uldivmod>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4b61      	ldr	r3, [pc, #388]	@ (8003858 <UART_SetConfig+0x2d4>)
 80036d2:	fba3 2302 	umull	r2, r3, r3, r2
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	011c      	lsls	r4, r3, #4
 80036da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80036e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80036ec:	4642      	mov	r2, r8
 80036ee:	464b      	mov	r3, r9
 80036f0:	1891      	adds	r1, r2, r2
 80036f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80036f4:	415b      	adcs	r3, r3
 80036f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036fc:	4641      	mov	r1, r8
 80036fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003702:	4649      	mov	r1, r9
 8003704:	eb43 0b01 	adc.w	fp, r3, r1
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003714:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800371c:	4692      	mov	sl, r2
 800371e:	469b      	mov	fp, r3
 8003720:	4643      	mov	r3, r8
 8003722:	eb1a 0303 	adds.w	r3, sl, r3
 8003726:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800372a:	464b      	mov	r3, r9
 800372c:	eb4b 0303 	adc.w	r3, fp, r3
 8003730:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003740:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003744:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003748:	460b      	mov	r3, r1
 800374a:	18db      	adds	r3, r3, r3
 800374c:	643b      	str	r3, [r7, #64]	@ 0x40
 800374e:	4613      	mov	r3, r2
 8003750:	eb42 0303 	adc.w	r3, r2, r3
 8003754:	647b      	str	r3, [r7, #68]	@ 0x44
 8003756:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800375a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800375e:	f7fc fd45 	bl	80001ec <__aeabi_uldivmod>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4611      	mov	r1, r2
 8003768:	4b3b      	ldr	r3, [pc, #236]	@ (8003858 <UART_SetConfig+0x2d4>)
 800376a:	fba3 2301 	umull	r2, r3, r3, r1
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2264      	movs	r2, #100	@ 0x64
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	1acb      	subs	r3, r1, r3
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800377e:	4b36      	ldr	r3, [pc, #216]	@ (8003858 <UART_SetConfig+0x2d4>)
 8003780:	fba3 2302 	umull	r2, r3, r3, r2
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800378c:	441c      	add	r4, r3
 800378e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003792:	2200      	movs	r2, #0
 8003794:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003798:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800379c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	1891      	adds	r1, r2, r2
 80037a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80037a8:	415b      	adcs	r3, r3
 80037aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80037b0:	4641      	mov	r1, r8
 80037b2:	1851      	adds	r1, r2, r1
 80037b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80037b6:	4649      	mov	r1, r9
 80037b8:	414b      	adcs	r3, r1
 80037ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80037c8:	4659      	mov	r1, fp
 80037ca:	00cb      	lsls	r3, r1, #3
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d2:	4651      	mov	r1, sl
 80037d4:	00ca      	lsls	r2, r1, #3
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	4642      	mov	r2, r8
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037e4:	464b      	mov	r3, r9
 80037e6:	460a      	mov	r2, r1
 80037e8:	eb42 0303 	adc.w	r3, r2, r3
 80037ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003800:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003804:	460b      	mov	r3, r1
 8003806:	18db      	adds	r3, r3, r3
 8003808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800380a:	4613      	mov	r3, r2
 800380c:	eb42 0303 	adc.w	r3, r2, r3
 8003810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003816:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800381a:	f7fc fce7 	bl	80001ec <__aeabi_uldivmod>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4b0d      	ldr	r3, [pc, #52]	@ (8003858 <UART_SetConfig+0x2d4>)
 8003824:	fba3 1302 	umull	r1, r3, r3, r2
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	2164      	movs	r1, #100	@ 0x64
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	3332      	adds	r3, #50	@ 0x32
 8003836:	4a08      	ldr	r2, [pc, #32]	@ (8003858 <UART_SetConfig+0x2d4>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	f003 0207 	and.w	r2, r3, #7
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4422      	add	r2, r4
 800384a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800384c:	e106      	b.n	8003a5c <UART_SetConfig+0x4d8>
 800384e:	bf00      	nop
 8003850:	40011000 	.word	0x40011000
 8003854:	40011400 	.word	0x40011400
 8003858:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800385c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003860:	2200      	movs	r2, #0
 8003862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003866:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800386a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800386e:	4642      	mov	r2, r8
 8003870:	464b      	mov	r3, r9
 8003872:	1891      	adds	r1, r2, r2
 8003874:	6239      	str	r1, [r7, #32]
 8003876:	415b      	adcs	r3, r3
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
 800387a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800387e:	4641      	mov	r1, r8
 8003880:	1854      	adds	r4, r2, r1
 8003882:	4649      	mov	r1, r9
 8003884:	eb43 0501 	adc.w	r5, r3, r1
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	00eb      	lsls	r3, r5, #3
 8003892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003896:	00e2      	lsls	r2, r4, #3
 8003898:	4614      	mov	r4, r2
 800389a:	461d      	mov	r5, r3
 800389c:	4643      	mov	r3, r8
 800389e:	18e3      	adds	r3, r4, r3
 80038a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038a4:	464b      	mov	r3, r9
 80038a6:	eb45 0303 	adc.w	r3, r5, r3
 80038aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80038ca:	4629      	mov	r1, r5
 80038cc:	008b      	lsls	r3, r1, #2
 80038ce:	4621      	mov	r1, r4
 80038d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d4:	4621      	mov	r1, r4
 80038d6:	008a      	lsls	r2, r1, #2
 80038d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80038dc:	f7fc fc86 	bl	80001ec <__aeabi_uldivmod>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4b60      	ldr	r3, [pc, #384]	@ (8003a68 <UART_SetConfig+0x4e4>)
 80038e6:	fba3 2302 	umull	r2, r3, r3, r2
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	011c      	lsls	r4, r3, #4
 80038ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003900:	4642      	mov	r2, r8
 8003902:	464b      	mov	r3, r9
 8003904:	1891      	adds	r1, r2, r2
 8003906:	61b9      	str	r1, [r7, #24]
 8003908:	415b      	adcs	r3, r3
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003910:	4641      	mov	r1, r8
 8003912:	1851      	adds	r1, r2, r1
 8003914:	6139      	str	r1, [r7, #16]
 8003916:	4649      	mov	r1, r9
 8003918:	414b      	adcs	r3, r1
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003928:	4659      	mov	r1, fp
 800392a:	00cb      	lsls	r3, r1, #3
 800392c:	4651      	mov	r1, sl
 800392e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003932:	4651      	mov	r1, sl
 8003934:	00ca      	lsls	r2, r1, #3
 8003936:	4610      	mov	r0, r2
 8003938:	4619      	mov	r1, r3
 800393a:	4603      	mov	r3, r0
 800393c:	4642      	mov	r2, r8
 800393e:	189b      	adds	r3, r3, r2
 8003940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003944:	464b      	mov	r3, r9
 8003946:	460a      	mov	r2, r1
 8003948:	eb42 0303 	adc.w	r3, r2, r3
 800394c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	67bb      	str	r3, [r7, #120]	@ 0x78
 800395a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003968:	4649      	mov	r1, r9
 800396a:	008b      	lsls	r3, r1, #2
 800396c:	4641      	mov	r1, r8
 800396e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003972:	4641      	mov	r1, r8
 8003974:	008a      	lsls	r2, r1, #2
 8003976:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800397a:	f7fc fc37 	bl	80001ec <__aeabi_uldivmod>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4611      	mov	r1, r2
 8003984:	4b38      	ldr	r3, [pc, #224]	@ (8003a68 <UART_SetConfig+0x4e4>)
 8003986:	fba3 2301 	umull	r2, r3, r3, r1
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2264      	movs	r2, #100	@ 0x64
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	1acb      	subs	r3, r1, r3
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	3332      	adds	r3, #50	@ 0x32
 8003998:	4a33      	ldr	r2, [pc, #204]	@ (8003a68 <UART_SetConfig+0x4e4>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039a4:	441c      	add	r4, r3
 80039a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039aa:	2200      	movs	r2, #0
 80039ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80039ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80039b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80039b4:	4642      	mov	r2, r8
 80039b6:	464b      	mov	r3, r9
 80039b8:	1891      	adds	r1, r2, r2
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	415b      	adcs	r3, r3
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039c4:	4641      	mov	r1, r8
 80039c6:	1851      	adds	r1, r2, r1
 80039c8:	6039      	str	r1, [r7, #0]
 80039ca:	4649      	mov	r1, r9
 80039cc:	414b      	adcs	r3, r1
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039dc:	4659      	mov	r1, fp
 80039de:	00cb      	lsls	r3, r1, #3
 80039e0:	4651      	mov	r1, sl
 80039e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039e6:	4651      	mov	r1, sl
 80039e8:	00ca      	lsls	r2, r1, #3
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	4642      	mov	r2, r8
 80039f2:	189b      	adds	r3, r3, r2
 80039f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039f6:	464b      	mov	r3, r9
 80039f8:	460a      	mov	r2, r1
 80039fa:	eb42 0303 	adc.w	r3, r2, r3
 80039fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a18:	4649      	mov	r1, r9
 8003a1a:	008b      	lsls	r3, r1, #2
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a22:	4641      	mov	r1, r8
 8003a24:	008a      	lsls	r2, r1, #2
 8003a26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a2a:	f7fc fbdf 	bl	80001ec <__aeabi_uldivmod>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <UART_SetConfig+0x4e4>)
 8003a34:	fba3 1302 	umull	r1, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	2164      	movs	r1, #100	@ 0x64
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	3332      	adds	r3, #50	@ 0x32
 8003a46:	4a08      	ldr	r2, [pc, #32]	@ (8003a68 <UART_SetConfig+0x4e4>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	f003 020f 	and.w	r2, r3, #15
 8003a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4422      	add	r2, r4
 8003a5a:	609a      	str	r2, [r3, #8]
}
 8003a5c:	bf00      	nop
 8003a5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003a62:	46bd      	mov	sp, r7
 8003a64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a68:	51eb851f 	.word	0x51eb851f

08003a6c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	f107 001c 	add.w	r0, r7, #28
 8003a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003a82:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003a84:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003a86:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8003a8a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8003a8e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003a92:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8003a96:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8003aa6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	b004      	add	sp, #16
 8003ac0:	4770      	bx	lr

08003ac2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2203      	movs	r2, #3
 8003b0a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0303 	and.w	r3, r3, #3
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003b54:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003b5a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003b60:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003b70:	f023 030f 	bic.w	r3, r3, #15
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	b2db      	uxtb	r3, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3314      	adds	r3, #20
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
}  
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003bf0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003bf6:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003bfc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0

}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b088      	sub	sp, #32
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003c30:	2310      	movs	r3, #16
 8003c32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c34:	2340      	movs	r3, #64	@ 0x40
 8003c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c42:	f107 0308 	add.w	r3, r7, #8
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ff74 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c52:	2110      	movs	r1, #16
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f9d7 	bl	8004008 <SDMMC_GetCmdResp1>
 8003c5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b088      	sub	sp, #32
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003c74:	2311      	movs	r3, #17
 8003c76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c78:	2340      	movs	r3, #64	@ 0x40
 8003c7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff52 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c96:	2111      	movs	r1, #17
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f9b5 	bl	8004008 <SDMMC_GetCmdResp1>
 8003c9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b088      	sub	sp, #32
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003cb8:	2312      	movs	r3, #18
 8003cba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cbc:	2340      	movs	r3, #64	@ 0x40
 8003cbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cca:	f107 0308 	add.w	r3, r7, #8
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff30 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cda:	2112      	movs	r1, #18
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f993 	bl	8004008 <SDMMC_GetCmdResp1>
 8003ce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b088      	sub	sp, #32
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003cfc:	2318      	movs	r3, #24
 8003cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d00:	2340      	movs	r3, #64	@ 0x40
 8003d02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	4619      	mov	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff0e 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d1e:	2118      	movs	r1, #24
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f971 	bl	8004008 <SDMMC_GetCmdResp1>
 8003d26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d28:	69fb      	ldr	r3, [r7, #28]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3720      	adds	r7, #32
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b088      	sub	sp, #32
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003d40:	2319      	movs	r3, #25
 8003d42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d44:	2340      	movs	r3, #64	@ 0x40
 8003d46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	4619      	mov	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff feec 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d62:	2119      	movs	r1, #25
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f94f 	bl	8004008 <SDMMC_GetCmdResp1>
 8003d6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003d84:	230c      	movs	r3, #12
 8003d86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d88:	2340      	movs	r3, #64	@ 0x40
 8003d8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d96:	f107 0308 	add.w	r3, r7, #8
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff feca 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003da2:	4a05      	ldr	r2, [pc, #20]	@ (8003db8 <SDMMC_CmdStopTransfer+0x40>)
 8003da4:	210c      	movs	r1, #12
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f92e 	bl	8004008 <SDMMC_GetCmdResp1>
 8003dac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dae:	69fb      	ldr	r3, [r7, #28]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	05f5e100 	.word	0x05f5e100

08003dbc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	@ 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003dcc:	2307      	movs	r3, #7
 8003dce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dd0:	2340      	movs	r3, #64	@ 0x40
 8003dd2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ddc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dde:	f107 0310 	add.w	r3, r7, #16
 8003de2:	4619      	mov	r1, r3
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff fea6 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dee:	2107      	movs	r1, #7
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f909 	bl	8004008 <SDMMC_GetCmdResp1>
 8003df6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3728      	adds	r7, #40	@ 0x28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b088      	sub	sp, #32
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e20:	f107 0308 	add.w	r3, r7, #8
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff fe85 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fb23 	bl	8004478 <SDMMC_GetCmdError>
 8003e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e34:	69fb      	ldr	r3, [r7, #28]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b088      	sub	sp, #32
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003e46:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8003e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003e4c:	2308      	movs	r3, #8
 8003e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e50:	2340      	movs	r3, #64	@ 0x40
 8003e52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e5e:	f107 0308 	add.w	r3, r7, #8
 8003e62:	4619      	mov	r1, r3
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff fe66 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fab6 	bl	80043dc <SDMMC_GetCmdResp7>
 8003e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e72:	69fb      	ldr	r3, [r7, #28]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003e8a:	2337      	movs	r3, #55	@ 0x37
 8003e8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e8e:	2340      	movs	r3, #64	@ 0x40
 8003e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e9c:	f107 0308 	add.w	r3, r7, #8
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fe47 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eac:	2137      	movs	r1, #55	@ 0x37
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8aa 	bl	8004008 <SDMMC_GetCmdResp1>
 8003eb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ed0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003ed6:	2329      	movs	r3, #41	@ 0x29
 8003ed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003eda:	2340      	movs	r3, #64	@ 0x40
 8003edc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ee6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ee8:	f107 0308 	add.w	r3, r7, #8
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fe21 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f9bd 	bl	8004274 <SDMMC_GetCmdResp3>
 8003efa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003efc:	69fb      	ldr	r3, [r7, #28]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b088      	sub	sp, #32
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003f12:	2302      	movs	r3, #2
 8003f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f16:	23c0      	movs	r3, #192	@ 0xc0
 8003f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f24:	f107 0308 	add.w	r3, r7, #8
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff fe03 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f957 	bl	80041e4 <SDMMC_GetCmdResp2>
 8003f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f38:	69fb      	ldr	r3, [r7, #28]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b088      	sub	sp, #32
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003f50:	2309      	movs	r3, #9
 8003f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f54:	23c0      	movs	r3, #192	@ 0xc0
 8003f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f62:	f107 0308 	add.w	r3, r7, #8
 8003f66:	4619      	mov	r1, r3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff fde4 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f938 	bl	80041e4 <SDMMC_GetCmdResp2>
 8003f74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f76:	69fb      	ldr	r3, [r7, #28]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3720      	adds	r7, #32
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f92:	2340      	movs	r3, #64	@ 0x40
 8003f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fa0:	f107 0308 	add.w	r3, r7, #8
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fdc5 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	2103      	movs	r1, #3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f99d 	bl	80042f0 <SDMMC_GetCmdResp6>
 8003fb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b088      	sub	sp, #32
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003fd0:	230d      	movs	r3, #13
 8003fd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fd4:	2340      	movs	r3, #64	@ 0x40
 8003fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fe0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fe2:	f107 0308 	add.w	r3, r7, #8
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fda4 	bl	8003b36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff2:	210d      	movs	r1, #13
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f807 	bl	8004008 <SDMMC_GetCmdResp1>
 8003ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	460b      	mov	r3, r1
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004016:	4b70      	ldr	r3, [pc, #448]	@ (80041d8 <SDMMC_GetCmdResp1+0x1d0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a70      	ldr	r2, [pc, #448]	@ (80041dc <SDMMC_GetCmdResp1+0x1d4>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	0a5a      	lsrs	r2, r3, #9
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	fb02 f303 	mul.w	r3, r2, r3
 8004028:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	1e5a      	subs	r2, r3, #1
 800402e:	61fa      	str	r2, [r7, #28]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004034:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004038:	e0c9      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0ef      	beq.n	800402a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1ea      	bne.n	800402a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2204      	movs	r2, #4
 8004064:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004066:	2304      	movs	r3, #4
 8004068:	e0b1      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800407c:	2301      	movs	r3, #1
 800407e:	e0a6      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	22c5      	movs	r2, #197	@ 0xc5
 8004084:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f7ff fd7f 	bl	8003b8a <SDIO_GetCommandResponse>
 800408c:	4603      	mov	r3, r0
 800408e:	461a      	mov	r2, r3
 8004090:	7afb      	ldrb	r3, [r7, #11]
 8004092:	4293      	cmp	r3, r2
 8004094:	d001      	beq.n	800409a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004096:	2301      	movs	r3, #1
 8004098:	e099      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800409a:	2100      	movs	r1, #0
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff fd81 	bl	8003ba4 <SDIO_GetResponse>
 80040a2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4b4e      	ldr	r3, [pc, #312]	@ (80041e0 <SDMMC_GetCmdResp1+0x1d8>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e08d      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	da02      	bge.n	80040be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80040b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040bc:	e087      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80040c8:	2340      	movs	r3, #64	@ 0x40
 80040ca:	e080      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80040d6:	2380      	movs	r3, #128	@ 0x80
 80040d8:	e079      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80040e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040e8:	e071      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80040f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040f8:	e069      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004108:	e061      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004114:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004118:	e059      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004128:	e051      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004134:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004138:	e049      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004144:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004148:	e041      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004158:	e039      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004164:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004168:	e031      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004174:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004178:	e029      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004184:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004188:	e021      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004194:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004198:	e019      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80041a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80041a8:	e011      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80041b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80041b8:	e009      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80041c4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80041c8:	e001      	b.n	80041ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80041ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000000 	.word	0x20000000
 80041dc:	10624dd3 	.word	0x10624dd3
 80041e0:	fdffe008 	.word	0xfdffe008

080041e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041ec:	4b1f      	ldr	r3, [pc, #124]	@ (800426c <SDMMC_GetCmdResp2+0x88>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004270 <SDMMC_GetCmdResp2+0x8c>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	0a5b      	lsrs	r3, r3, #9
 80041f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fc:	fb02 f303 	mul.w	r3, r2, r3
 8004200:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1e5a      	subs	r2, r3, #1
 8004206:	60fa      	str	r2, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800420c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004210:	e026      	b.n	8004260 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004216:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0ef      	beq.n	8004202 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ea      	bne.n	8004202 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2204      	movs	r2, #4
 800423c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800423e:	2304      	movs	r3, #4
 8004240:	e00e      	b.n	8004260 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004254:	2301      	movs	r3, #1
 8004256:	e003      	b.n	8004260 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	22c5      	movs	r2, #197	@ 0xc5
 800425c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	20000000 	.word	0x20000000
 8004270:	10624dd3 	.word	0x10624dd3

08004274 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800427c:	4b1a      	ldr	r3, [pc, #104]	@ (80042e8 <SDMMC_GetCmdResp3+0x74>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1a      	ldr	r2, [pc, #104]	@ (80042ec <SDMMC_GetCmdResp3+0x78>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	0a5b      	lsrs	r3, r3, #9
 8004288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428c:	fb02 f303 	mul.w	r3, r2, r3
 8004290:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1e5a      	subs	r2, r3, #1
 8004296:	60fa      	str	r2, [r7, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800429c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80042a0:	e01b      	b.n	80042da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0ef      	beq.n	8004292 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1ea      	bne.n	8004292 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2204      	movs	r2, #4
 80042cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80042ce:	2304      	movs	r3, #4
 80042d0:	e003      	b.n	80042da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	22c5      	movs	r2, #197	@ 0xc5
 80042d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000000 	.word	0x20000000
 80042ec:	10624dd3 	.word	0x10624dd3

080042f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	460b      	mov	r3, r1
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042fe:	4b35      	ldr	r3, [pc, #212]	@ (80043d4 <SDMMC_GetCmdResp6+0xe4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a35      	ldr	r2, [pc, #212]	@ (80043d8 <SDMMC_GetCmdResp6+0xe8>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	0a5b      	lsrs	r3, r3, #9
 800430a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	1e5a      	subs	r2, r3, #1
 8004318:	61fa      	str	r2, [r7, #28]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800431e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004322:	e052      	b.n	80043ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004328:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ef      	beq.n	8004314 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ea      	bne.n	8004314 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2204      	movs	r2, #4
 800434e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004350:	2304      	movs	r3, #4
 8004352:	e03a      	b.n	80043ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d004      	beq.n	800436a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004366:	2301      	movs	r3, #1
 8004368:	e02f      	b.n	80043ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff fc0d 	bl	8003b8a <SDIO_GetCommandResponse>
 8004370:	4603      	mov	r3, r0
 8004372:	461a      	mov	r2, r3
 8004374:	7afb      	ldrb	r3, [r7, #11]
 8004376:	4293      	cmp	r3, r2
 8004378:	d001      	beq.n	800437e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800437a:	2301      	movs	r3, #1
 800437c:	e025      	b.n	80043ca <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	22c5      	movs	r2, #197	@ 0xc5
 8004382:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004384:	2100      	movs	r1, #0
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7ff fc0c 	bl	8003ba4 <SDIO_GetResponse>
 800438c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	0c1b      	lsrs	r3, r3, #16
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e011      	b.n	80043ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80043b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043b4:	e009      	b.n	80043ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80043c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043c4:	e001      	b.n	80043ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80043c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000000 	.word	0x20000000
 80043d8:	10624dd3 	.word	0x10624dd3

080043dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043e4:	4b22      	ldr	r3, [pc, #136]	@ (8004470 <SDMMC_GetCmdResp7+0x94>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a22      	ldr	r2, [pc, #136]	@ (8004474 <SDMMC_GetCmdResp7+0x98>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0a5b      	lsrs	r3, r3, #9
 80043f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f4:	fb02 f303 	mul.w	r3, r2, r3
 80043f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1e5a      	subs	r2, r3, #1
 80043fe:	60fa      	str	r2, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004404:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004408:	e02c      	b.n	8004464 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0ef      	beq.n	80043fa <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ea      	bne.n	80043fa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d004      	beq.n	800443a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2204      	movs	r2, #4
 8004434:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004436:	2304      	movs	r3, #4
 8004438:	e014      	b.n	8004464 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d004      	beq.n	8004450 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800444c:	2301      	movs	r3, #1
 800444e:	e009      	b.n	8004464 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2240      	movs	r2, #64	@ 0x40
 8004460:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004462:	2300      	movs	r3, #0
  
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	20000000 	.word	0x20000000
 8004474:	10624dd3 	.word	0x10624dd3

08004478 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004480:	4b11      	ldr	r3, [pc, #68]	@ (80044c8 <SDMMC_GetCmdError+0x50>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a11      	ldr	r2, [pc, #68]	@ (80044cc <SDMMC_GetCmdError+0x54>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	0a5b      	lsrs	r3, r3, #9
 800448c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004490:	fb02 f303 	mul.w	r3, r2, r3
 8004494:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1e5a      	subs	r2, r3, #1
 800449a:	60fa      	str	r2, [r7, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d102      	bne.n	80044a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80044a4:	e009      	b.n	80044ba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f1      	beq.n	8004496 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	22c5      	movs	r2, #197	@ 0xc5
 80044b6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	20000000 	.word	0x20000000
 80044cc:	10624dd3 	.word	0x10624dd3

080044d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044d0:	b084      	sub	sp, #16
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	f107 001c 	add.w	r0, r7, #28
 80044de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d123      	bne.n	8004532 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80044fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004512:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004516:	2b01      	cmp	r3, #1
 8004518:	d105      	bne.n	8004526 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 faa0 	bl	8004a6c <USB_CoreReset>
 800452c:	4603      	mov	r3, r0
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	e01b      	b.n	800456a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fa94 	bl	8004a6c <USB_CoreReset>
 8004544:	4603      	mov	r3, r0
 8004546:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004548:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800454c:	2b00      	cmp	r3, #0
 800454e:	d106      	bne.n	800455e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004554:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	639a      	str	r2, [r3, #56]	@ 0x38
 800455c:	e005      	b.n	800456a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004562:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800456a:	7fbb      	ldrb	r3, [r7, #30]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10b      	bne.n	8004588 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f043 0206 	orr.w	r2, r3, #6
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004594:	b004      	add	sp, #16
 8004596:	4770      	bx	lr

08004598 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f023 0201 	bic.w	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	460b      	mov	r3, r1
 80045c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d115      	bne.n	8004608 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045e8:	200a      	movs	r0, #10
 80045ea:	f7fc fc45 	bl	8000e78 <HAL_Delay>
      ms += 10U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	330a      	adds	r3, #10
 80045f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fa2b 	bl	8004a50 <USB_GetMode>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d01e      	beq.n	800463e <USB_SetCurrentMode+0x84>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2bc7      	cmp	r3, #199	@ 0xc7
 8004604:	d9f0      	bls.n	80045e8 <USB_SetCurrentMode+0x2e>
 8004606:	e01a      	b.n	800463e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d115      	bne.n	800463a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800461a:	200a      	movs	r0, #10
 800461c:	f7fc fc2c 	bl	8000e78 <HAL_Delay>
      ms += 10U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	330a      	adds	r3, #10
 8004624:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fa12 	bl	8004a50 <USB_GetMode>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <USB_SetCurrentMode+0x84>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2bc7      	cmp	r3, #199	@ 0xc7
 8004636:	d9f0      	bls.n	800461a <USB_SetCurrentMode+0x60>
 8004638:	e001      	b.n	800463e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e005      	b.n	800464a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2bc8      	cmp	r3, #200	@ 0xc8
 8004642:	d101      	bne.n	8004648 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004654:	b084      	sub	sp, #16
 8004656:	b580      	push	{r7, lr}
 8004658:	b086      	sub	sp, #24
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	e009      	b.n	8004688 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	3340      	adds	r3, #64	@ 0x40
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	2200      	movs	r2, #0
 8004680:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	3301      	adds	r3, #1
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b0e      	cmp	r3, #14
 800468c:	d9f2      	bls.n	8004674 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800468e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004692:	2b00      	cmp	r3, #0
 8004694:	d11c      	bne.n	80046d0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046a4:	f043 0302 	orr.w	r3, r3, #2
 80046a8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80046ce:	e00b      	b.n	80046e8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80046ee:	461a      	mov	r2, r3
 80046f0:	2300      	movs	r3, #0
 80046f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d10d      	bne.n	8004718 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004704:	2100      	movs	r1, #0
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f968 	bl	80049dc <USB_SetDevSpeed>
 800470c:	e008      	b.n	8004720 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800470e:	2101      	movs	r1, #1
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f963 	bl	80049dc <USB_SetDevSpeed>
 8004716:	e003      	b.n	8004720 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004718:	2103      	movs	r1, #3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f95e 	bl	80049dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004720:	2110      	movs	r1, #16
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f8fa 	bl	800491c <USB_FlushTxFifo>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f924 	bl	8004980 <USB_FlushRxFifo>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004748:	461a      	mov	r2, r3
 800474a:	2300      	movs	r3, #0
 800474c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004754:	461a      	mov	r2, r3
 8004756:	2300      	movs	r3, #0
 8004758:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004760:	461a      	mov	r2, r3
 8004762:	2300      	movs	r3, #0
 8004764:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	e043      	b.n	80047f4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800477e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004782:	d118      	bne.n	80047b6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004796:	461a      	mov	r2, r3
 8004798:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e013      	b.n	80047c8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ac:	461a      	mov	r2, r3
 80047ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	e008      	b.n	80047c8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c2:	461a      	mov	r2, r3
 80047c4:	2300      	movs	r3, #0
 80047c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d4:	461a      	mov	r2, r3
 80047d6:	2300      	movs	r3, #0
 80047d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e6:	461a      	mov	r2, r3
 80047e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	3301      	adds	r3, #1
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047f8:	461a      	mov	r2, r3
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d3b5      	bcc.n	800476c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	e043      	b.n	800488e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800481c:	d118      	bne.n	8004850 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10a      	bne.n	800483a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004830:	461a      	mov	r2, r3
 8004832:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	e013      	b.n	8004862 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004846:	461a      	mov	r2, r3
 8004848:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e008      	b.n	8004862 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485c:	461a      	mov	r2, r3
 800485e:	2300      	movs	r3, #0
 8004860:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800486e:	461a      	mov	r2, r3
 8004870:	2300      	movs	r3, #0
 8004872:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004880:	461a      	mov	r2, r3
 8004882:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004886:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3301      	adds	r3, #1
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004892:	461a      	mov	r2, r3
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4293      	cmp	r3, r2
 8004898:	d3b5      	bcc.n	8004806 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80048ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d105      	bne.n	80048d0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f043 0210 	orr.w	r2, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	4b10      	ldr	r3, [pc, #64]	@ (8004918 <USB_DevInit+0x2c4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f043 0208 	orr.w	r2, r3, #8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004900:	f043 0304 	orr.w	r3, r3, #4
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004908:	7dfb      	ldrb	r3, [r7, #23]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004914:	b004      	add	sp, #16
 8004916:	4770      	bx	lr
 8004918:	803c3800 	.word	0x803c3800

0800491c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3301      	adds	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004936:	d901      	bls.n	800493c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e01b      	b.n	8004974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	daf2      	bge.n	800492a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	019b      	lsls	r3, r3, #6
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3301      	adds	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004960:	d901      	bls.n	8004966 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e006      	b.n	8004974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b20      	cmp	r3, #32
 8004970:	d0f0      	beq.n	8004954 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3301      	adds	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004998:	d901      	bls.n	800499e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e018      	b.n	80049d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	daf2      	bge.n	800498c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2210      	movs	r2, #16
 80049ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049bc:	d901      	bls.n	80049c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e006      	b.n	80049d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	2b10      	cmp	r3, #16
 80049cc:	d0f0      	beq.n	80049b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049fc:	4313      	orrs	r3, r2
 80049fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a28:	f023 0303 	bic.w	r3, r3, #3
 8004a2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a3c:	f043 0302 	orr.w	r3, r3, #2
 8004a40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a84:	d901      	bls.n	8004a8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e01b      	b.n	8004ac2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	daf2      	bge.n	8004a78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f043 0201 	orr.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004aae:	d901      	bls.n	8004ab4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e006      	b.n	8004ac2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d0f0      	beq.n	8004aa2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004ad4:	4904      	ldr	r1, [pc, #16]	@ (8004ae8 <MX_FATFS_Init+0x18>)
 8004ad6:	4805      	ldr	r0, [pc, #20]	@ (8004aec <MX_FATFS_Init+0x1c>)
 8004ad8:	f000 f9bc 	bl	8004e54 <FATFS_LinkDriver>
 8004adc:	4603      	mov	r3, r0
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4b03      	ldr	r3, [pc, #12]	@ (8004af0 <MX_FATFS_Init+0x20>)
 8004ae2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ae4:	bf00      	nop
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000810 	.word	0x20000810
 8004aec:	08004efc 	.word	0x08004efc
 8004af0:	2000080c 	.word	0x2000080c

08004af4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004afe:	f000 f86b 	bl	8004bd8 <BSP_SD_IsDetected>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d001      	beq.n	8004b0c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e005      	b.n	8004b18 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004b0c:	4804      	ldr	r0, [pc, #16]	@ (8004b20 <BSP_SD_Init+0x2c>)
 8004b0e:	f7fd fd51 	bl	80025b4 <HAL_SD_Init>
 8004b12:	4603      	mov	r3, r0
 8004b14:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8004b16:	79fb      	ldrb	r3, [r7, #7]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000258 	.word	0x20000258

08004b24 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	68f9      	ldr	r1, [r7, #12]
 8004b40:	4806      	ldr	r0, [pc, #24]	@ (8004b5c <BSP_SD_ReadBlocks+0x38>)
 8004b42:	f7fd fde7 	bl	8002714 <HAL_SD_ReadBlocks>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000258 	.word	0x20000258

08004b60 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	4806      	ldr	r0, [pc, #24]	@ (8004b98 <BSP_SD_WriteBlocks+0x38>)
 8004b7e:	f7fd ffaf 	bl	8002ae0 <HAL_SD_WriteBlocks>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000258 	.word	0x20000258

08004b9c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004ba0:	4805      	ldr	r0, [pc, #20]	@ (8004bb8 <BSP_SD_GetCardState+0x1c>)
 8004ba2:	f7fe fafb 	bl	800319c <HAL_SD_GetCardState>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	bf14      	ite	ne
 8004bac:	2301      	movne	r3, #1
 8004bae:	2300      	moveq	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000258 	.word	0x20000258

08004bbc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	4803      	ldr	r0, [pc, #12]	@ (8004bd4 <BSP_SD_GetCardInfo+0x18>)
 8004bc8:	f7fe fabc 	bl	8003144 <HAL_SD_GetCardInfo>
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000258 	.word	0x20000258

08004bd8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004bde:	2301      	movs	r3, #1
 8004be0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	b2db      	uxtb	r3, r3
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <SD_CheckStatus+0x38>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004c04:	f7ff ffca 	bl	8004b9c <BSP_SD_GetCardState>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d107      	bne.n	8004c1e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004c0e:	4b07      	ldr	r3, [pc, #28]	@ (8004c2c <SD_CheckStatus+0x38>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	4b04      	ldr	r3, [pc, #16]	@ (8004c2c <SD_CheckStatus+0x38>)
 8004c1c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004c1e:	4b03      	ldr	r3, [pc, #12]	@ (8004c2c <SD_CheckStatus+0x38>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b2db      	uxtb	r3, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000009 	.word	0x20000009

08004c30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <SD_initialize+0x38>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004c40:	f7ff ff58 	bl	8004af4 <BSP_SD_Init>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d107      	bne.n	8004c5a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff ffd1 	bl	8004bf4 <SD_CheckStatus>
 8004c52:	4603      	mov	r3, r0
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b04      	ldr	r3, [pc, #16]	@ (8004c68 <SD_initialize+0x38>)
 8004c58:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004c5a:	4b03      	ldr	r3, [pc, #12]	@ (8004c68 <SD_initialize+0x38>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	b2db      	uxtb	r3, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20000009 	.word	0x20000009

08004c6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff ffbb 	bl	8004bf4 <SD_CheckStatus>
 8004c7e:	4603      	mov	r3, r0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004c9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	68b8      	ldr	r0, [r7, #8]
 8004ca6:	f7ff ff3d 	bl	8004b24 <BSP_SD_ReadBlocks>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d107      	bne.n	8004cc0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004cb0:	bf00      	nop
 8004cb2:	f7ff ff73 	bl	8004b9c <BSP_SD_GetCardState>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1fa      	bne.n	8004cb2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b086      	sub	sp, #24
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	68b8      	ldr	r0, [r7, #8]
 8004ce8:	f7ff ff3a 	bl	8004b60 <BSP_SD_WriteBlocks>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d107      	bne.n	8004d02 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8004cf2:	bf00      	nop
 8004cf4:	f7ff ff52 	bl	8004b9c <BSP_SD_GetCardState>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1fa      	bne.n	8004cf4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08c      	sub	sp, #48	@ 0x30
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	603a      	str	r2, [r7, #0]
 8004d16:	71fb      	strb	r3, [r7, #7]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004d22:	4b25      	ldr	r3, [pc, #148]	@ (8004db8 <SD_ioctl+0xac>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <SD_ioctl+0x28>
 8004d30:	2303      	movs	r3, #3
 8004d32:	e03c      	b.n	8004dae <SD_ioctl+0xa2>

  switch (cmd)
 8004d34:	79bb      	ldrb	r3, [r7, #6]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d834      	bhi.n	8004da4 <SD_ioctl+0x98>
 8004d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d40 <SD_ioctl+0x34>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d51 	.word	0x08004d51
 8004d44:	08004d59 	.word	0x08004d59
 8004d48:	08004d71 	.word	0x08004d71
 8004d4c:	08004d8b 	.word	0x08004d8b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004d56:	e028      	b.n	8004daa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004d58:	f107 030c 	add.w	r3, r7, #12
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff ff2d 	bl	8004bbc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004d6e:	e01c      	b.n	8004daa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004d70:	f107 030c 	add.w	r3, r7, #12
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff ff21 	bl	8004bbc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004d88:	e00f      	b.n	8004daa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004d8a:	f107 030c 	add.w	r3, r7, #12
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff ff14 	bl	8004bbc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	0a5a      	lsrs	r2, r3, #9
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004da2:	e002      	b.n	8004daa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004da4:	2304      	movs	r3, #4
 8004da6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8004daa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3730      	adds	r7, #48	@ 0x30
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000009 	.word	0x20000009

08004dbc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e50 <FATFS_LinkDriverEx+0x94>)
 8004dd4:	7a5b      	ldrb	r3, [r3, #9]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d131      	bne.n	8004e40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8004e50 <FATFS_LinkDriverEx+0x94>)
 8004dde:	7a5b      	ldrb	r3, [r3, #9]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e50 <FATFS_LinkDriverEx+0x94>)
 8004de6:	2100      	movs	r1, #0
 8004de8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004dea:	4b19      	ldr	r3, [pc, #100]	@ (8004e50 <FATFS_LinkDriverEx+0x94>)
 8004dec:	7a5b      	ldrb	r3, [r3, #9]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	4a17      	ldr	r2, [pc, #92]	@ (8004e50 <FATFS_LinkDriverEx+0x94>)
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004dfa:	4b15      	ldr	r3, [pc, #84]	@ (8004e50 <FATFS_LinkDriverEx+0x94>)
 8004dfc:	7a5b      	ldrb	r3, [r3, #9]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	4b13      	ldr	r3, [pc, #76]	@ (8004e50 <FATFS_LinkDriverEx+0x94>)
 8004e04:	4413      	add	r3, r2
 8004e06:	79fa      	ldrb	r2, [r7, #7]
 8004e08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004e0a:	4b11      	ldr	r3, [pc, #68]	@ (8004e50 <FATFS_LinkDriverEx+0x94>)
 8004e0c:	7a5b      	ldrb	r3, [r3, #9]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	b2d1      	uxtb	r1, r2
 8004e14:	4a0e      	ldr	r2, [pc, #56]	@ (8004e50 <FATFS_LinkDriverEx+0x94>)
 8004e16:	7251      	strb	r1, [r2, #9]
 8004e18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004e1a:	7dbb      	ldrb	r3, [r7, #22]
 8004e1c:	3330      	adds	r3, #48	@ 0x30
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	3301      	adds	r3, #1
 8004e28:	223a      	movs	r2, #58	@ 0x3a
 8004e2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	3302      	adds	r3, #2
 8004e30:	222f      	movs	r2, #47	@ 0x2f
 8004e32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	3303      	adds	r3, #3
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000814 	.word	0x20000814

08004e54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004e5e:	2200      	movs	r2, #0
 8004e60:	6839      	ldr	r1, [r7, #0]
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff ffaa 	bl	8004dbc <FATFS_LinkDriverEx>
 8004e68:	4603      	mov	r3, r0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <memset>:
 8004e72:	4402      	add	r2, r0
 8004e74:	4603      	mov	r3, r0
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d100      	bne.n	8004e7c <memset+0xa>
 8004e7a:	4770      	bx	lr
 8004e7c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e80:	e7f9      	b.n	8004e76 <memset+0x4>
	...

08004e84 <__libc_init_array>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4d0d      	ldr	r5, [pc, #52]	@ (8004ebc <__libc_init_array+0x38>)
 8004e88:	4c0d      	ldr	r4, [pc, #52]	@ (8004ec0 <__libc_init_array+0x3c>)
 8004e8a:	1b64      	subs	r4, r4, r5
 8004e8c:	10a4      	asrs	r4, r4, #2
 8004e8e:	2600      	movs	r6, #0
 8004e90:	42a6      	cmp	r6, r4
 8004e92:	d109      	bne.n	8004ea8 <__libc_init_array+0x24>
 8004e94:	4d0b      	ldr	r5, [pc, #44]	@ (8004ec4 <__libc_init_array+0x40>)
 8004e96:	4c0c      	ldr	r4, [pc, #48]	@ (8004ec8 <__libc_init_array+0x44>)
 8004e98:	f000 f818 	bl	8004ecc <_init>
 8004e9c:	1b64      	subs	r4, r4, r5
 8004e9e:	10a4      	asrs	r4, r4, #2
 8004ea0:	2600      	movs	r6, #0
 8004ea2:	42a6      	cmp	r6, r4
 8004ea4:	d105      	bne.n	8004eb2 <__libc_init_array+0x2e>
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eac:	4798      	blx	r3
 8004eae:	3601      	adds	r6, #1
 8004eb0:	e7ee      	b.n	8004e90 <__libc_init_array+0xc>
 8004eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb6:	4798      	blx	r3
 8004eb8:	3601      	adds	r6, #1
 8004eba:	e7f2      	b.n	8004ea2 <__libc_init_array+0x1e>
 8004ebc:	08004f18 	.word	0x08004f18
 8004ec0:	08004f18 	.word	0x08004f18
 8004ec4:	08004f18 	.word	0x08004f18
 8004ec8:	08004f1c 	.word	0x08004f1c

08004ecc <_init>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	bf00      	nop
 8004ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed2:	bc08      	pop	{r3}
 8004ed4:	469e      	mov	lr, r3
 8004ed6:	4770      	bx	lr

08004ed8 <_fini>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	bf00      	nop
 8004edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ede:	bc08      	pop	{r3}
 8004ee0:	469e      	mov	lr, r3
 8004ee2:	4770      	bx	lr
