
TP Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007da0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  08007f50  08007f50  00008f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085e8  080085e8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080085e8  080085e8  000095e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085f0  080085f0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f0  080085f0  000095f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085f4  080085f4  000095f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080085f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          00001000  200001d8  200001d8  0000a1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200011d8  200011d8  0000a1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d5ff  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026dc  00000000  00000000  00017803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  00019ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b0  00000000  00000000  0001ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000519a  00000000  00000000  0001b530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014755  00000000  00000000  000206ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebe26  00000000  00000000  00034e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120c45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045ac  00000000  00000000  00120c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00125234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007f38 	.word	0x08007f38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	08007f38 	.word	0x08007f38

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c40:	f000 b9a0 	b.w	8000f84 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff49 	bl	8000afc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcbf 	bl	8000618 <__aeabi_dmul>
 8000c9a:	f7ff ff57 	bl	8000b4c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc40 	bl	8000524 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fcb6 	bl	8000618 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf8 	bl	80002a8 <__aeabi_dsub>
 8000cb8:	f7ff ff48 	bl	8000b4c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <delayInit>:
 * It also resets the running state and start time.
 *
 * @param delay Pointer to the delay structure to initialize.
 * @param duration Duration of the delay in ticks.
 */
void delayInit(delay_t* delay, tick_t duration){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]

    if(delay == NULL){
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <delayInit+0x14>
        Error_Handler();
 8000f98:	f003 fdeb 	bl	8004b72 <Error_Handler>
    }

    delay->running = false;      /**< Indicates whether the delay is currently running. */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	721a      	strb	r2, [r3, #8]
    delay->startTime = 0;        /**< The start time of the delay in ticks. */
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
    delay->duration = duration;  /**< The duration of the delay in ticks. */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	605a      	str	r2, [r3, #4]
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <delayRead>:
 * duration and return true if it has.
 *
 * @param delay Pointer to the delay structure.
 * @return True if the delay has elapsed, false otherwise.
 */
bool_t delayRead(delay_t* delay){
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]

    if(delay == NULL){
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <delayRead+0x12>
        Error_Handler();
 8000fc4:	f003 fdd5 	bl	8004b72 <Error_Handler>
    }

    if (delay->running == false){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7a1b      	ldrb	r3, [r3, #8]
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d009      	beq.n	8000fea <delayRead+0x34>
        delay->startTime = HAL_GetTick();
 8000fd6:	f001 fadb 	bl	8002590 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	601a      	str	r2, [r3, #0]
        delay->running = true;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	721a      	strb	r2, [r3, #8]
        return false;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e00f      	b.n	800100a <delayRead+0x54>
    }

    if ((HAL_GetTick() - delay->startTime) >= delay->duration){
 8000fea:	f001 fad1 	bl	8002590 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	1ad2      	subs	r2, r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d304      	bcc.n	8001008 <delayRead+0x52>
        delay->running = false;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	721a      	strb	r2, [r3, #8]
        return true;
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <delayRead+0x54>
    }

    return false;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <Parse_NMEA_Sentence>:
 * in the NMEA data structure based on the sentence type.
 *
 * @param nmea Pointer to the NMEA sentence string.
 * @return True if the parsing was successful, false otherwise.
 */
bool_t Parse_NMEA_Sentence(const char* nmea) {
 8001014:	b580      	push	{r7, lr}
 8001016:	f5ad 4dda 	sub.w	sp, sp, #27904	@ 0x6d00
 800101a:	b09c      	sub	sp, #112	@ 0x70
 800101c:	af00      	add	r7, sp, #0
 800101e:	f507 6357 	add.w	r3, r7, #3440	@ 0xd70
 8001022:	f6a3 536c 	subw	r3, r3, #3436	@ 0xd6c
 8001026:	6018      	str	r0, [r3, #0]
    bool_t rtrn = true;
 8001028:	2301      	movs	r3, #1
 800102a:	f507 42da 	add.w	r2, r7, #27904	@ 0x6d00
 800102e:	f102 026f 	add.w	r2, r2, #111	@ 0x6f
 8001032:	7013      	strb	r3, [r2, #0]
    char fields[MAX_FIELDS][MAX_FIELDS_LENGTH];
    int fieldCount = 0;
 8001034:	f507 6357 	add.w	r3, r7, #3440	@ 0xd70
 8001038:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
    String_Split(nmea, ',', fields, &fieldCount);
 8001040:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001044:	3b68      	subs	r3, #104	@ 0x68
 8001046:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800104a:	3a64      	subs	r2, #100	@ 0x64
 800104c:	f507 6157 	add.w	r1, r7, #3440	@ 0xd70
 8001050:	f6a1 506c 	subw	r0, r1, #3436	@ 0xd6c
 8001054:	212c      	movs	r1, #44	@ 0x2c
 8001056:	6800      	ldr	r0, [r0, #0]
 8001058:	f003 fddc 	bl	8004c14 <String_Split>

    if (fieldCount < 1) {
 800105c:	f507 6357 	add.w	r3, r7, #3440	@ 0xd70
 8001060:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	dc05      	bgt.n	8001076 <Parse_NMEA_Sentence+0x62>
        rtrn = false;
 800106a:	2300      	movs	r3, #0
 800106c:	f507 42da 	add.w	r2, r7, #27904	@ 0x6d00
 8001070:	f102 026f 	add.w	r2, r2, #111	@ 0x6f
 8001074:	7013      	strb	r3, [r2, #0]
    } // Not enough fields
    strncpy(nmeaData.sentenceType, fields[0], sizeof(nmeaData.sentenceType) - 1);
 8001076:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800107a:	3b64      	subs	r3, #100	@ 0x64
 800107c:	2206      	movs	r2, #6
 800107e:	4619      	mov	r1, r3
 8001080:	48cf      	ldr	r0, [pc, #828]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 8001082:	f004 fed6 	bl	8005e32 <strncpy>

    if (String_Compare(nmeaData.sentenceType, "$GPGSA") == 1) {
 8001086:	49cf      	ldr	r1, [pc, #828]	@ (80013c4 <Parse_NMEA_Sentence+0x3b0>)
 8001088:	48cd      	ldr	r0, [pc, #820]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 800108a:	f003 fd76 	bl	8004b7a <String_Compare>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d048      	beq.n	8001126 <Parse_NMEA_Sentence+0x112>
        nmeaData.mode = fields[GPGSA_MODE][0];                                    // Mode (e.g., 'A' for automatic, 'M' for manual)
 8001094:	f507 6357 	add.w	r3, r7, #3440	@ 0xd70
 8001098:	f6a3 5364 	subw	r3, r3, #3428	@ 0xd64
 800109c:	f893 215e 	ldrb.w	r2, [r3, #350]	@ 0x15e
 80010a0:	4bc7      	ldr	r3, [pc, #796]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 80010a2:	71da      	strb	r2, [r3, #7]
        nmeaData.fixType = atoi(fields[GPGSA_FIX_TYPE]);                          // Fix type (1 = no fix, 2 = 2D fix, 3 = 3D fix)
 80010a4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010a8:	3b64      	subs	r3, #100	@ 0x64
 80010aa:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 fe8c 	bl	8004dcc <atoi>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4ac2      	ldr	r2, [pc, #776]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 80010b8:	6093      	str	r3, [r2, #8]
        nmeaData.pdop = atof(fields[GPGSA_PDOP]);                                 // Position dilution of precision
 80010ba:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010be:	3b64      	subs	r3, #100	@ 0x64
 80010c0:	f503 53a4 	add.w	r3, r3, #5248	@ 0x1480
 80010c4:	3302      	adds	r3, #2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 fe7d 	bl	8004dc6 <atof>
 80010cc:	ec53 2b10 	vmov	r2, r3, d0
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fd5a 	bl	8000b8c <__aeabi_d2f>
 80010d8:	4603      	mov	r3, r0
 80010da:	4ab9      	ldr	r2, [pc, #740]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 80010dc:	60d3      	str	r3, [r2, #12]
        nmeaData.hdop = atof(fields[GPGSA_HDOP]);                                 // Horizontal dilution of precision
 80010de:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010e2:	3b64      	subs	r3, #100	@ 0x64
 80010e4:	f503 53af 	add.w	r3, r3, #5600	@ 0x15e0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 fe6c 	bl	8004dc6 <atof>
 80010ee:	ec53 2b10 	vmov	r2, r3, d0
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fd49 	bl	8000b8c <__aeabi_d2f>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4ab0      	ldr	r2, [pc, #704]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 80010fe:	6113      	str	r3, [r2, #16]
        nmeaData.vdop = atof(fields[GPGSA_VDOP]);                                 // Vertical dilution of precision
 8001100:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001104:	3b64      	subs	r3, #100	@ 0x64
 8001106:	f503 53b9 	add.w	r3, r3, #5920	@ 0x1720
 800110a:	331e      	adds	r3, #30
 800110c:	4618      	mov	r0, r3
 800110e:	f003 fe5a 	bl	8004dc6 <atof>
 8001112:	ec53 2b10 	vmov	r2, r3, d0
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd37 	bl	8000b8c <__aeabi_d2f>
 800111e:	4603      	mov	r3, r0
 8001120:	4aa7      	ldr	r2, [pc, #668]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 8001122:	6153      	str	r3, [r2, #20]
 8001124:	e140      	b.n	80013a8 <Parse_NMEA_Sentence+0x394>

    } else if (String_Compare(nmeaData.sentenceType, "$GPGSV") == 1) {
 8001126:	49a8      	ldr	r1, [pc, #672]	@ (80013c8 <Parse_NMEA_Sentence+0x3b4>)
 8001128:	48a5      	ldr	r0, [pc, #660]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 800112a:	f003 fd26 	bl	8004b7a <String_Compare>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d021      	beq.n	8001178 <Parse_NMEA_Sentence+0x164>
        nmeaData.numOfMessages = atoi(fields[GPGSV_NUM_MESSAGES]);                // Total number of GSV messages to be transmitted
 8001134:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001138:	3b64      	subs	r3, #100	@ 0x64
 800113a:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fe44 	bl	8004dcc <atoi>
 8001144:	4603      	mov	r3, r0
 8001146:	4a9e      	ldr	r2, [pc, #632]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 8001148:	6193      	str	r3, [r2, #24]
        nmeaData.messageNumber = atoi(fields[GPGSV_MESSAGE_NUMBER]);              // Message number
 800114a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800114e:	3b64      	subs	r3, #100	@ 0x64
 8001150:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fe39 	bl	8004dcc <atoi>
 800115a:	4603      	mov	r3, r0
 800115c:	4a98      	ldr	r2, [pc, #608]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 800115e:	61d3      	str	r3, [r2, #28]
        nmeaData.satellitesInView = atoi(fields[GPGSV_SATELLITES_IN_VIEW]);       // Total number of satellites in view
 8001160:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001164:	3b64      	subs	r3, #100	@ 0x64
 8001166:	f203 431a 	addw	r3, r3, #1050	@ 0x41a
 800116a:	4618      	mov	r0, r3
 800116c:	f003 fe2e 	bl	8004dcc <atoi>
 8001170:	4603      	mov	r3, r0
 8001172:	4a93      	ldr	r2, [pc, #588]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 8001174:	6213      	str	r3, [r2, #32]
 8001176:	e117      	b.n	80013a8 <Parse_NMEA_Sentence+0x394>

    } else if (String_Compare(nmeaData.sentenceType, "$GPRMC") == 1) {
 8001178:	4994      	ldr	r1, [pc, #592]	@ (80013cc <Parse_NMEA_Sentence+0x3b8>)
 800117a:	4891      	ldr	r0, [pc, #580]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 800117c:	f003 fcfd 	bl	8004b7a <String_Compare>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d059      	beq.n	800123a <Parse_NMEA_Sentence+0x226>
        strncpy(nmeaData.time, fields[GPRMC_TIME], sizeof(nmeaData.time) - 1);    // UTC time in hhmmss.ss format
 8001186:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800118a:	3b64      	subs	r3, #100	@ 0x64
 800118c:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 8001190:	220a      	movs	r2, #10
 8001192:	4619      	mov	r1, r3
 8001194:	488e      	ldr	r0, [pc, #568]	@ (80013d0 <Parse_NMEA_Sentence+0x3bc>)
 8001196:	f004 fe4c 	bl	8005e32 <strncpy>
        nmeaData.status = fields[GPRMC_STATUS][0];                                // Status (A = active, V = void)
 800119a:	f507 6357 	add.w	r3, r7, #3440	@ 0xd70
 800119e:	f6a3 5364 	subw	r3, r3, #3428	@ 0xd64
 80011a2:	f893 22bc 	ldrb.w	r2, [r3, #700]	@ 0x2bc
 80011a6:	4b86      	ldr	r3, [pc, #536]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 80011a8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        nmeaData.latitude = atof(fields[GPRMC_LATITUDE]);                         // Latitude in ddmm.mmmm format
 80011ac:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80011b0:	3b64      	subs	r3, #100	@ 0x64
 80011b2:	f203 431a 	addw	r3, r3, #1050	@ 0x41a
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 fe05 	bl	8004dc6 <atof>
 80011bc:	eeb0 7a40 	vmov.f32	s14, s0
 80011c0:	eef0 7a60 	vmov.f32	s15, s1
 80011c4:	4b7e      	ldr	r3, [pc, #504]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 80011c6:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        nmeaData.longitude = atof(fields[GPRMC_LONGITUDE]);                       // Longitude in dddmm.mmmm format
 80011ca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80011ce:	3b64      	subs	r3, #100	@ 0x64
 80011d0:	f203 63d6 	addw	r3, r3, #1750	@ 0x6d6
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fdf6 	bl	8004dc6 <atof>
 80011da:	eeb0 7a40 	vmov.f32	s14, s0
 80011de:	eef0 7a60 	vmov.f32	s15, s1
 80011e2:	4b77      	ldr	r3, [pc, #476]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 80011e4:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        nmeaData.speed = atof(fields[GPRMC_SPEED]);                               // Speed over ground in knots
 80011e8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80011ec:	3b64      	subs	r3, #100	@ 0x64
 80011ee:	f603 1392 	addw	r3, r3, #2450	@ 0x992
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fde7 	bl	8004dc6 <atof>
 80011f8:	eeb0 7a40 	vmov.f32	s14, s0
 80011fc:	eef0 7a60 	vmov.f32	s15, s1
 8001200:	4b6f      	ldr	r3, [pc, #444]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 8001202:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
        nmeaData.trackAngle = atof(fields[GPRMC_TRACK_ANGLE]);                    // Track angle in degrees True
 8001206:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800120a:	3b64      	subs	r3, #100	@ 0x64
 800120c:	f503 632f 	add.w	r3, r3, #2800	@ 0xaf0
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fdd8 	bl	8004dc6 <atof>
 8001216:	eeb0 7a40 	vmov.f32	s14, s0
 800121a:	eef0 7a60 	vmov.f32	s15, s1
 800121e:	4b68      	ldr	r3, [pc, #416]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 8001220:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
        strncpy(nmeaData.date, fields[GPRMC_DATE], sizeof(nmeaData.date) - 1);    // Date in ddmmyy format
 8001224:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001228:	3b64      	subs	r3, #100	@ 0x64
 800122a:	f603 434e 	addw	r3, r3, #3150	@ 0xc4e
 800122e:	2206      	movs	r2, #6
 8001230:	4619      	mov	r1, r3
 8001232:	4868      	ldr	r0, [pc, #416]	@ (80013d4 <Parse_NMEA_Sentence+0x3c0>)
 8001234:	f004 fdfd 	bl	8005e32 <strncpy>
 8001238:	e0b6      	b.n	80013a8 <Parse_NMEA_Sentence+0x394>

    } else if (String_Compare(nmeaData.sentenceType, "$GPVTG") == 1) {
 800123a:	4967      	ldr	r1, [pc, #412]	@ (80013d8 <Parse_NMEA_Sentence+0x3c4>)
 800123c:	4860      	ldr	r0, [pc, #384]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 800123e:	f003 fc9c 	bl	8004b7a <String_Compare>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d03c      	beq.n	80012c2 <Parse_NMEA_Sentence+0x2ae>
        nmeaData.trueTrack = atof(fields[GPVTG_TRUE_TRACK]);                      // True track made good (degrees)
 8001248:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800124c:	3b64      	subs	r3, #100	@ 0x64
 800124e:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fdb7 	bl	8004dc6 <atof>
 8001258:	eeb0 7a40 	vmov.f32	s14, s0
 800125c:	eef0 7a60 	vmov.f32	s15, s1
 8001260:	4b57      	ldr	r3, [pc, #348]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 8001262:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
        nmeaData.magneticTrack = atof(fields[GPVTG_MAGNETIC_TRACK]);              // Magnetic track made good (degrees)
 8001266:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800126a:	3b64      	subs	r3, #100	@ 0x64
 800126c:	f203 431a 	addw	r3, r3, #1050	@ 0x41a
 8001270:	4618      	mov	r0, r3
 8001272:	f003 fda8 	bl	8004dc6 <atof>
 8001276:	eeb0 7a40 	vmov.f32	s14, s0
 800127a:	eef0 7a60 	vmov.f32	s15, s1
 800127e:	4b50      	ldr	r3, [pc, #320]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 8001280:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
        nmeaData.groundSpeedKnots = atof(fields[GPVTG_SPEED_KNOTS]);              // Ground speed in knots
 8001284:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001288:	3b64      	subs	r3, #100	@ 0x64
 800128a:	f203 63d6 	addw	r3, r3, #1750	@ 0x6d6
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fd99 	bl	8004dc6 <atof>
 8001294:	eeb0 7a40 	vmov.f32	s14, s0
 8001298:	eef0 7a60 	vmov.f32	s15, s1
 800129c:	4b48      	ldr	r3, [pc, #288]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 800129e:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
        nmeaData.groundSpeedKph = atof(fields[GPVTG_SPEED_KPH]);                  // Ground speed in kilometers per hour
 80012a2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80012a6:	3b64      	subs	r3, #100	@ 0x64
 80012a8:	f603 1392 	addw	r3, r3, #2450	@ 0x992
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fd8a 	bl	8004dc6 <atof>
 80012b2:	eeb0 7a40 	vmov.f32	s14, s0
 80012b6:	eef0 7a60 	vmov.f32	s15, s1
 80012ba:	4b41      	ldr	r3, [pc, #260]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 80012bc:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
 80012c0:	e072      	b.n	80013a8 <Parse_NMEA_Sentence+0x394>

    } else if (String_Compare(nmeaData.sentenceType, "$GPGGA") == 1) {
 80012c2:	4946      	ldr	r1, [pc, #280]	@ (80013dc <Parse_NMEA_Sentence+0x3c8>)
 80012c4:	483e      	ldr	r0, [pc, #248]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 80012c6:	f003 fc58 	bl	8004b7a <String_Compare>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d05d      	beq.n	800138c <Parse_NMEA_Sentence+0x378>
        strncpy(nmeaData.time, fields[GPGGA_TIME], sizeof(nmeaData.time) - 1);                      // UTC time in hhmmss.ss format
 80012d0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80012d4:	3b64      	subs	r3, #100	@ 0x64
 80012d6:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 80012da:	220a      	movs	r2, #10
 80012dc:	4619      	mov	r1, r3
 80012de:	483c      	ldr	r0, [pc, #240]	@ (80013d0 <Parse_NMEA_Sentence+0x3bc>)
 80012e0:	f004 fda7 	bl	8005e32 <strncpy>
        nmeaData.latitude = atof(fields[GPGGA_LATITUDE]);                                           // Latitude in ddmm.mmmm format
 80012e4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80012e8:	3b64      	subs	r3, #100	@ 0x64
 80012ea:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 fd69 	bl	8004dc6 <atof>
 80012f4:	eeb0 7a40 	vmov.f32	s14, s0
 80012f8:	eef0 7a60 	vmov.f32	s15, s1
 80012fc:	4b30      	ldr	r3, [pc, #192]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 80012fe:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        nmeaData.longitude = atof(fields[GPGGA_LONGITUDE]);                                         // Longitude in dddmm.mmmm format
 8001302:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001306:	3b64      	subs	r3, #100	@ 0x64
 8001308:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 800130c:	4618      	mov	r0, r3
 800130e:	f003 fd5a 	bl	8004dc6 <atof>
 8001312:	eeb0 7a40 	vmov.f32	s14, s0
 8001316:	eef0 7a60 	vmov.f32	s15, s1
 800131a:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 800131c:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        strncpy(nmeaData.fixQuality, fields[GPGGA_FIX_QUALITY], sizeof(nmeaData.fixQuality) - 1);   // Fix quality (0 = invalid, 1 = GPS fix, 2 = DGPS fix)
 8001320:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001324:	3b64      	subs	r3, #100	@ 0x64
 8001326:	f603 0334 	addw	r3, r3, #2100	@ 0x834
 800132a:	2209      	movs	r2, #9
 800132c:	4619      	mov	r1, r3
 800132e:	482c      	ldr	r0, [pc, #176]	@ (80013e0 <Parse_NMEA_Sentence+0x3cc>)
 8001330:	f004 fd7f 	bl	8005e32 <strncpy>
        nmeaData.numSatellites = atoi(fields[GPGGA_NUM_SATELLITES]);                                // Number of satellites being tracked
 8001334:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001338:	3b64      	subs	r3, #100	@ 0x64
 800133a:	f603 1392 	addw	r3, r3, #2450	@ 0x992
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fd44 	bl	8004dcc <atoi>
 8001344:	4603      	mov	r3, r0
 8001346:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 8001348:	6793      	str	r3, [r2, #120]	@ 0x78
        nmeaData.hdop = atof(fields[GPGGA_HDOP]);                                                   // Horizontal dilution of precision
 800134a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800134e:	3b64      	subs	r3, #100	@ 0x64
 8001350:	f503 632f 	add.w	r3, r3, #2800	@ 0xaf0
 8001354:	4618      	mov	r0, r3
 8001356:	f003 fd36 	bl	8004dc6 <atof>
 800135a:	ec53 2b10 	vmov	r2, r3, d0
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fc13 	bl	8000b8c <__aeabi_d2f>
 8001366:	4603      	mov	r3, r0
 8001368:	4a15      	ldr	r2, [pc, #84]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 800136a:	6113      	str	r3, [r2, #16]
        nmeaData.altitude = atof(fields[GPGGA_ALTITUDE]);                                           // Altitude above mean sea level in meters
 800136c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001370:	3b64      	subs	r3, #100	@ 0x64
 8001372:	f603 434e 	addw	r3, r3, #3150	@ 0xc4e
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fd25 	bl	8004dc6 <atof>
 800137c:	eeb0 7a40 	vmov.f32	s14, s0
 8001380:	eef0 7a60 	vmov.f32	s15, s1
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 8001386:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
 800138a:	e00d      	b.n	80013a8 <Parse_NMEA_Sentence+0x394>

    } else if (String_Compare(nmeaData.sentenceType, "$PMTKL") == 1) {
 800138c:	4915      	ldr	r1, [pc, #84]	@ (80013e4 <Parse_NMEA_Sentence+0x3d0>)
 800138e:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <Parse_NMEA_Sentence+0x3ac>)
 8001390:	f003 fbf3 	bl	8004b7a <String_Compare>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <Parse_NMEA_Sentence+0x394>
        USART2_Send_String((uint8_t*)nmea);
 800139a:	f507 6357 	add.w	r3, r7, #3440	@ 0xd70
 800139e:	f6a3 536c 	subw	r3, r3, #3436	@ 0xd6c
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	f000 fdd8 	bl	8001f58 <USART2_Send_String>
    }
    return rtrn;
 80013a8:	f507 43da 	add.w	r3, r7, #27904	@ 0x6d00
 80013ac:	f103 036f 	add.w	r3, r3, #111	@ 0x6f
 80013b0:	781b      	ldrb	r3, [r3, #0]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	f507 47da 	add.w	r7, r7, #27904	@ 0x6d00
 80013b8:	3770      	adds	r7, #112	@ 0x70
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200001f8 	.word	0x200001f8
 80013c4:	08007f50 	.word	0x08007f50
 80013c8:	08007f58 	.word	0x08007f58
 80013cc:	08007f60 	.word	0x08007f60
 80013d0:	2000021c 	.word	0x2000021c
 80013d4:	20000248 	.word	0x20000248
 80013d8:	08007f68 	.word	0x08007f68
 80013dc:	08007f70 	.word	0x08007f70
 80013e0:	20000274 	.word	0x20000274
 80013e4:	08007f78 	.word	0x08007f78

080013e8 <Get_NMEA_Data>:
 * This function returns a pointer to the NMEA data structure
 * containing the parsed GPS information.
 *
 * @return Pointer to the current NMEAData structure.
 */
const NMEAData* Get_NMEA_Data() {
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
    return &nmeaData;
 80013ec:	4b02      	ldr	r3, [pc, #8]	@ (80013f8 <Get_NMEA_Data+0x10>)
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	200001f8 	.word	0x200001f8

080013fc <GPS_Set_Update_Rate>:
 * This function sends a command to the GPS module to set the desired update rate
 * for position updates.
 *
 * @param rate Update rate in milliseconds.
 */
void GPS_Set_Update_Rate(uint16_t rate){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
    char send[100] = "$";
 8001406:	2324      	movs	r3, #36	@ 0x24
 8001408:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800140c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001410:	2260      	movs	r2, #96	@ 0x60
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fcf2 	bl	8005dfe <memset>
    char dest[100] = "PMTK220,";
 800141a:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <GPS_Set_Update_Rate+0xc4>)
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	6810      	ldr	r0, [r2, #0]
 8001422:	6851      	ldr	r1, [r2, #4]
 8001424:	c303      	stmia	r3!, {r0, r1}
 8001426:	7a12      	ldrb	r2, [r2, #8]
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 800142e:	225b      	movs	r2, #91	@ 0x5b
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fce3 	bl	8005dfe <memset>
    char src[10];
    char checksumStr[3]; // Buffer to hold the hexadecimal string (2 digits + null terminator)
    unsigned char checksum;

    itoa(rate, src, 10);
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	f107 0110 	add.w	r1, r7, #16
 800143e:	220a      	movs	r2, #10
 8001440:	4618      	mov	r0, r3
 8001442:	f003 fcdf 	bl	8004e04 <itoa>
    String_Concat(dest, src);
 8001446:	f107 0210 	add.w	r2, r7, #16
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f003 fbb7 	bl	8004bc4 <String_Concat>

    checksum = String_XOR_Checksum(dest);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4618      	mov	r0, r3
 800145c:	f003 fc41 	bl	8004ce2 <String_XOR_Checksum>
 8001460:	4603      	mov	r3, r0
 8001462:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7

    CHAR_To_HEX_String(checksum, checksumStr);
 8001466:	f107 020c 	add.w	r2, r7, #12
 800146a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f003 fc51 	bl	8004d18 <CHAR_To_HEX_String>

    String_Concat(dest, "*");
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4912      	ldr	r1, [pc, #72]	@ (80014c4 <GPS_Set_Update_Rate+0xc8>)
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fba1 	bl	8004bc4 <String_Concat>
    String_Concat(dest, checksumStr);
 8001482:	f107 020c 	add.w	r2, r7, #12
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fb99 	bl	8004bc4 <String_Concat>
    String_Concat(dest, "\r\n");
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	490c      	ldr	r1, [pc, #48]	@ (80014c8 <GPS_Set_Update_Rate+0xcc>)
 8001498:	4618      	mov	r0, r3
 800149a:	f003 fb93 	bl	8004bc4 <String_Concat>
    String_Concat(send, dest);
 800149e:	f107 021c 	add.w	r2, r7, #28
 80014a2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fb8b 	bl	8004bc4 <String_Concat>

    UART5_Send_String((uint8_t*)send);
 80014ae:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fd3a 	bl	8001f2c <UART5_Send_String>
}
 80014b8:	bf00      	nop
 80014ba:	37e8      	adds	r7, #232	@ 0xe8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	08007f88 	.word	0x08007f88
 80014c4:	08007f80 	.word	0x08007f80
 80014c8:	08007f84 	.word	0x08007f84

080014cc <GPS_Start_Logging>:
 * @brief Start logging GPS data.
 *
 * This function sends a command to the GPS module to start logging GPS data
 * to the onboard storage.
 */
void GPS_Start_Logging(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
    UART5_Send_String((uint8_t*)"$PMTK185,0*22\r\n");
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <GPS_Start_Logging+0x10>)
 80014d2:	f000 fd2b 	bl	8001f2c <UART5_Send_String>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08007f94 	.word	0x08007f94

080014e0 <GPS_Stop_Logging>:
 * @brief Stop logging GPS data.
 *
 * This function sends a command to the GPS module to stop logging GPS data
 * to the onboard storage.
 */
void GPS_Stop_Logging(){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
    UART5_Send_String((uint8_t*)"$PMTK185,1*23\r\n");
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <GPS_Stop_Logging+0x10>)
 80014e6:	f000 fd21 	bl	8001f2c <UART5_Send_String>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	08007fa4 	.word	0x08007fa4

080014f4 <GPS_Dump_Partial_Flash_Data>:
 * @brief Dump partial flash data from the GPS module.
 *
 * This function sends a command to the GPS module to dump partial flash
 * data containing logged GPS information.
 */
void GPS_Dump_Partial_Flash_Data(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
    UART5_Send_String((uint8_t*)"$PMTK622,1*29\r\n");
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <GPS_Dump_Partial_Flash_Data+0x10>)
 80014fa:	f000 fd17 	bl	8001f2c <UART5_Send_String>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	08007fc4 	.word	0x08007fc4

08001508 <GPS_Erase_Flash_Data>:
 * @brief Erase flash data from the GPS module.
 *
 * This function sends a command to the GPS module to erase all flash
 * data containing logged GPS information.
 */
void GPS_Erase_Flash_Data(){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
    UART5_Send_String((uint8_t*)"$PMTK184,1*22\r\n");
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <GPS_Erase_Flash_Data+0x10>)
 800150e:	f000 fd0d 	bl	8001f2c <UART5_Send_String>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	08007fd4 	.word	0x08007fd4

0800151c <GPS_Configure_Init>:
 * @brief Configure the GPS module initialization settings.
 *
 * This function stops any ongoing logging and sets the update rate for
 * the GPS module during initialization.
 */
void GPS_Configure_Init(){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    GPS_Stop_Logging();
 8001520:	f7ff ffde 	bl	80014e0 <GPS_Stop_Logging>
    GPS_Set_Update_Rate(2000);
 8001524:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001528:	f7ff ff68 	bl	80013fc <GPS_Set_Update_Rate>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <GPS_Log_Now>:
/**
 * @brief Trigger immediate GPS data logging.
 *
 * This function sends a command to the GPS module to log data immediately.
 */
void GPS_Log_Now(){
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
    UART5_Send_String((uint8_t*)"$PMTK186,1*20\r\n");
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <GPS_Log_Now+0x10>)
 8001536:	f000 fcf9 	bl	8001f2c <UART5_Send_String>
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	08007ff4 	.word	0x08007ff4

08001544 <gpsFSM_init>:
 * @brief Initialize the GPS FSM.
 *
 * This function initializes the GPS finite state machine (FSM) to the idle state
 * and sets up the delay timer for state transitions.
 */
void gpsFSM_init(){
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
    gpsState = STATE_IDLE;
 8001548:	4b04      	ldr	r3, [pc, #16]	@ (800155c <gpsFSM_init+0x18>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
    delayInit(&d1, VALID_FIX_TIME);
 800154e:	f247 5130 	movw	r1, #30000	@ 0x7530
 8001552:	4803      	ldr	r0, [pc, #12]	@ (8001560 <gpsFSM_init+0x1c>)
 8001554:	f7ff fd18 	bl	8000f88 <delayInit>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000288 	.word	0x20000288
 8001560:	2000028c 	.word	0x2000028c

08001564 <gpsFSM_update>:
 *
 * This function updates the GPS finite state machine (FSM) based on the current
 * state and the parsed GPS data. It manages state transitions and performs
 * actions such as starting/stopping logging.
 */
void gpsFSM_update(){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0

    stateData = Get_NMEA_Data();
 8001568:	f7ff ff3e 	bl	80013e8 <Get_NMEA_Data>
 800156c:	4603      	mov	r3, r0
 800156e:	4a48      	ldr	r2, [pc, #288]	@ (8001690 <gpsFSM_update+0x12c>)
 8001570:	6013      	str	r3, [r2, #0]

    switch(gpsState){
 8001572:	4b48      	ldr	r3, [pc, #288]	@ (8001694 <gpsFSM_update+0x130>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d05e      	beq.n	8001638 <gpsFSM_update+0xd4>
 800157a:	2b02      	cmp	r3, #2
 800157c:	dc7d      	bgt.n	800167a <gpsFSM_update+0x116>
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <gpsFSM_update+0x24>
 8001582:	2b01      	cmp	r3, #1
 8001584:	d01d      	beq.n	80015c2 <gpsFSM_update+0x5e>
 8001586:	e078      	b.n	800167a <gpsFSM_update+0x116>
        case STATE_IDLE:
            if (stateData->fixQuality[0]=='1'){
 8001588:	4b41      	ldr	r3, [pc, #260]	@ (8001690 <gpsFSM_update+0x12c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001590:	2b31      	cmp	r3, #49	@ 0x31
 8001592:	d175      	bne.n	8001680 <gpsFSM_update+0x11c>
                gpsState = STATE_FIX;
 8001594:	4b3f      	ldr	r3, [pc, #252]	@ (8001694 <gpsFSM_update+0x130>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
                HD44780_Clear();
 800159a:	f000 f9ad 	bl	80018f8 <HD44780_Clear>
                HD44780_Move_Cursor(0, 0);
 800159e:	2100      	movs	r1, #0
 80015a0:	2000      	movs	r0, #0
 80015a2:	f000 f971 	bl	8001888 <HD44780_Move_Cursor>
                HD44780_Print_String("Processing Data");
 80015a6:	483c      	ldr	r0, [pc, #240]	@ (8001698 <gpsFSM_update+0x134>)
 80015a8:	f000 f8e0 	bl	800176c <HD44780_Print_String>
                HD44780_Move_Cursor(0, 1);
 80015ac:	2101      	movs	r1, #1
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f96a 	bl	8001888 <HD44780_Move_Cursor>
                HD44780_Print_String("State: FIX");
 80015b4:	4839      	ldr	r0, [pc, #228]	@ (800169c <gpsFSM_update+0x138>)
 80015b6:	f000 f8d9 	bl	800176c <HD44780_Print_String>
                delayRead(&d1);
 80015ba:	4839      	ldr	r0, [pc, #228]	@ (80016a0 <gpsFSM_update+0x13c>)
 80015bc:	f7ff fcfb 	bl	8000fb6 <delayRead>
            }
            break;
 80015c0:	e05e      	b.n	8001680 <gpsFSM_update+0x11c>
        case STATE_FIX:
            if (stateData->fixQuality[0]=='1'){
 80015c2:	4b33      	ldr	r3, [pc, #204]	@ (8001690 <gpsFSM_update+0x12c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80015ca:	2b31      	cmp	r3, #49	@ 0x31
 80015cc:	d11b      	bne.n	8001606 <gpsFSM_update+0xa2>
                if (delayRead(&d1)){
 80015ce:	4834      	ldr	r0, [pc, #208]	@ (80016a0 <gpsFSM_update+0x13c>)
 80015d0:	f7ff fcf1 	bl	8000fb6 <delayRead>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d054      	beq.n	8001684 <gpsFSM_update+0x120>
                    gpsState = STATE_NAV;
 80015da:	4b2e      	ldr	r3, [pc, #184]	@ (8001694 <gpsFSM_update+0x130>)
 80015dc:	2202      	movs	r2, #2
 80015de:	701a      	strb	r2, [r3, #0]
                    HD44780_Clear();
 80015e0:	f000 f98a 	bl	80018f8 <HD44780_Clear>
                    HD44780_Move_Cursor(0, 0);
 80015e4:	2100      	movs	r1, #0
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f94e 	bl	8001888 <HD44780_Move_Cursor>
                    HD44780_Print_String("Processing Data");
 80015ec:	482a      	ldr	r0, [pc, #168]	@ (8001698 <gpsFSM_update+0x134>)
 80015ee:	f000 f8bd 	bl	800176c <HD44780_Print_String>
                    HD44780_Move_Cursor(0, 1);
 80015f2:	2101      	movs	r1, #1
 80015f4:	2000      	movs	r0, #0
 80015f6:	f000 f947 	bl	8001888 <HD44780_Move_Cursor>
                    HD44780_Print_String("State: NAV");
 80015fa:	482a      	ldr	r0, [pc, #168]	@ (80016a4 <gpsFSM_update+0x140>)
 80015fc:	f000 f8b6 	bl	800176c <HD44780_Print_String>
                    GPS_Start_Logging();
 8001600:	f7ff ff64 	bl	80014cc <GPS_Start_Logging>
                HD44780_Move_Cursor(0, 0);
                HD44780_Print_String("Processing Data");
                HD44780_Move_Cursor(0, 1);
                HD44780_Print_String("State: IDLE");
            }
            break;
 8001604:	e03e      	b.n	8001684 <gpsFSM_update+0x120>
                delayInit(&d1, VALID_FIX_TIME);
 8001606:	f247 5130 	movw	r1, #30000	@ 0x7530
 800160a:	4825      	ldr	r0, [pc, #148]	@ (80016a0 <gpsFSM_update+0x13c>)
 800160c:	f7ff fcbc 	bl	8000f88 <delayInit>
                gpsState = STATE_IDLE;
 8001610:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <gpsFSM_update+0x130>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
                HD44780_Clear();
 8001616:	f000 f96f 	bl	80018f8 <HD44780_Clear>
                HD44780_Move_Cursor(0, 0);
 800161a:	2100      	movs	r1, #0
 800161c:	2000      	movs	r0, #0
 800161e:	f000 f933 	bl	8001888 <HD44780_Move_Cursor>
                HD44780_Print_String("Processing Data");
 8001622:	481d      	ldr	r0, [pc, #116]	@ (8001698 <gpsFSM_update+0x134>)
 8001624:	f000 f8a2 	bl	800176c <HD44780_Print_String>
                HD44780_Move_Cursor(0, 1);
 8001628:	2101      	movs	r1, #1
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f92c 	bl	8001888 <HD44780_Move_Cursor>
                HD44780_Print_String("State: IDLE");
 8001630:	481d      	ldr	r0, [pc, #116]	@ (80016a8 <gpsFSM_update+0x144>)
 8001632:	f000 f89b 	bl	800176c <HD44780_Print_String>
            break;
 8001636:	e025      	b.n	8001684 <gpsFSM_update+0x120>
        case STATE_NAV:
            if (stateData->fixQuality[0]=='0'){
 8001638:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <gpsFSM_update+0x12c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001640:	2b30      	cmp	r3, #48	@ 0x30
 8001642:	d121      	bne.n	8001688 <gpsFSM_update+0x124>
                delayInit(&d1, VALID_FIX_TIME);
 8001644:	f247 5130 	movw	r1, #30000	@ 0x7530
 8001648:	4815      	ldr	r0, [pc, #84]	@ (80016a0 <gpsFSM_update+0x13c>)
 800164a:	f7ff fc9d 	bl	8000f88 <delayInit>
                gpsState = STATE_IDLE;
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <gpsFSM_update+0x130>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
                HD44780_Clear();
 8001654:	f000 f950 	bl	80018f8 <HD44780_Clear>
                HD44780_Move_Cursor(0, 0);
 8001658:	2100      	movs	r1, #0
 800165a:	2000      	movs	r0, #0
 800165c:	f000 f914 	bl	8001888 <HD44780_Move_Cursor>
                HD44780_Print_String("Processing Data");
 8001660:	480d      	ldr	r0, [pc, #52]	@ (8001698 <gpsFSM_update+0x134>)
 8001662:	f000 f883 	bl	800176c <HD44780_Print_String>
                HD44780_Move_Cursor(0, 1);
 8001666:	2101      	movs	r1, #1
 8001668:	2000      	movs	r0, #0
 800166a:	f000 f90d 	bl	8001888 <HD44780_Move_Cursor>
                HD44780_Print_String("State: IDLE");
 800166e:	480e      	ldr	r0, [pc, #56]	@ (80016a8 <gpsFSM_update+0x144>)
 8001670:	f000 f87c 	bl	800176c <HD44780_Print_String>
                GPS_Stop_Logging();
 8001674:	f7ff ff34 	bl	80014e0 <GPS_Stop_Logging>
            }
            break;
 8001678:	e006      	b.n	8001688 <gpsFSM_update+0x124>
        default:
            Error_Handler();
 800167a:	f003 fa7a 	bl	8004b72 <Error_Handler>
            break;
 800167e:	e004      	b.n	800168a <gpsFSM_update+0x126>
            break;
 8001680:	bf00      	nop
 8001682:	e002      	b.n	800168a <gpsFSM_update+0x126>
            break;
 8001684:	bf00      	nop
 8001686:	e000      	b.n	800168a <gpsFSM_update+0x126>
            break;
 8001688:	bf00      	nop
    }
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000298 	.word	0x20000298
 8001694:	20000288 	.word	0x20000288
 8001698:	08008004 	.word	0x08008004
 800169c:	08008014 	.word	0x08008014
 80016a0:	2000028c 	.word	0x2000028c
 80016a4:	08008020 	.word	0x08008020
 80016a8:	0800802c 	.word	0x0800802c

080016ac <HD44780_Init>:

/**
 * @brief Initialize the HD44780 display.
 * @param rows Number of rows on the display.
 */
void HD44780_Init(uint8_t rows) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
    // Set up global variables
    dpRows = rows;
 80016b6:	4a23      	ldr	r2, [pc, #140]	@ (8001744 <HD44780_Init+0x98>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	7013      	strb	r3, [r2, #0]
    dpBacklight = LCD_BACKLIGHT;
 80016bc:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <HD44780_Init+0x9c>)
 80016be:	2208      	movs	r2, #8
 80016c0:	701a      	strb	r2, [r3, #0]

    // Configuration for 4-bit mode, 2-line display, and 5x8 dots
    const uint8_t initSequence[] = { 0x03, 0x03, 0x03, 0x02 };
 80016c2:	4b22      	ldr	r3, [pc, #136]	@ (800174c <HD44780_Init+0xa0>)
 80016c4:	60bb      	str	r3, [r7, #8]
    dpFunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 80016c6:	4b22      	ldr	r3, [pc, #136]	@ (8001750 <HD44780_Init+0xa4>)
 80016c8:	2208      	movs	r2, #8
 80016ca:	701a      	strb	r2, [r3, #0]
    dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80016cc:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <HD44780_Init+0xa8>)
 80016ce:	2202      	movs	r2, #2
 80016d0:	701a      	strb	r2, [r3, #0]

    // Initialization delay
    HAL_Delay_Wrapper(1000);
 80016d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016d6:	f000 f9b3 	bl	8001a40 <HAL_Delay_Wrapper>

    // Execute the initialization sequence
    for (uint8_t i = 0; i < sizeof(initSequence) / sizeof(initSequence[0]); ++i) {
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	e015      	b.n	800170c <HD44780_Init+0x60>
        Expander_Write(initSequence[i] << 4);
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	3310      	adds	r3, #16
 80016e4:	443b      	add	r3, r7
 80016e6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f942 	bl	8001978 <Expander_Write>
        HAL_Delay_Wrapper(i < 3 ? 5 : 1);  // Different delay for last step
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d801      	bhi.n	80016fe <HD44780_Init+0x52>
 80016fa:	2305      	movs	r3, #5
 80016fc:	e000      	b.n	8001700 <HD44780_Init+0x54>
 80016fe:	2301      	movs	r3, #1
 8001700:	4618      	mov	r0, r3
 8001702:	f000 f99d 	bl	8001a40 <HAL_Delay_Wrapper>
    for (uint8_t i = 0; i < sizeof(initSequence) / sizeof(initSequence[0]); ++i) {
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	3301      	adds	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d9e6      	bls.n	80016e0 <HD44780_Init+0x34>
    }

    // Set the display function
    Send_Command(LCD_FUNCTIONSET | dpFunction);
 8001712:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <HD44780_Init+0xa4>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	f043 0320 	orr.w	r3, r3, #32
 800171a:	b2db      	uxtb	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	f000 f913 	bl	8001948 <Send_Command>

    // Set the entry mode
    Send_Command(LCD_ENTRYMODESET | dpMode);
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HD44780_Init+0xa8>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f000 f90b 	bl	8001948 <Send_Command>
    HAL_Delay_Wrapper(5);
 8001732:	2005      	movs	r0, #5
 8001734:	f000 f984 	bl	8001a40 <HAL_Delay_Wrapper>

    // Return cursor to home position
    HD44780_Home();
 8001738:	f000 f80e 	bl	8001758 <HD44780_Home>
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000029f 	.word	0x2000029f
 8001748:	200002a0 	.word	0x200002a0
 800174c:	02030303 	.word	0x02030303
 8001750:	2000029c 	.word	0x2000029c
 8001754:	2000029e 	.word	0x2000029e

08001758 <HD44780_Home>:


/**
 * @brief Set the display to home position.
 */
void HD44780_Home(){
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
    Send_Command(LCD_RETURNHOME);
 800175c:	2002      	movs	r0, #2
 800175e:	f000 f8f3 	bl	8001948 <Send_Command>
    HAL_Delay_Wrapper(2);
 8001762:	2002      	movs	r0, #2
 8001764:	f000 f96c 	bl	8001a40 <HAL_Delay_Wrapper>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <HD44780_Print_String>:

/**
 * @brief Print a string on the display.
 * @param c String to be printed.
 */
void HD44780_Print_String(const char str[]) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
    while (str[i] != '\0') {
 8001778:	e009      	b.n	800178e <HD44780_Print_String+0x22>
        Send_Data(str[i]);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f8c2 	bl	800190c <Send_Data>
        i++;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
    while (str[i] != '\0') {
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ef      	bne.n	800177a <HD44780_Print_String+0xe>
    }
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HD44780_Set_Display>:

/**
 * @brief Set the display on or off.
 * @param displayOn Boolean indicating display on (true) or off (false).
 */
void HD44780_Set_Display(bool_t displayOn) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
    if (displayOn) {
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d007      	beq.n	80017c4 <HD44780_Set_Display+0x20>
        dpControl |= LCD_DISPLAYON;  // Set the display on flag
 80017b4:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <HD44780_Set_Display+0x48>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HD44780_Set_Display+0x48>)
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	e006      	b.n	80017d2 <HD44780_Set_Display+0x2e>
    } else {
        dpControl &= ~LCD_DISPLAYON; // Clear the display on flag
 80017c4:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <HD44780_Set_Display+0x48>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <HD44780_Set_Display+0x48>)
 80017d0:	701a      	strb	r2, [r3, #0]
    }
    Send_Command(LCD_DISPLAYCONTROL | dpControl); // Send the command to the display
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HD44780_Set_Display+0x48>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f8b3 	bl	8001948 <Send_Command>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000029d 	.word	0x2000029d

080017f0 <HD44780_Set_Blink>:

/**
 * @brief Set the blink mode on or off.
 * @param blinkOn Boolean indicating blink on (true) or off (false).
 */
void HD44780_Set_Blink(bool_t blinkOn) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
    if (blinkOn) {
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <HD44780_Set_Blink+0x20>
        dpControl |= LCD_BLINKON;  // Set the blink on flag
 8001800:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <HD44780_Set_Blink+0x48>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HD44780_Set_Blink+0x48>)
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e006      	b.n	800181e <HD44780_Set_Blink+0x2e>
    } else {
        dpControl &= ~LCD_BLINKON; // Clear the blink on flag
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <HD44780_Set_Blink+0x48>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <HD44780_Set_Blink+0x48>)
 800181c:	701a      	strb	r2, [r3, #0]
    }
    Send_Command(LCD_DISPLAYCONTROL | dpControl); // Send the command to the display
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HD44780_Set_Blink+0x48>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f88d 	bl	8001948 <Send_Command>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000029d 	.word	0x2000029d

0800183c <HD44780_Set_Cursor>:

/**
 * @brief Set the cursor mode on or off.
 * @param cursorOn Boolean indicating cursor on (true) or off (false).
 */
void HD44780_Set_Cursor(bool_t cursorOn) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
    if (cursorOn) {
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <HD44780_Set_Cursor+0x20>
        dpControl |= LCD_CURSORON;  // Set the cursor on flag
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HD44780_Set_Cursor+0x48>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <HD44780_Set_Cursor+0x48>)
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e006      	b.n	800186a <HD44780_Set_Cursor+0x2e>
    } else {
        dpControl &= ~LCD_CURSORON; // Clear the cursor on flag
 800185c:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <HD44780_Set_Cursor+0x48>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	f023 0302 	bic.w	r3, r3, #2
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <HD44780_Set_Cursor+0x48>)
 8001868:	701a      	strb	r2, [r3, #0]
    }
    Send_Command(LCD_DISPLAYCONTROL | dpControl); // Send the command to the display
 800186a:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HD44780_Set_Cursor+0x48>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4618      	mov	r0, r3
 8001876:	f000 f867 	bl	8001948 <Send_Command>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000029d 	.word	0x2000029d

08001888 <HD44780_Move_Cursor>:
/**
 * @brief Set the cursor position on the display.
 * @param column Column position.
 * @param line line position.
 */
void HD44780_Move_Cursor(uint8_t column, uint8_t line) {
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	71bb      	strb	r3, [r7, #6]
	// The HD44780 LCD controller has a character display RAM (DDRAM) where it stores the characters to be displayed.
	// The DDRAM is organized into rows, and each row has a base address. This supports up to 4 rows.
    const int rowAddressMap[] = { 0x00, 0x40, 0x14, 0x54 };
 8001898:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HD44780_Move_Cursor+0x68>)
 800189a:	f107 040c 	add.w	r4, r7, #12
 800189e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t maxLine = dpRows > 0 ? dpRows - 1 : 0;
 80018a4:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <HD44780_Move_Cursor+0x6c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <HD44780_Move_Cursor+0x2e>
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <HD44780_Move_Cursor+0x6c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	e000      	b.n	80018b8 <HD44780_Move_Cursor+0x30>
 80018b6:	2300      	movs	r3, #0
 80018b8:	77fb      	strb	r3, [r7, #31]

    if (line > maxLine) {
 80018ba:	79ba      	ldrb	r2, [r7, #6]
 80018bc:	7ffb      	ldrb	r3, [r7, #31]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d901      	bls.n	80018c6 <HD44780_Move_Cursor+0x3e>
        line = maxLine;
 80018c2:	7ffb      	ldrb	r3, [r7, #31]
 80018c4:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t ddramAddress = column + rowAddressMap[line];
 80018c6:	79bb      	ldrb	r3, [r7, #6]
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	3320      	adds	r3, #32
 80018cc:	443b      	add	r3, r7
 80018ce:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	4413      	add	r3, r2
 80018d8:	77bb      	strb	r3, [r7, #30]
    Send_Command(LCD_SETDDRAMADDR | ddramAddress);
 80018da:	7fbb      	ldrb	r3, [r7, #30]
 80018dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f830 	bl	8001948 <Send_Command>
}
 80018e8:	bf00      	nop
 80018ea:	3724      	adds	r7, #36	@ 0x24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}
 80018f0:	08008038 	.word	0x08008038
 80018f4:	2000029f 	.word	0x2000029f

080018f8 <HD44780_Clear>:

/**
 * @brief Clear the display.
 */
void HD44780_Clear(){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
    Send_Command(LCD_CLEARDISPLAY);
 80018fc:	2001      	movs	r0, #1
 80018fe:	f000 f823 	bl	8001948 <Send_Command>
    HAL_Delay_Wrapper(2);
 8001902:	2002      	movs	r0, #2
 8001904:	f000 f89c 	bl	8001a40 <HAL_Delay_Wrapper>
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <Send_Data>:

/**
 * @brief Send data to the display.
 * @param data Data to be sent.
 */
static void Send_Data(uint8_t data){
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
    uint8_t highnib = data & 0xF0;
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	f023 030f 	bic.w	r3, r3, #15
 800191c:	73fb      	strb	r3, [r7, #15]
    uint8_t lownib = (data << 4) & 0xF0;
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	73bb      	strb	r3, [r7, #14]
    Expander_Write(highnib | RS);
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f823 	bl	8001978 <Expander_Write>
    Expander_Write(lownib | RS);
 8001932:	7bbb      	ldrb	r3, [r7, #14]
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f81c 	bl	8001978 <Expander_Write>
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <Send_Command>:

/**
 * @brief Send a command to the display.
 * @param cmd Command to be sent.
 */
static void Send_Command(uint8_t cmd){
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
    uint8_t highnib = cmd & 0xF0;
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f023 030f 	bic.w	r3, r3, #15
 8001958:	73fb      	strb	r3, [r7, #15]
    uint8_t lownib = (cmd << 4) & 0xF0;
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	73bb      	strb	r3, [r7, #14]
    Expander_Write(highnib);
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f808 	bl	8001978 <Expander_Write>
    Expander_Write(lownib);
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f804 	bl	8001978 <Expander_Write>
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <Expander_Write>:
/**
 * @brief Write a value to the I2C expander.
 * @param value Value to be written.
 */
static void Expander_Write(uint8_t value)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af02      	add	r7, sp, #8
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
    uint8_t data = value | dpBacklight;
 8001982:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <Expander_Write+0x8c>)
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4313      	orrs	r3, r2
 800198a:	b2db      	uxtb	r3, r3
 800198c:	73fb      	strb	r3, [r7, #15]
    I2C_Master_Transmit_Wrapper(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800198e:	f107 020f 	add.w	r2, r7, #15
 8001992:	230a      	movs	r3, #10
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	214e      	movs	r1, #78	@ 0x4e
 800199a:	481b      	ldr	r0, [pc, #108]	@ (8001a08 <Expander_Write+0x90>)
 800199c:	f000 f836 	bl	8001a0c <I2C_Master_Transmit_Wrapper>

    data = (value | ENABLE) | dpBacklight;
 80019a0:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <Expander_Write+0x8c>)
 80019a2:	781a      	ldrb	r2, [r3, #0]
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	73fb      	strb	r3, [r7, #15]
    I2C_Master_Transmit_Wrapper(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80019b2:	f107 020f 	add.w	r2, r7, #15
 80019b6:	230a      	movs	r3, #10
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	214e      	movs	r1, #78	@ 0x4e
 80019be:	4812      	ldr	r0, [pc, #72]	@ (8001a08 <Expander_Write+0x90>)
 80019c0:	f000 f824 	bl	8001a0c <I2C_Master_Transmit_Wrapper>
    HAL_Delay_Wrapper(1);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f000 f83b 	bl	8001a40 <HAL_Delay_Wrapper>

    data = (value & ~ENABLE) | dpBacklight;
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	f023 0304 	bic.w	r3, r3, #4
 80019d2:	b25a      	sxtb	r2, r3
 80019d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <Expander_Write+0x8c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	4313      	orrs	r3, r2
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	73fb      	strb	r3, [r7, #15]
    I2C_Master_Transmit_Wrapper(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80019e2:	f107 020f 	add.w	r2, r7, #15
 80019e6:	230a      	movs	r3, #10
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	214e      	movs	r1, #78	@ 0x4e
 80019ee:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <Expander_Write+0x90>)
 80019f0:	f000 f80c 	bl	8001a0c <I2C_Master_Transmit_Wrapper>
    HAL_Delay_Wrapper(1);
 80019f4:	2001      	movs	r0, #1
 80019f6:	f000 f823 	bl	8001a40 <HAL_Delay_Wrapper>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200002a0 	.word	0x200002a0
 8001a08:	200002a4 	.word	0x200002a4

08001a0c <I2C_Master_Transmit_Wrapper>:
 * @param data Pointer to the data buffer to be transmitted.
 * @param size Size of the data buffer.
 * @param timeout Timeout duration for the I2C transmission.
 * @return HAL status indicating the result of the transmission.
 */
HAL_StatusTypeDef I2C_Master_Transmit_Wrapper(I2C_HandleTypeDef *hi2c, uint16_t deviceAddr, uint8_t *data, uint16_t size, uint32_t timeout) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	461a      	mov	r2, r3
 8001a18:	460b      	mov	r3, r1
 8001a1a:	817b      	strh	r3, [r7, #10]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	813b      	strh	r3, [r7, #8]
    HAL_StatusTypeDef stts = HAL_I2C_Master_Transmit(hi2c, deviceAddr, data, size, timeout);
 8001a20:	893a      	ldrh	r2, [r7, #8]
 8001a22:	8979      	ldrh	r1, [r7, #10]
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f001 fa7d 	bl	8002f2c <HAL_I2C_Master_Transmit>
 8001a32:	4603      	mov	r3, r0
 8001a34:	75fb      	strb	r3, [r7, #23]
    return stts;
 8001a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_Delay_Wrapper>:
 * This function wraps the HAL_Delay function to provide
 * a simplified interface for delaying execution.
 *
 * @param ms The number of milliseconds to delay.
 */
void HAL_Delay_Wrapper(uint32_t ms) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fdad 	bl	80025a8 <HAL_Delay>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <I2C1_Init>:
 * and checks if the I2C device is ready.
 *
 * @return true if initialization is successful, false otherwise.
 */
bool_t I2C1_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
    bool_t rtrn = true;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	71fb      	strb	r3, [r7, #7]
    I2C1_GPIO_Init();
 8001a62:	f000 f83b 	bl	8001adc <I2C1_GPIO_Init>

    hi2c1.Instance = I2C1;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <I2C1_Init+0x78>)
 8001a68:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad4 <I2C1_Init+0x7c>)
 8001a6a:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <I2C1_Init+0x78>)
 8001a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad8 <I2C1_Init+0x80>)
 8001a70:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a72:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <I2C1_Init+0x78>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <I2C1_Init+0x78>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <I2C1_Init+0x78>)
 8001a80:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a84:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a86:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <I2C1_Init+0x78>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001a8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <I2C1_Init+0x78>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <I2C1_Init+0x78>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <I2C1_Init+0x78>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) { rtrn = false; }
 8001a9e:	480c      	ldr	r0, [pc, #48]	@ (8001ad0 <I2C1_Init+0x78>)
 8001aa0:	f001 f8f6 	bl	8002c90 <HAL_I2C_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <I2C1_Init+0x56>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_IsDeviceReady(&hi2c1, DEVICE_ADDR, 10, HAL_MAX_DELAY) != HAL_OK) { rtrn = false; }
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ab2:	220a      	movs	r2, #10
 8001ab4:	214e      	movs	r1, #78	@ 0x4e
 8001ab6:	4806      	ldr	r0, [pc, #24]	@ (8001ad0 <I2C1_Init+0x78>)
 8001ab8:	f001 fb36 	bl	8003128 <HAL_I2C_IsDeviceReady>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <I2C1_Init+0x6e>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	71fb      	strb	r3, [r7, #7]

    return rtrn;
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200002a4 	.word	0x200002a4
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	000186a0 	.word	0x000186a0

08001adc <I2C1_GPIO_Init>:
 *
 * This function enables the necessary clocks and configures
 * GPIO pins for the I2C1 peripheral.
 */
static void I2C1_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	@ 0x28
 8001ae0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	4b25      	ldr	r3, [pc, #148]	@ (8001b7c <I2C1_GPIO_Init+0xa0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a24      	ldr	r2, [pc, #144]	@ (8001b7c <I2C1_GPIO_Init+0xa0>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b22      	ldr	r3, [pc, #136]	@ (8001b7c <I2C1_GPIO_Init+0xa0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <I2C1_GPIO_Init+0xa0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a1d      	ldr	r2, [pc, #116]	@ (8001b7c <I2C1_GPIO_Init+0xa0>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <I2C1_GPIO_Init+0xa0>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <I2C1_GPIO_Init+0xa0>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <I2C1_GPIO_Init+0xa0>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <I2C1_GPIO_Init+0xa0>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <I2C1_GPIO_Init+0xa0>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b7c <I2C1_GPIO_Init+0xa0>)
 8001b40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <I2C1_GPIO_Init+0xa0>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001b52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b58:	2312      	movs	r3, #18
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b64:	2304      	movs	r3, #4
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4804      	ldr	r0, [pc, #16]	@ (8001b80 <I2C1_GPIO_Init+0xa4>)
 8001b70:	f000 fee2 	bl	8002938 <HAL_GPIO_Init>
}
 8001b74:	bf00      	nop
 8001b76:	3728      	adds	r7, #40	@ 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020400 	.word	0x40020400

08001b84 <Process_PC_Command>:
 * and triggers the respective GPS functions.
 *
 * @param pc_command Pointer to the command string received from the PC.
 * @return true if the command is recognized and processed, false otherwise.
 */
bool_t Process_PC_Command(const char* pc_command) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
    bool_t rtrn = true;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]

    if (String_Compare(pc_command, "$DUMP\n\r") == 1) {
 8001b90:	4915      	ldr	r1, [pc, #84]	@ (8001be8 <Process_PC_Command+0x64>)
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f002 fff1 	bl	8004b7a <String_Compare>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d104      	bne.n	8001ba8 <Process_PC_Command+0x24>
        GPS_Dump_Partial_Flash_Data();
 8001b9e:	f7ff fca9 	bl	80014f4 <GPS_Dump_Partial_Flash_Data>
        rtrn = true;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e019      	b.n	8001bdc <Process_PC_Command+0x58>
    } else if (String_Compare(pc_command, "$ERASE\n\r") == 1) {
 8001ba8:	4910      	ldr	r1, [pc, #64]	@ (8001bec <Process_PC_Command+0x68>)
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f002 ffe5 	bl	8004b7a <String_Compare>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d104      	bne.n	8001bc0 <Process_PC_Command+0x3c>
        GPS_Erase_Flash_Data();
 8001bb6:	f7ff fca7 	bl	8001508 <GPS_Erase_Flash_Data>
        rtrn = true;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	e00d      	b.n	8001bdc <Process_PC_Command+0x58>
    } else if (String_Compare(pc_command, "$LOGNOW\n\r") == 1) {
 8001bc0:	490b      	ldr	r1, [pc, #44]	@ (8001bf0 <Process_PC_Command+0x6c>)
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f002 ffd9 	bl	8004b7a <String_Compare>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d104      	bne.n	8001bd8 <Process_PC_Command+0x54>
        GPS_Log_Now();
 8001bce:	f7ff fcaf 	bl	8001530 <GPS_Log_Now>
        rtrn = true;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
 8001bd6:	e001      	b.n	8001bdc <Process_PC_Command+0x58>
    } else {
        rtrn = false;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]
    }
    return rtrn;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	08008048 	.word	0x08008048
 8001bec:	08008050 	.word	0x08008050
 8001bf0:	0800805c 	.word	0x0800805c

08001bf4 <UART5_GPIO_Init>:
bool_t nmea_available;

/**
 * @brief Initialize GPIO for UART5.
 */
static void UART5_GPIO_Init(void){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]

    /* Enable GPIO Clocks */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <UART5_GPIO_Init+0xa8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a22      	ldr	r2, [pc, #136]	@ (8001c9c <UART5_GPIO_Init+0xa8>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <UART5_GPIO_Init+0xa8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <UART5_GPIO_Init+0xa8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001c9c <UART5_GPIO_Init+0xa8>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <UART5_GPIO_Init+0xa8>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

    /* Enable UART5 Clock */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <UART5_GPIO_Init+0xa8>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	4a14      	ldr	r2, [pc, #80]	@ (8001c9c <UART5_GPIO_Init+0xa8>)
 8001c4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <UART5_GPIO_Init+0xa8>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]

    /* Configure PC12 for UART5 TX */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c70:	2308      	movs	r3, #8
 8001c72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <UART5_GPIO_Init+0xac>)
 8001c7c:	f000 fe5c 	bl	8002938 <HAL_GPIO_Init>

    /* Configure PD2 for UART5 RX */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c80:	2304      	movs	r3, #4
 8001c82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c84:	2308      	movs	r3, #8
 8001c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <UART5_GPIO_Init+0xb0>)
 8001c90:	f000 fe52 	bl	8002938 <HAL_GPIO_Init>
}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020c00 	.word	0x40020c00

08001ca8 <USART2_GPIO_Init>:

/**
 * @brief Initialize GPIO for USART2.
 */
static void USART2_GPIO_Init(void){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]

    /* Enable GPIO Clocks */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <USART2_GPIO_Init+0x88>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d30 <USART2_GPIO_Init+0x88>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <USART2_GPIO_Init+0x88>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]

    /* Enable USART2 Clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	4b14      	ldr	r3, [pc, #80]	@ (8001d30 <USART2_GPIO_Init+0x88>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	4a13      	ldr	r2, [pc, #76]	@ (8001d30 <USART2_GPIO_Init+0x88>)
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cea:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <USART2_GPIO_Init+0x88>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

    /* Configure PD5 for USART2 TX */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d06:	2307      	movs	r3, #7
 8001d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4808      	ldr	r0, [pc, #32]	@ (8001d34 <USART2_GPIO_Init+0x8c>)
 8001d12:	f000 fe11 	bl	8002938 <HAL_GPIO_Init>

    /* Configure PD6 for USART2 RX */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d16:	2340      	movs	r3, #64	@ 0x40
 8001d18:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4804      	ldr	r0, [pc, #16]	@ (8001d34 <USART2_GPIO_Init+0x8c>)
 8001d22:	f000 fe09 	bl	8002938 <HAL_GPIO_Init>
}
 8001d26:	bf00      	nop
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020c00 	.word	0x40020c00

08001d38 <UART5_Init>:

/**
 * @brief Initialize UART5 with default parameters.
 * @retval true if initialization is successful, false otherwise.
 */
bool_t UART5_Init(void){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
    UART5_GPIO_Init();
 8001d3e:	f7ff ff59 	bl	8001bf4 <UART5_GPIO_Init>

    bool_t rtrn = true;
 8001d42:	2301      	movs	r3, #1
 8001d44:	71fb      	strb	r3, [r7, #7]

    huart5.Instance = UART5;
 8001d46:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <UART5_Init+0x74>)
 8001d48:	4a19      	ldr	r2, [pc, #100]	@ (8001db0 <UART5_Init+0x78>)
 8001d4a:	601a      	str	r2, [r3, #0]
    huart5.Init.BaudRate = 9600;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <UART5_Init+0x74>)
 8001d4e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d52:	605a      	str	r2, [r3, #4]
    huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d54:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <UART5_Init+0x74>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
    huart5.Init.StopBits = UART_STOPBITS_1;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <UART5_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
    huart5.Init.Parity = UART_PARITY_NONE;
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <UART5_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
    huart5.Init.Mode = UART_MODE_TX_RX;
 8001d66:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <UART5_Init+0x74>)
 8001d68:	220c      	movs	r2, #12
 8001d6a:	615a      	str	r2, [r3, #20]
    huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <UART5_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <UART5_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart5) != HAL_OK) { rtrn = false; }
 8001d78:	480c      	ldr	r0, [pc, #48]	@ (8001dac <UART5_Init+0x74>)
 8001d7a:	f001 fd9b 	bl	80038b4 <HAL_UART_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <UART5_Init+0x50>
 8001d84:	2300      	movs	r3, #0
 8001d86:	71fb      	strb	r3, [r7, #7]

    // Enable UART5 interrupts
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	2035      	movs	r0, #53	@ 0x35
 8001d8e:	f000 fd0a 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001d92:	2035      	movs	r0, #53	@ 0x35
 8001d94:	f000 fd23 	bl	80027de <HAL_NVIC_EnableIRQ>
    HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_char_gps, 1);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4906      	ldr	r1, [pc, #24]	@ (8001db4 <UART5_Init+0x7c>)
 8001d9c:	4803      	ldr	r0, [pc, #12]	@ (8001dac <UART5_Init+0x74>)
 8001d9e:	f001 fe68 	bl	8003a72 <HAL_UART_Receive_IT>

    return rtrn;
 8001da2:	79fb      	ldrb	r3, [r7, #7]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000d38 	.word	0x20000d38
 8001db0:	40005000 	.word	0x40005000
 8001db4:	20000d7c 	.word	0x20000d7c

08001db8 <USART2_Init>:

/**
 * @brief Initialize USART2 with default parameters.
 * @retval true if initialization is successful, false otherwise.
 */
bool_t USART2_Init(void){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	@ 0x30
 8001dbc:	af00      	add	r7, sp, #0
    USART2_GPIO_Init();
 8001dbe:	f7ff ff73 	bl	8001ca8 <USART2_GPIO_Init>

    bool_t rtrn = true;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    char baudRate[10] = {};
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dcc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	809a      	strh	r2, [r3, #4]
    char wordLength[10] = {};
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	809a      	strh	r2, [r3, #4]
    char stopBits[10] = {};
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	809a      	strh	r2, [r3, #4]
    char parityBits[10] = {};
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	809a      	strh	r2, [r3, #4]

    huart2.Instance = USART2;
 8001dfe:	4b40      	ldr	r3, [pc, #256]	@ (8001f00 <USART2_Init+0x148>)
 8001e00:	4a40      	ldr	r2, [pc, #256]	@ (8001f04 <USART2_Init+0x14c>)
 8001e02:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001e04:	4b3e      	ldr	r3, [pc, #248]	@ (8001f00 <USART2_Init+0x148>)
 8001e06:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e0a:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f00 <USART2_Init+0x148>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001e12:	4b3b      	ldr	r3, [pc, #236]	@ (8001f00 <USART2_Init+0x148>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001e18:	4b39      	ldr	r3, [pc, #228]	@ (8001f00 <USART2_Init+0x148>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001e1e:	4b38      	ldr	r3, [pc, #224]	@ (8001f00 <USART2_Init+0x148>)
 8001e20:	220c      	movs	r2, #12
 8001e22:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e24:	4b36      	ldr	r3, [pc, #216]	@ (8001f00 <USART2_Init+0x148>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2a:	4b35      	ldr	r3, [pc, #212]	@ (8001f00 <USART2_Init+0x148>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) { rtrn = false; }
 8001e30:	4833      	ldr	r0, [pc, #204]	@ (8001f00 <USART2_Init+0x148>)
 8001e32:	f001 fd3f 	bl	80038b4 <HAL_UART_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <USART2_Init+0x8a>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Enable USART2 interrupts
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2026      	movs	r0, #38	@ 0x26
 8001e48:	f000 fcad 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e4c:	2026      	movs	r0, #38	@ 0x26
 8001e4e:	f000 fcc6 	bl	80027de <HAL_NVIC_EnableIRQ>
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_char_pc, 1);
 8001e52:	2201      	movs	r2, #1
 8001e54:	492c      	ldr	r1, [pc, #176]	@ (8001f08 <USART2_Init+0x150>)
 8001e56:	482a      	ldr	r0, [pc, #168]	@ (8001f00 <USART2_Init+0x148>)
 8001e58:	f001 fe0b 	bl	8003a72 <HAL_UART_Receive_IT>

    sprintf(baudRate, "%d", (int)huart2.Init.BaudRate);
 8001e5c:	4b28      	ldr	r3, [pc, #160]	@ (8001f00 <USART2_Init+0x148>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	461a      	mov	r2, r3
 8001e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e66:	4929      	ldr	r1, [pc, #164]	@ (8001f0c <USART2_Init+0x154>)
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f003 ff65 	bl	8005d38 <siprintf>
    sprintf(wordLength, "%d", (int)huart2.Init.WordLength);
 8001e6e:	4b24      	ldr	r3, [pc, #144]	@ (8001f00 <USART2_Init+0x148>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	461a      	mov	r2, r3
 8001e74:	f107 0318 	add.w	r3, r7, #24
 8001e78:	4924      	ldr	r1, [pc, #144]	@ (8001f0c <USART2_Init+0x154>)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 ff5c 	bl	8005d38 <siprintf>
    sprintf(stopBits, "%d", (int)huart2.Init.StopBits);
 8001e80:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <USART2_Init+0x148>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	461a      	mov	r2, r3
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4920      	ldr	r1, [pc, #128]	@ (8001f0c <USART2_Init+0x154>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 ff53 	bl	8005d38 <siprintf>
    sprintf(parityBits, "%d", (int)huart2.Init.Parity);
 8001e92:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <USART2_Init+0x148>)
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	461a      	mov	r2, r3
 8001e98:	463b      	mov	r3, r7
 8001e9a:	491c      	ldr	r1, [pc, #112]	@ (8001f0c <USART2_Init+0x154>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 ff4b 	bl	8005d38 <siprintf>

    USART2_Send_String((uint8_t*)"Uart Inicializada correctamente\n\r");
 8001ea2:	481b      	ldr	r0, [pc, #108]	@ (8001f10 <USART2_Init+0x158>)
 8001ea4:	f000 f858 	bl	8001f58 <USART2_Send_String>
    USART2_Send_String((uint8_t*)"-----Parametros Configurados-----\n\r");
 8001ea8:	481a      	ldr	r0, [pc, #104]	@ (8001f14 <USART2_Init+0x15c>)
 8001eaa:	f000 f855 	bl	8001f58 <USART2_Send_String>
    USART2_Send_String((uint8_t*)"\n\rBaud rate: ");
 8001eae:	481a      	ldr	r0, [pc, #104]	@ (8001f18 <USART2_Init+0x160>)
 8001eb0:	f000 f852 	bl	8001f58 <USART2_Send_String>
    USART2_Send_String((uint8_t*)baudRate);
 8001eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 f84d 	bl	8001f58 <USART2_Send_String>
    USART2_Send_String((uint8_t*)"\n\rWord Length: ");
 8001ebe:	4817      	ldr	r0, [pc, #92]	@ (8001f1c <USART2_Init+0x164>)
 8001ec0:	f000 f84a 	bl	8001f58 <USART2_Send_String>
    USART2_Send_String((uint8_t*)wordLength);
 8001ec4:	f107 0318 	add.w	r3, r7, #24
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 f845 	bl	8001f58 <USART2_Send_String>
    USART2_Send_String((uint8_t*)"\n\rStop Bits: ");
 8001ece:	4814      	ldr	r0, [pc, #80]	@ (8001f20 <USART2_Init+0x168>)
 8001ed0:	f000 f842 	bl	8001f58 <USART2_Send_String>
    USART2_Send_String((uint8_t*)stopBits);
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f83d 	bl	8001f58 <USART2_Send_String>
    USART2_Send_String((uint8_t*)"\n\rParity: ");
 8001ede:	4811      	ldr	r0, [pc, #68]	@ (8001f24 <USART2_Init+0x16c>)
 8001ee0:	f000 f83a 	bl	8001f58 <USART2_Send_String>
    USART2_Send_String((uint8_t*)parityBits);
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f836 	bl	8001f58 <USART2_Send_String>
    USART2_Send_String((uint8_t*)"\n\r");
 8001eec:	480e      	ldr	r0, [pc, #56]	@ (8001f28 <USART2_Init+0x170>)
 8001eee:	f000 f833 	bl	8001f58 <USART2_Send_String>

    return rtrn;
 8001ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3730      	adds	r7, #48	@ 0x30
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000cf4 	.word	0x20000cf4
 8001f04:	40004400 	.word	0x40004400
 8001f08:	20000d7d 	.word	0x20000d7d
 8001f0c:	08008068 	.word	0x08008068
 8001f10:	0800806c 	.word	0x0800806c
 8001f14:	08008090 	.word	0x08008090
 8001f18:	080080b4 	.word	0x080080b4
 8001f1c:	080080c4 	.word	0x080080c4
 8001f20:	080080d4 	.word	0x080080d4
 8001f24:	080080e4 	.word	0x080080e4
 8001f28:	080080f0 	.word	0x080080f0

08001f2c <UART5_Send_String>:

/**
 * @brief Transmit a string via UART5.
 * @param pstring Pointer to the string to transmit.
 */
void UART5_Send_String(uint8_t * pstring){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart5, (uint8_t*)pstring, strlen((const char*)pstring), UART_MAX_TIMEOUT);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7fe f95b 	bl	80001f0 <strlen>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4803      	ldr	r0, [pc, #12]	@ (8001f54 <UART5_Send_String+0x28>)
 8001f46:	f001 fd02 	bl	800394e <HAL_UART_Transmit>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000d38 	.word	0x20000d38

08001f58 <USART2_Send_String>:

/**
 * @brief Transmit a string via USART2.
 * @param pstring Pointer to the string to transmit.
 */
void USART2_Send_String(uint8_t * pstring){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)pstring, strlen((const char*)pstring), UART_MAX_TIMEOUT);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7fe f945 	bl	80001f0 <strlen>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4803      	ldr	r0, [pc, #12]	@ (8001f80 <USART2_Send_String+0x28>)
 8001f72:	f001 fcec 	bl	800394e <HAL_UART_Transmit>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000cf4 	.word	0x20000cf4

08001f84 <UART5_IRQHandler>:
}

/**
 * @brief UART5 IRQ handler.
 */
void UART5_IRQHandler(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart5);
 8001f88:	4802      	ldr	r0, [pc, #8]	@ (8001f94 <UART5_IRQHandler+0x10>)
 8001f8a:	f001 fda3 	bl	8003ad4 <HAL_UART_IRQHandler>
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000d38 	.word	0x20000d38

08001f98 <USART2_IRQHandler>:

/**
 * @brief USART2 IRQ handler.
 */
void USART2_IRQHandler(void) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart2);
 8001f9c:	4802      	ldr	r0, [pc, #8]	@ (8001fa8 <USART2_IRQHandler+0x10>)
 8001f9e:	f001 fd99 	bl	8003ad4 <HAL_UART_IRQHandler>
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000cf4 	.word	0x20000cf4

08001fac <HAL_UART_RxCpltCallback>:

/**
 * @brief UART receive complete callback function.
 * @param huart Pointer to the UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a57      	ldr	r2, [pc, #348]	@ (8002118 <HAL_UART_RxCpltCallback+0x16c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d160      	bne.n	8002080 <HAL_UART_RxCpltCallback+0xd4>
        if (rx_char_gps == '$') {
 8001fbe:	4b57      	ldr	r3, [pc, #348]	@ (800211c <HAL_UART_RxCpltCallback+0x170>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b24      	cmp	r3, #36	@ 0x24
 8001fc4:	d14b      	bne.n	800205e <HAL_UART_RxCpltCallback+0xb2>
            if (nmea_queue.count < NMEA_QUEUE_SIZE) {
 8001fc6:	4b56      	ldr	r3, [pc, #344]	@ (8002120 <HAL_UART_RxCpltCallback+0x174>)
 8001fc8:	f893 39f8 	ldrb.w	r3, [r3, #2552]	@ 0x9f8
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	d833      	bhi.n	8002038 <HAL_UART_RxCpltCallback+0x8c>
                // Manually copy the incoming buffer to the queue
                for (uint8_t i = 0; i < NMEA_BUFFER_SIZE; i++) {
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e012      	b.n	8001ffc <HAL_UART_RxCpltCallback+0x50>
                    nmea_queue.buffer[nmea_queue.tail][i] = nmea_incoming_buffer[i];
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	4a51      	ldr	r2, [pc, #324]	@ (8002120 <HAL_UART_RxCpltCallback+0x174>)
 8001fda:	f892 29f7 	ldrb.w	r2, [r2, #2551]	@ 0x9f7
 8001fde:	4610      	mov	r0, r2
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	4950      	ldr	r1, [pc, #320]	@ (8002124 <HAL_UART_RxCpltCallback+0x178>)
 8001fe4:	5ccc      	ldrb	r4, [r1, r3]
 8001fe6:	494e      	ldr	r1, [pc, #312]	@ (8002120 <HAL_UART_RxCpltCallback+0x174>)
 8001fe8:	4603      	mov	r3, r0
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	1a1b      	subs	r3, r3, r0
 8001fee:	440b      	add	r3, r1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4622      	mov	r2, r4
 8001ff4:	701a      	strb	r2, [r3, #0]
                for (uint8_t i = 0; i < NMEA_BUFFER_SIZE; i++) {
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2bff      	cmp	r3, #255	@ 0xff
 8002000:	d1e9      	bne.n	8001fd6 <HAL_UART_RxCpltCallback+0x2a>
                }
                nmea_queue.tail = (nmea_queue.tail + 1) % NMEA_QUEUE_SIZE;
 8002002:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <HAL_UART_RxCpltCallback+0x174>)
 8002004:	f893 39f7 	ldrb.w	r3, [r3, #2551]	@ 0x9f7
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	4b47      	ldr	r3, [pc, #284]	@ (8002128 <HAL_UART_RxCpltCallback+0x17c>)
 800200c:	fb83 1302 	smull	r1, r3, r3, r2
 8002010:	1099      	asrs	r1, r3, #2
 8002012:	17d3      	asrs	r3, r2, #31
 8002014:	1ac9      	subs	r1, r1, r3
 8002016:	460b      	mov	r3, r1
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	1ad1      	subs	r1, r2, r3
 8002020:	b2ca      	uxtb	r2, r1
 8002022:	4b3f      	ldr	r3, [pc, #252]	@ (8002120 <HAL_UART_RxCpltCallback+0x174>)
 8002024:	f883 29f7 	strb.w	r2, [r3, #2551]	@ 0x9f7
                nmea_queue.count++;
 8002028:	4b3d      	ldr	r3, [pc, #244]	@ (8002120 <HAL_UART_RxCpltCallback+0x174>)
 800202a:	f893 39f8 	ldrb.w	r3, [r3, #2552]	@ 0x9f8
 800202e:	3301      	adds	r3, #1
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b3b      	ldr	r3, [pc, #236]	@ (8002120 <HAL_UART_RxCpltCallback+0x174>)
 8002034:	f883 29f8 	strb.w	r2, [r3, #2552]	@ 0x9f8
            }
            // Clear the incoming buffer
            for (uint8_t i = 0; i < NMEA_BUFFER_SIZE; i++) {
 8002038:	2300      	movs	r3, #0
 800203a:	73bb      	strb	r3, [r7, #14]
 800203c:	e006      	b.n	800204c <HAL_UART_RxCpltCallback+0xa0>
                nmea_incoming_buffer[i] = 0;
 800203e:	7bbb      	ldrb	r3, [r7, #14]
 8002040:	4a38      	ldr	r2, [pc, #224]	@ (8002124 <HAL_UART_RxCpltCallback+0x178>)
 8002042:	2100      	movs	r1, #0
 8002044:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i = 0; i < NMEA_BUFFER_SIZE; i++) {
 8002046:	7bbb      	ldrb	r3, [r7, #14]
 8002048:	3301      	adds	r3, #1
 800204a:	73bb      	strb	r3, [r7, #14]
 800204c:	7bbb      	ldrb	r3, [r7, #14]
 800204e:	2bff      	cmp	r3, #255	@ 0xff
 8002050:	d1f5      	bne.n	800203e <HAL_UART_RxCpltCallback+0x92>
            }
            nmea_index = 0;
 8002052:	4b36      	ldr	r3, [pc, #216]	@ (800212c <HAL_UART_RxCpltCallback+0x180>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
            nmea_available = true;
 8002058:	4b35      	ldr	r3, [pc, #212]	@ (8002130 <HAL_UART_RxCpltCallback+0x184>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
        }
        nmea_incoming_buffer[nmea_index++] = rx_char_gps;
 800205e:	4b33      	ldr	r3, [pc, #204]	@ (800212c <HAL_UART_RxCpltCallback+0x180>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	b2d1      	uxtb	r1, r2
 8002066:	4a31      	ldr	r2, [pc, #196]	@ (800212c <HAL_UART_RxCpltCallback+0x180>)
 8002068:	7011      	strb	r1, [r2, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <HAL_UART_RxCpltCallback+0x170>)
 800206e:	7819      	ldrb	r1, [r3, #0]
 8002070:	4b2c      	ldr	r3, [pc, #176]	@ (8002124 <HAL_UART_RxCpltCallback+0x178>)
 8002072:	5499      	strb	r1, [r3, r2]
        // Continue receiving the next character
        HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_char_gps, 1);
 8002074:	2201      	movs	r2, #1
 8002076:	4929      	ldr	r1, [pc, #164]	@ (800211c <HAL_UART_RxCpltCallback+0x170>)
 8002078:	482e      	ldr	r0, [pc, #184]	@ (8002134 <HAL_UART_RxCpltCallback+0x188>)
 800207a:	f001 fcfa 	bl	8003a72 <HAL_UART_Receive_IT>
        }

        // Continue receiving the next character
        HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_char_pc, 1);
    }
}
 800207e:	e047      	b.n	8002110 <HAL_UART_RxCpltCallback+0x164>
    } else if (huart->Instance == USART2) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2c      	ldr	r2, [pc, #176]	@ (8002138 <HAL_UART_RxCpltCallback+0x18c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d142      	bne.n	8002110 <HAL_UART_RxCpltCallback+0x164>
        if (rx_char_pc == '$') {
 800208a:	4b2c      	ldr	r3, [pc, #176]	@ (800213c <HAL_UART_RxCpltCallback+0x190>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b24      	cmp	r3, #36	@ 0x24
 8002090:	d105      	bne.n	800209e <HAL_UART_RxCpltCallback+0xf2>
            receiving_data = true;
 8002092:	4b2b      	ldr	r3, [pc, #172]	@ (8002140 <HAL_UART_RxCpltCallback+0x194>)
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
            pc_index = 0; // Reset index to start storing the new sentence
 8002098:	4b2a      	ldr	r3, [pc, #168]	@ (8002144 <HAL_UART_RxCpltCallback+0x198>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
        if (receiving_data) {
 800209e:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <HAL_UART_RxCpltCallback+0x194>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d02f      	beq.n	8002106 <HAL_UART_RxCpltCallback+0x15a>
            pc_incoming_buffer[pc_index++] = rx_char_pc;
 80020a6:	4b27      	ldr	r3, [pc, #156]	@ (8002144 <HAL_UART_RxCpltCallback+0x198>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	b2d1      	uxtb	r1, r2
 80020ae:	4a25      	ldr	r2, [pc, #148]	@ (8002144 <HAL_UART_RxCpltCallback+0x198>)
 80020b0:	7011      	strb	r1, [r2, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b21      	ldr	r3, [pc, #132]	@ (800213c <HAL_UART_RxCpltCallback+0x190>)
 80020b6:	7819      	ldrb	r1, [r3, #0]
 80020b8:	4b23      	ldr	r3, [pc, #140]	@ (8002148 <HAL_UART_RxCpltCallback+0x19c>)
 80020ba:	5499      	strb	r1, [r3, r2]
            if (rx_char_pc == '\r') {
 80020bc:	4b1f      	ldr	r3, [pc, #124]	@ (800213c <HAL_UART_RxCpltCallback+0x190>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b0d      	cmp	r3, #13
 80020c2:	d120      	bne.n	8002106 <HAL_UART_RxCpltCallback+0x15a>
                receiving_data = false; // Stop accumulating
 80020c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002140 <HAL_UART_RxCpltCallback+0x194>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
                pc_incoming_buffer[pc_index++] = '\0'; // Null-terminate the buffer
 80020ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <HAL_UART_RxCpltCallback+0x198>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	b2d1      	uxtb	r1, r2
 80020d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002144 <HAL_UART_RxCpltCallback+0x198>)
 80020d4:	7011      	strb	r1, [r2, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <HAL_UART_RxCpltCallback+0x19c>)
 80020da:	2100      	movs	r1, #0
 80020dc:	5499      	strb	r1, [r3, r2]
                for (uint8_t i = 0; i < pc_index; i++) {
 80020de:	2300      	movs	r3, #0
 80020e0:	737b      	strb	r3, [r7, #13]
 80020e2:	e008      	b.n	80020f6 <HAL_UART_RxCpltCallback+0x14a>
                    pc_ready_buffer[i] = pc_incoming_buffer[i];
 80020e4:	7b7a      	ldrb	r2, [r7, #13]
 80020e6:	7b7b      	ldrb	r3, [r7, #13]
 80020e8:	4917      	ldr	r1, [pc, #92]	@ (8002148 <HAL_UART_RxCpltCallback+0x19c>)
 80020ea:	5c89      	ldrb	r1, [r1, r2]
 80020ec:	4a17      	ldr	r2, [pc, #92]	@ (800214c <HAL_UART_RxCpltCallback+0x1a0>)
 80020ee:	54d1      	strb	r1, [r2, r3]
                for (uint8_t i = 0; i < pc_index; i++) {
 80020f0:	7b7b      	ldrb	r3, [r7, #13]
 80020f2:	3301      	adds	r3, #1
 80020f4:	737b      	strb	r3, [r7, #13]
 80020f6:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <HAL_UART_RxCpltCallback+0x198>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	7b7a      	ldrb	r2, [r7, #13]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d3f1      	bcc.n	80020e4 <HAL_UART_RxCpltCallback+0x138>
                pc_ready = true;
 8002100:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <HAL_UART_RxCpltCallback+0x1a4>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_char_pc, 1);
 8002106:	2201      	movs	r2, #1
 8002108:	490c      	ldr	r1, [pc, #48]	@ (800213c <HAL_UART_RxCpltCallback+0x190>)
 800210a:	4812      	ldr	r0, [pc, #72]	@ (8002154 <HAL_UART_RxCpltCallback+0x1a8>)
 800210c:	f001 fcb1 	bl	8003a72 <HAL_UART_Receive_IT>
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bd90      	pop	{r4, r7, pc}
 8002118:	40005000 	.word	0x40005000
 800211c:	20000d7c 	.word	0x20000d7c
 8002120:	200002f8 	.word	0x200002f8
 8002124:	20000d80 	.word	0x20000d80
 8002128:	66666667 	.word	0x66666667
 800212c:	20000e7f 	.word	0x20000e7f
 8002130:	20000d7e 	.word	0x20000d7e
 8002134:	20000d38 	.word	0x20000d38
 8002138:	40004400 	.word	0x40004400
 800213c:	20000d7d 	.word	0x20000d7d
 8002140:	20000f82 	.word	0x20000f82
 8002144:	20000f80 	.word	0x20000f80
 8002148:	20000e80 	.word	0x20000e80
 800214c:	20000f00 	.word	0x20000f00
 8002150:	20000f81 	.word	0x20000f81
 8002154:	20000cf4 	.word	0x20000cf4

08002158 <pc_command_received>:

/**
 * @brief Check if a PC command has been received.
 * @retval true if a command is ready, false otherwise.
 */
bool_t pc_command_received(void){
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
    bool_t rtrn = false;
 800215e:	2300      	movs	r3, #0
 8002160:	71fb      	strb	r3, [r7, #7]
    if (pc_ready == true){
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <pc_command_received+0x2c>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <pc_command_received+0x1c>
        rtrn = true;
 800216a:	2301      	movs	r3, #1
 800216c:	71fb      	strb	r3, [r7, #7]
        pc_ready = false;
 800216e:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <pc_command_received+0x2c>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
    }
    return rtrn;
 8002174:	79fb      	ldrb	r3, [r7, #7]
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000f81 	.word	0x20000f81

08002188 <get_pc_command>:

/**
 * @brief Get the last received PC command.
 * @retval Pointer to the PC command string.
 */
char* get_pc_command(void) {
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
    return (char*) pc_ready_buffer;
 800218c:	4b02      	ldr	r3, [pc, #8]	@ (8002198 <get_pc_command+0x10>)
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	20000f00 	.word	0x20000f00

0800219c <nmea_sentence_received>:

/**
 * @brief Check if an NMEA sentence is available.
 * @retval true if an NMEA sentence is available, false otherwise.
 */
bool_t nmea_sentence_received(void) {
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
    return nmea_queue.count > 0;
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <nmea_sentence_received+0x20>)
 80021a2:	f893 39f8 	ldrb.w	r3, [r3, #2552]	@ 0x9f8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bf14      	ite	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	2300      	moveq	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	200002f8 	.word	0x200002f8

080021c0 <dequeue_nmea_message>:
/**
 * @brief Dequeue an NMEA message.
 * @param message Pointer to store the dequeued message.
 * @retval true if the message was successfully dequeued, false if the queue is empty.
 */
bool_t dequeue_nmea_message(uint8_t* message) {
 80021c0:	b490      	push	{r4, r7}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    if (nmea_queue.count > 0) {
 80021c8:	4b20      	ldr	r3, [pc, #128]	@ (800224c <dequeue_nmea_message+0x8c>)
 80021ca:	f893 39f8 	ldrb.w	r3, [r3, #2552]	@ 0x9f8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d035      	beq.n	800223e <dequeue_nmea_message+0x7e>
        // Manually copy the message from the queue buffer
        for (uint8_t i = 0; i < NMEA_BUFFER_SIZE; i++) {
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	e012      	b.n	80021fe <dequeue_nmea_message+0x3e>
            message[i] = nmea_queue.buffer[nmea_queue.head][i];
 80021d8:	4b1c      	ldr	r3, [pc, #112]	@ (800224c <dequeue_nmea_message+0x8c>)
 80021da:	f893 39f6 	ldrb.w	r3, [r3, #2550]	@ 0x9f6
 80021de:	461c      	mov	r4, r3
 80021e0:	7bf9      	ldrb	r1, [r7, #15]
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	441a      	add	r2, r3
 80021e8:	4818      	ldr	r0, [pc, #96]	@ (800224c <dequeue_nmea_message+0x8c>)
 80021ea:	4623      	mov	r3, r4
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	1b1b      	subs	r3, r3, r4
 80021f0:	4403      	add	r3, r0
 80021f2:	440b      	add	r3, r1
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	7013      	strb	r3, [r2, #0]
        for (uint8_t i = 0; i < NMEA_BUFFER_SIZE; i++) {
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	3301      	adds	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	2bff      	cmp	r3, #255	@ 0xff
 8002202:	d1e9      	bne.n	80021d8 <dequeue_nmea_message+0x18>
        }
        nmea_queue.head = (nmea_queue.head + 1) % NMEA_QUEUE_SIZE;
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <dequeue_nmea_message+0x8c>)
 8002206:	f893 39f6 	ldrb.w	r3, [r3, #2550]	@ 0x9f6
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <dequeue_nmea_message+0x90>)
 800220e:	fb83 1302 	smull	r1, r3, r3, r2
 8002212:	1099      	asrs	r1, r3, #2
 8002214:	17d3      	asrs	r3, r2, #31
 8002216:	1ac9      	subs	r1, r1, r3
 8002218:	460b      	mov	r3, r1
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	1ad1      	subs	r1, r2, r3
 8002222:	b2ca      	uxtb	r2, r1
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <dequeue_nmea_message+0x8c>)
 8002226:	f883 29f6 	strb.w	r2, [r3, #2550]	@ 0x9f6
        nmea_queue.count--;
 800222a:	4b08      	ldr	r3, [pc, #32]	@ (800224c <dequeue_nmea_message+0x8c>)
 800222c:	f893 39f8 	ldrb.w	r3, [r3, #2552]	@ 0x9f8
 8002230:	3b01      	subs	r3, #1
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <dequeue_nmea_message+0x8c>)
 8002236:	f883 29f8 	strb.w	r2, [r3, #2552]	@ 0x9f8
        return true;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <dequeue_nmea_message+0x80>
    }
    return false; // Queue is empty
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bc90      	pop	{r4, r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	200002f8 	.word	0x200002f8
 8002250:	66666667 	.word	0x66666667

08002254 <get_nmea_sentence>:

/**
 * @brief Get the next NMEA sentence.
 * @retval Pointer to the NMEA sentence string, or NULL if no message is available.
 */
char* get_nmea_sentence(void) {
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
    static uint8_t message[NMEA_BUFFER_SIZE];
    if (dequeue_nmea_message(message)) {
 8002258:	4805      	ldr	r0, [pc, #20]	@ (8002270 <get_nmea_sentence+0x1c>)
 800225a:	f7ff ffb1 	bl	80021c0 <dequeue_nmea_message>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <get_nmea_sentence+0x14>
        return (char*)message;
 8002264:	4b02      	ldr	r3, [pc, #8]	@ (8002270 <get_nmea_sentence+0x1c>)
 8002266:	e000      	b.n	800226a <get_nmea_sentence+0x16>
    }
    return NULL; // No message available
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000f84 	.word	0x20000f84

08002274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002278:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <SystemInit+0x60>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227e:	4a15      	ldr	r2, [pc, #84]	@ (80022d4 <SystemInit+0x60>)
 8002280:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002284:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002288:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <SystemInit+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a12      	ldr	r2, [pc, #72]	@ (80022d8 <SystemInit+0x64>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002294:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <SystemInit+0x64>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800229a:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <SystemInit+0x64>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a0e      	ldr	r2, [pc, #56]	@ (80022d8 <SystemInit+0x64>)
 80022a0:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80022a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80022aa:	4b0b      	ldr	r3, [pc, #44]	@ (80022d8 <SystemInit+0x64>)
 80022ac:	4a0b      	ldr	r2, [pc, #44]	@ (80022dc <SystemInit+0x68>)
 80022ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80022b0:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <SystemInit+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a08      	ldr	r2, [pc, #32]	@ (80022d8 <SystemInit+0x64>)
 80022b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <SystemInit+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022c2:	4b04      	ldr	r3, [pc, #16]	@ (80022d4 <SystemInit+0x60>)
 80022c4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80022c8:	609a      	str	r2, [r3, #8]
#endif
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00
 80022d8:	40023800 	.word	0x40023800
 80022dc:	24003010 	.word	0x24003010

080022e0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80022f2:	bf00      	nop
 80022f4:	e7fd      	b.n	80022f2 <HardFault_Handler+0x4>

080022f6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80022fa:	bf00      	nop
 80022fc:	e7fd      	b.n	80022fa <MemManage_Handler+0x4>

080022fe <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002302:	bf00      	nop
 8002304:	e7fd      	b.n	8002302 <BusFault_Handler+0x4>

08002306 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800230a:	bf00      	nop
 800230c:	e7fd      	b.n	800230a <UsageFault_Handler+0x4>

0800230e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800233c:	f000 f914 	bl	8002568 <HAL_IncTick>
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}

08002344 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
	return 1;
 8002348:	2301      	movs	r3, #1
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_kill>:

int _kill(int pid, int sig)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800235e:	f003 fdc1 	bl	8005ee4 <__errno>
 8002362:	4603      	mov	r3, r0
 8002364:	2216      	movs	r2, #22
 8002366:	601a      	str	r2, [r3, #0]
	return -1;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_exit>:

void _exit (int status)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800237c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ffe7 	bl	8002354 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002386:	bf00      	nop
 8002388:	e7fd      	b.n	8002386 <_exit+0x12>

0800238a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	e00a      	b.n	80023b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800239c:	f3af 8000 	nop.w
 80023a0:	4601      	mov	r1, r0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	60ba      	str	r2, [r7, #8]
 80023a8:	b2ca      	uxtb	r2, r1
 80023aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	3301      	adds	r3, #1
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	dbf0      	blt.n	800239c <_read+0x12>
	}

return len;
 80023ba:	687b      	ldr	r3, [r7, #4]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	e009      	b.n	80023ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	60ba      	str	r2, [r7, #8]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	3301      	adds	r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	dbf1      	blt.n	80023d6 <_write+0x12>
	}
	return len;
 80023f2:	687b      	ldr	r3, [r7, #4]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <_close>:

int _close(int file)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	return -1;
 8002404:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002424:	605a      	str	r2, [r3, #4]
	return 0;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_isatty>:

int _isatty(int file)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	return 1;
 800243c:	2301      	movs	r3, #1
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
	return 0;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800246c:	4a14      	ldr	r2, [pc, #80]	@ (80024c0 <_sbrk+0x5c>)
 800246e:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <_sbrk+0x60>)
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002478:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <_sbrk+0x64>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002480:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <_sbrk+0x64>)
 8002482:	4a12      	ldr	r2, [pc, #72]	@ (80024cc <_sbrk+0x68>)
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002486:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <_sbrk+0x64>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	429a      	cmp	r2, r3
 8002492:	d207      	bcs.n	80024a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002494:	f003 fd26 	bl	8005ee4 <__errno>
 8002498:	4603      	mov	r3, r0
 800249a:	220c      	movs	r2, #12
 800249c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024a2:	e009      	b.n	80024b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a4:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <_sbrk+0x64>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024aa:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <_sbrk+0x64>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	4a05      	ldr	r2, [pc, #20]	@ (80024c8 <_sbrk+0x64>)
 80024b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024b6:	68fb      	ldr	r3, [r7, #12]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20030000 	.word	0x20030000
 80024c4:	00000400 	.word	0x00000400
 80024c8:	20001084 	.word	0x20001084
 80024cc:	200011d8 	.word	0x200011d8

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_Init+0x34>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002504 <HAL_Init+0x34>)
 80024da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024de:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e0:	4b08      	ldr	r3, [pc, #32]	@ (8002504 <HAL_Init+0x34>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a07      	ldr	r2, [pc, #28]	@ (8002504 <HAL_Init+0x34>)
 80024e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ec:	2003      	movs	r0, #3
 80024ee:	f000 f94f 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f2:	200f      	movs	r0, #15
 80024f4:	f000 f808 	bl	8002508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f8:	f001 f9a0 	bl	800383c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023c00 	.word	0x40023c00

08002508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002510:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_InitTick+0x54>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_InitTick+0x58>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800251e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002522:	fbb2 f3f3 	udiv	r3, r2, r3
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f967 	bl	80027fa <HAL_SYSTICK_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e00e      	b.n	8002554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b0f      	cmp	r3, #15
 800253a:	d80a      	bhi.n	8002552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800253c:	2200      	movs	r2, #0
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002544:	f000 f92f 	bl	80027a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002548:	4a06      	ldr	r2, [pc, #24]	@ (8002564 <HAL_InitTick+0x5c>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000000 	.word	0x20000000
 8002560:	20000008 	.word	0x20000008
 8002564:	20000004 	.word	0x20000004

08002568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_IncTick+0x20>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <HAL_IncTick+0x24>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4413      	add	r3, r2
 8002578:	4a04      	ldr	r2, [pc, #16]	@ (800258c <HAL_IncTick+0x24>)
 800257a:	6013      	str	r3, [r2, #0]
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20000008 	.word	0x20000008
 800258c:	20001088 	.word	0x20001088

08002590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return uwTick;
 8002594:	4b03      	ldr	r3, [pc, #12]	@ (80025a4 <HAL_GetTick+0x14>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20001088 	.word	0x20001088

080025a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b0:	f7ff ffee 	bl	8002590 <HAL_GetTick>
 80025b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025c0:	d005      	beq.n	80025ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025c2:	4b0a      	ldr	r3, [pc, #40]	@ (80025ec <HAL_Delay+0x44>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4413      	add	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ce:	bf00      	nop
 80025d0:	f7ff ffde 	bl	8002590 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d8f7      	bhi.n	80025d0 <HAL_Delay+0x28>
  {
  }
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000008 	.word	0x20000008

080025f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800261c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002622:	4a04      	ldr	r2, [pc, #16]	@ (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	60d3      	str	r3, [r2, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800263c:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <__NVIC_GetPriorityGrouping+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 0307 	and.w	r3, r3, #7
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db0b      	blt.n	800267e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4907      	ldr	r1, [pc, #28]	@ (800268c <__NVIC_EnableIRQ+0x38>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	@ (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	@ (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	@ 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	@ 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800275c:	d301      	bcc.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <SysTick_Config+0x40>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	210f      	movs	r1, #15
 800276c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002770:	f7ff ff8e 	bl	8002690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002774:	4b05      	ldr	r3, [pc, #20]	@ (800278c <SysTick_Config+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277a:	4b04      	ldr	r3, [pc, #16]	@ (800278c <SysTick_Config+0x40>)
 800277c:	2207      	movs	r2, #7
 800277e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff29 	bl	80025f0 <__NVIC_SetPriorityGrouping>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b8:	f7ff ff3e 	bl	8002638 <__NVIC_GetPriorityGrouping>
 80027bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff ff8e 	bl	80026e4 <NVIC_EncodePriority>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff5d 	bl	8002690 <__NVIC_SetPriority>
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff31 	bl	8002654 <__NVIC_EnableIRQ>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffa2 	bl	800274c <SysTick_Config>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff feb6 	bl	8002590 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d008      	beq.n	8002844 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2280      	movs	r2, #128	@ 0x80
 8002836:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e052      	b.n	80028ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0216 	bic.w	r2, r2, #22
 8002852:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002862:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d103      	bne.n	8002874 <HAL_DMA_Abort+0x62>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002870:	2b00      	cmp	r3, #0
 8002872:	d007      	beq.n	8002884 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0208 	bic.w	r2, r2, #8
 8002882:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002894:	e013      	b.n	80028be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002896:	f7ff fe7b 	bl	8002590 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d90c      	bls.n	80028be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2220      	movs	r2, #32
 80028a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2203      	movs	r2, #3
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e015      	b.n	80028ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e4      	bne.n	8002896 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d0:	223f      	movs	r2, #63	@ 0x3f
 80028d2:	409a      	lsls	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d004      	beq.n	8002910 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2280      	movs	r2, #128	@ 0x80
 800290a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e00c      	b.n	800292a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2205      	movs	r2, #5
 8002914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	@ 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	e177      	b.n	8002c44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002954:	2201      	movs	r2, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	429a      	cmp	r2, r3
 800296e:	f040 8166 	bne.w	8002c3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d005      	beq.n	800298a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002986:	2b02      	cmp	r3, #2
 8002988:	d130      	bne.n	80029ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2203      	movs	r2, #3
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 0201 	and.w	r2, r3, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d017      	beq.n	8002a28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d123      	bne.n	8002a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	08da      	lsrs	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	08da      	lsrs	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3208      	adds	r2, #8
 8002a76:	69b9      	ldr	r1, [r7, #24]
 8002a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0203 	and.w	r2, r3, #3
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80c0 	beq.w	8002c3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b66      	ldr	r3, [pc, #408]	@ (8002c5c <HAL_GPIO_Init+0x324>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	4a65      	ldr	r2, [pc, #404]	@ (8002c5c <HAL_GPIO_Init+0x324>)
 8002ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ace:	4b63      	ldr	r3, [pc, #396]	@ (8002c5c <HAL_GPIO_Init+0x324>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ada:	4a61      	ldr	r2, [pc, #388]	@ (8002c60 <HAL_GPIO_Init+0x328>)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	220f      	movs	r2, #15
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a58      	ldr	r2, [pc, #352]	@ (8002c64 <HAL_GPIO_Init+0x32c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d037      	beq.n	8002b76 <HAL_GPIO_Init+0x23e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a57      	ldr	r2, [pc, #348]	@ (8002c68 <HAL_GPIO_Init+0x330>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d031      	beq.n	8002b72 <HAL_GPIO_Init+0x23a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a56      	ldr	r2, [pc, #344]	@ (8002c6c <HAL_GPIO_Init+0x334>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02b      	beq.n	8002b6e <HAL_GPIO_Init+0x236>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a55      	ldr	r2, [pc, #340]	@ (8002c70 <HAL_GPIO_Init+0x338>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d025      	beq.n	8002b6a <HAL_GPIO_Init+0x232>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a54      	ldr	r2, [pc, #336]	@ (8002c74 <HAL_GPIO_Init+0x33c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01f      	beq.n	8002b66 <HAL_GPIO_Init+0x22e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a53      	ldr	r2, [pc, #332]	@ (8002c78 <HAL_GPIO_Init+0x340>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d019      	beq.n	8002b62 <HAL_GPIO_Init+0x22a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a52      	ldr	r2, [pc, #328]	@ (8002c7c <HAL_GPIO_Init+0x344>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <HAL_GPIO_Init+0x226>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a51      	ldr	r2, [pc, #324]	@ (8002c80 <HAL_GPIO_Init+0x348>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00d      	beq.n	8002b5a <HAL_GPIO_Init+0x222>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a50      	ldr	r2, [pc, #320]	@ (8002c84 <HAL_GPIO_Init+0x34c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d007      	beq.n	8002b56 <HAL_GPIO_Init+0x21e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4f      	ldr	r2, [pc, #316]	@ (8002c88 <HAL_GPIO_Init+0x350>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <HAL_GPIO_Init+0x21a>
 8002b4e:	2309      	movs	r3, #9
 8002b50:	e012      	b.n	8002b78 <HAL_GPIO_Init+0x240>
 8002b52:	230a      	movs	r3, #10
 8002b54:	e010      	b.n	8002b78 <HAL_GPIO_Init+0x240>
 8002b56:	2308      	movs	r3, #8
 8002b58:	e00e      	b.n	8002b78 <HAL_GPIO_Init+0x240>
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	e00c      	b.n	8002b78 <HAL_GPIO_Init+0x240>
 8002b5e:	2306      	movs	r3, #6
 8002b60:	e00a      	b.n	8002b78 <HAL_GPIO_Init+0x240>
 8002b62:	2305      	movs	r3, #5
 8002b64:	e008      	b.n	8002b78 <HAL_GPIO_Init+0x240>
 8002b66:	2304      	movs	r3, #4
 8002b68:	e006      	b.n	8002b78 <HAL_GPIO_Init+0x240>
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e004      	b.n	8002b78 <HAL_GPIO_Init+0x240>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_Init+0x240>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_GPIO_Init+0x240>
 8002b76:	2300      	movs	r3, #0
 8002b78:	69fa      	ldr	r2, [r7, #28]
 8002b7a:	f002 0203 	and.w	r2, r2, #3
 8002b7e:	0092      	lsls	r2, r2, #2
 8002b80:	4093      	lsls	r3, r2
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b88:	4935      	ldr	r1, [pc, #212]	@ (8002c60 <HAL_GPIO_Init+0x328>)
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	3302      	adds	r3, #2
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b96:	4b3d      	ldr	r3, [pc, #244]	@ (8002c8c <HAL_GPIO_Init+0x354>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bba:	4a34      	ldr	r2, [pc, #208]	@ (8002c8c <HAL_GPIO_Init+0x354>)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bc0:	4b32      	ldr	r3, [pc, #200]	@ (8002c8c <HAL_GPIO_Init+0x354>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002be4:	4a29      	ldr	r2, [pc, #164]	@ (8002c8c <HAL_GPIO_Init+0x354>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bea:	4b28      	ldr	r3, [pc, #160]	@ (8002c8c <HAL_GPIO_Init+0x354>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c8c <HAL_GPIO_Init+0x354>)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	@ (8002c8c <HAL_GPIO_Init+0x354>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c38:	4a14      	ldr	r2, [pc, #80]	@ (8002c8c <HAL_GPIO_Init+0x354>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3301      	adds	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b0f      	cmp	r3, #15
 8002c48:	f67f ae84 	bls.w	8002954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3724      	adds	r7, #36	@ 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40013800 	.word	0x40013800
 8002c64:	40020000 	.word	0x40020000
 8002c68:	40020400 	.word	0x40020400
 8002c6c:	40020800 	.word	0x40020800
 8002c70:	40020c00 	.word	0x40020c00
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40021400 	.word	0x40021400
 8002c7c:	40021800 	.word	0x40021800
 8002c80:	40021c00 	.word	0x40021c00
 8002c84:	40022000 	.word	0x40022000
 8002c88:	40022400 	.word	0x40022400
 8002c8c:	40013c00 	.word	0x40013c00

08002c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e12b      	b.n	8002efa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f92e 	bl	8002f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	@ 0x24
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ce2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cf4:	f000 fdb6 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8002cf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4a81      	ldr	r2, [pc, #516]	@ (8002f04 <HAL_I2C_Init+0x274>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d807      	bhi.n	8002d14 <HAL_I2C_Init+0x84>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a80      	ldr	r2, [pc, #512]	@ (8002f08 <HAL_I2C_Init+0x278>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	bf94      	ite	ls
 8002d0c:	2301      	movls	r3, #1
 8002d0e:	2300      	movhi	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e006      	b.n	8002d22 <HAL_I2C_Init+0x92>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a7d      	ldr	r2, [pc, #500]	@ (8002f0c <HAL_I2C_Init+0x27c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bf94      	ite	ls
 8002d1c:	2301      	movls	r3, #1
 8002d1e:	2300      	movhi	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e0e7      	b.n	8002efa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4a78      	ldr	r2, [pc, #480]	@ (8002f10 <HAL_I2C_Init+0x280>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	0c9b      	lsrs	r3, r3, #18
 8002d34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4a6a      	ldr	r2, [pc, #424]	@ (8002f04 <HAL_I2C_Init+0x274>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d802      	bhi.n	8002d64 <HAL_I2C_Init+0xd4>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	3301      	adds	r3, #1
 8002d62:	e009      	b.n	8002d78 <HAL_I2C_Init+0xe8>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	4a69      	ldr	r2, [pc, #420]	@ (8002f14 <HAL_I2C_Init+0x284>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	099b      	lsrs	r3, r3, #6
 8002d76:	3301      	adds	r3, #1
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	495c      	ldr	r1, [pc, #368]	@ (8002f04 <HAL_I2C_Init+0x274>)
 8002d94:	428b      	cmp	r3, r1
 8002d96:	d819      	bhi.n	8002dcc <HAL_I2C_Init+0x13c>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e59      	subs	r1, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da6:	1c59      	adds	r1, r3, #1
 8002da8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002dac:	400b      	ands	r3, r1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_I2C_Init+0x138>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1e59      	subs	r1, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc6:	e051      	b.n	8002e6c <HAL_I2C_Init+0x1dc>
 8002dc8:	2304      	movs	r3, #4
 8002dca:	e04f      	b.n	8002e6c <HAL_I2C_Init+0x1dc>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d111      	bne.n	8002df8 <HAL_I2C_Init+0x168>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1e58      	subs	r0, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	440b      	add	r3, r1
 8002de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e012      	b.n	8002e1e <HAL_I2C_Init+0x18e>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1e58      	subs	r0, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	0099      	lsls	r1, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Init+0x196>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e022      	b.n	8002e6c <HAL_I2C_Init+0x1dc>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10e      	bne.n	8002e4c <HAL_I2C_Init+0x1bc>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1e58      	subs	r0, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	440b      	add	r3, r1
 8002e3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e4a:	e00f      	b.n	8002e6c <HAL_I2C_Init+0x1dc>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1e58      	subs	r0, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	0099      	lsls	r1, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	6809      	ldr	r1, [r1, #0]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6911      	ldr	r1, [r2, #16]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68d2      	ldr	r2, [r2, #12]
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	430b      	orrs	r3, r1
 8002eae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	000186a0 	.word	0x000186a0
 8002f08:	001e847f 	.word	0x001e847f
 8002f0c:	003d08ff 	.word	0x003d08ff
 8002f10:	431bde83 	.word	0x431bde83
 8002f14:	10624dd3 	.word	0x10624dd3

08002f18 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	461a      	mov	r2, r3
 8002f38:	460b      	mov	r3, r1
 8002f3a:	817b      	strh	r3, [r7, #10]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f40:	f7ff fb26 	bl	8002590 <HAL_GetTick>
 8002f44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	f040 80e0 	bne.w	8003114 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	2319      	movs	r3, #25
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	4970      	ldr	r1, [pc, #448]	@ (8003120 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fa92 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e0d3      	b.n	8003116 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_I2C_Master_Transmit+0x50>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e0cc      	b.n	8003116 <HAL_I2C_Master_Transmit+0x1ea>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d007      	beq.n	8002fa2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2221      	movs	r2, #33	@ 0x21
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	893a      	ldrh	r2, [r7, #8]
 8002fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4a50      	ldr	r2, [pc, #320]	@ (8003124 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fe4:	8979      	ldrh	r1, [r7, #10]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	6a3a      	ldr	r2, [r7, #32]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f9ca 	bl	8003384 <I2C_MasterRequestWrite>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e08d      	b.n	8003116 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003010:	e066      	b.n	80030e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	6a39      	ldr	r1, [r7, #32]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fb0c 	bl	8003634 <I2C_WaitOnTXEFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	2b04      	cmp	r3, #4
 8003028:	d107      	bne.n	800303a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003038:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e06b      	b.n	8003116 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b04      	cmp	r3, #4
 800307a:	d11b      	bne.n	80030b4 <HAL_I2C_Master_Transmit+0x188>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003080:	2b00      	cmp	r3, #0
 8003082:	d017      	beq.n	80030b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	6a39      	ldr	r1, [r7, #32]
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fafc 	bl	80036b6 <I2C_WaitOnBTFFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d107      	bne.n	80030dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e01a      	b.n	8003116 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d194      	bne.n	8003012 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	e000      	b.n	8003116 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
  }
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	00100002 	.word	0x00100002
 8003124:	ffff0000 	.word	0xffff0000

08003128 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	@ 0x28
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	460b      	mov	r3, r1
 8003136:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003138:	f7ff fa2a 	bl	8002590 <HAL_GetTick>
 800313c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800313e:	2301      	movs	r3, #1
 8003140:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	f040 8111 	bne.w	8003372 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2319      	movs	r3, #25
 8003156:	2201      	movs	r2, #1
 8003158:	4988      	ldr	r1, [pc, #544]	@ (800337c <HAL_I2C_IsDeviceReady+0x254>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f994 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003166:	2302      	movs	r3, #2
 8003168:	e104      	b.n	8003374 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_I2C_IsDeviceReady+0x50>
 8003174:	2302      	movs	r3, #2
 8003176:	e0fd      	b.n	8003374 <HAL_I2C_IsDeviceReady+0x24c>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d007      	beq.n	800319e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2224      	movs	r2, #36	@ 0x24
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a70      	ldr	r2, [pc, #448]	@ (8003380 <HAL_I2C_IsDeviceReady+0x258>)
 80031c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2200      	movs	r2, #0
 80031da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f952 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031f8:	d103      	bne.n	8003202 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003200:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e0b6      	b.n	8003374 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003206:	897b      	ldrh	r3, [r7, #10]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003214:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003216:	f7ff f9bb 	bl	8002590 <HAL_GetTick>
 800321a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b02      	cmp	r3, #2
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003240:	bf0c      	ite	eq
 8003242:	2301      	moveq	r3, #1
 8003244:	2300      	movne	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800324a:	e025      	b.n	8003298 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800324c:	f7ff f9a0 	bl	8002590 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d302      	bcc.n	8003262 <HAL_I2C_IsDeviceReady+0x13a>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	22a0      	movs	r2, #160	@ 0xa0
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b02      	cmp	r3, #2
 8003276:	bf0c      	ite	eq
 8003278:	2301      	moveq	r3, #1
 800327a:	2300      	movne	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80032a2:	d005      	beq.n	80032b0 <HAL_I2C_IsDeviceReady+0x188>
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <HAL_I2C_IsDeviceReady+0x188>
 80032aa:	7dbb      	ldrb	r3, [r7, #22]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0cd      	beq.n	800324c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d129      	bne.n	800331a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2319      	movs	r3, #25
 80032f2:	2201      	movs	r2, #1
 80032f4:	4921      	ldr	r1, [pc, #132]	@ (800337c <HAL_I2C_IsDeviceReady+0x254>)
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f8c6 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e036      	b.n	8003374 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e02c      	b.n	8003374 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003328:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003332:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2319      	movs	r3, #25
 800333a:	2201      	movs	r2, #1
 800333c:	490f      	ldr	r1, [pc, #60]	@ (800337c <HAL_I2C_IsDeviceReady+0x254>)
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f8a2 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e012      	b.n	8003374 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	3301      	adds	r3, #1
 8003352:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	f4ff af32 	bcc.w	80031c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
  }
}
 8003374:	4618      	mov	r0, r3
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	00100002 	.word	0x00100002
 8003380:	ffff0000 	.word	0xffff0000

08003384 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	460b      	mov	r3, r1
 8003392:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003398:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d006      	beq.n	80033ae <I2C_MasterRequestWrite+0x2a>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d003      	beq.n	80033ae <I2C_MasterRequestWrite+0x2a>
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033ac:	d108      	bne.n	80033c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e00b      	b.n	80033d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c4:	2b12      	cmp	r3, #18
 80033c6:	d107      	bne.n	80033d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f84f 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033fe:	d103      	bne.n	8003408 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003406:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e035      	b.n	8003478 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003414:	d108      	bne.n	8003428 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003416:	897b      	ldrh	r3, [r7, #10]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003424:	611a      	str	r2, [r3, #16]
 8003426:	e01b      	b.n	8003460 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003428:	897b      	ldrh	r3, [r7, #10]
 800342a:	11db      	asrs	r3, r3, #7
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f003 0306 	and.w	r3, r3, #6
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f063 030f 	orn	r3, r3, #15
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	490e      	ldr	r1, [pc, #56]	@ (8003480 <I2C_MasterRequestWrite+0xfc>)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f875 	bl	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e010      	b.n	8003478 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4907      	ldr	r1, [pc, #28]	@ (8003484 <I2C_MasterRequestWrite+0x100>)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f865 	bl	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	00010008 	.word	0x00010008
 8003484:	00010002 	.word	0x00010002

08003488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003498:	e025      	b.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034a0:	d021      	beq.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7ff f875 	bl	8002590 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d116      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e023      	b.n	800352e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d10d      	bne.n	800350c <I2C_WaitOnFlagUntilTimeout+0x84>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4013      	ands	r3, r2
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf0c      	ite	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	2300      	movne	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	e00c      	b.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	43da      	mvns	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4013      	ands	r3, r2
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	429a      	cmp	r2, r3
 800352a:	d0b6      	beq.n	800349a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003544:	e051      	b.n	80035ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003554:	d123      	bne.n	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003564:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800356e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f043 0204 	orr.w	r2, r3, #4
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e046      	b.n	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035a4:	d021      	beq.n	80035ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7fe fff3 	bl	8002590 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d116      	bne.n	80035ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	f043 0220 	orr.w	r2, r3, #32
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e020      	b.n	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d10c      	bne.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	43da      	mvns	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4013      	ands	r3, r2
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	e00b      	b.n	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	43da      	mvns	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d18d      	bne.n	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003640:	e02d      	b.n	800369e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f878 	bl	8003738 <I2C_IsAcknowledgeFailed>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e02d      	b.n	80036ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003658:	d021      	beq.n	800369e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365a:	f7fe ff99 	bl	8002590 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d116      	bne.n	800369e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	f043 0220 	orr.w	r2, r3, #32
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e007      	b.n	80036ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a8:	2b80      	cmp	r3, #128	@ 0x80
 80036aa:	d1ca      	bne.n	8003642 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c2:	e02d      	b.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f837 	bl	8003738 <I2C_IsAcknowledgeFailed>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e02d      	b.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036da:	d021      	beq.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036dc:	f7fe ff58 	bl	8002590 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d302      	bcc.n	80036f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d116      	bne.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	f043 0220 	orr.w	r2, r3, #32
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e007      	b.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b04      	cmp	r3, #4
 800372c:	d1ca      	bne.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374e:	d11b      	bne.n	8003788 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003758:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	@ 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80037a0:	2300      	movs	r3, #0
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	4b23      	ldr	r3, [pc, #140]	@ (8003834 <HAL_UART_MspInit+0x9c>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a8:	4a22      	ldr	r2, [pc, #136]	@ (8003834 <HAL_UART_MspInit+0x9c>)
 80037aa:	f043 0308 	orr.w	r3, r3, #8
 80037ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80037b0:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <HAL_UART_MspInit+0x9c>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003834 <HAL_UART_MspInit+0x9c>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003834 <HAL_UART_MspInit+0x9c>)
 80037c6:	f043 0308 	orr.w	r3, r3, #8
 80037ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80037cc:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <HAL_UART_MspInit+0x9c>)
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80037d8:	2300      	movs	r3, #0
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <HAL_UART_MspInit+0x9c>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	4a14      	ldr	r2, [pc, #80]	@ (8003834 <HAL_UART_MspInit+0x9c>)
 80037e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e8:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <HAL_UART_MspInit+0x9c>)
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80037f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80037fa:	2302      	movs	r3, #2
 80037fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80037fe:	2301      	movs	r3, #1
 8003800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003802:	2303      	movs	r3, #3
 8003804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8003806:	2307      	movs	r3, #7
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800380a:	f107 0314 	add.w	r3, r7, #20
 800380e:	4619      	mov	r1, r3
 8003810:	4809      	ldr	r0, [pc, #36]	@ (8003838 <HAL_UART_MspInit+0xa0>)
 8003812:	f7ff f891 	bl	8002938 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8003816:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800381a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800381c:	2307      	movs	r3, #7
 800381e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4619      	mov	r1, r3
 8003826:	4804      	ldr	r0, [pc, #16]	@ (8003838 <HAL_UART_MspInit+0xa0>)
 8003828:	f7ff f886 	bl	8002938 <HAL_GPIO_Init>
}
 800382c:	bf00      	nop
 800382e:	3728      	adds	r7, #40	@ 0x28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	40020c00 	.word	0x40020c00

0800383c <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0

}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003850:	4b03      	ldr	r3, [pc, #12]	@ (8003860 <HAL_RCC_GetHCLKFreq+0x14>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000000 	.word	0x20000000

08003864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003868:	f7ff fff0 	bl	800384c <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	0a9b      	lsrs	r3, r3, #10
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4903      	ldr	r1, [pc, #12]	@ (8003888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40023800 	.word	0x40023800
 8003888:	08008200 	.word	0x08008200

0800388c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003890:	f7ff ffdc 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0b5b      	lsrs	r3, r3, #13
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4903      	ldr	r1, [pc, #12]	@ (80038b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08008200 	.word	0x08008200

080038b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e03f      	b.n	8003946 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff ff5c 	bl	8003798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	@ 0x24
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fddb 	bl	80044b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800390c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800391c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800392c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b08a      	sub	sp, #40	@ 0x28
 8003952:	af02      	add	r7, sp, #8
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b20      	cmp	r3, #32
 800396c:	d17c      	bne.n	8003a68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_UART_Transmit+0x2c>
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e075      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_UART_Transmit+0x3e>
 8003988:	2302      	movs	r3, #2
 800398a:	e06e      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2221      	movs	r2, #33	@ 0x21
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039a2:	f7fe fdf5 	bl	8002590 <HAL_GetTick>
 80039a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	88fa      	ldrh	r2, [r7, #6]
 80039ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	88fa      	ldrh	r2, [r7, #6]
 80039b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039bc:	d108      	bne.n	80039d0 <HAL_UART_Transmit+0x82>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e003      	b.n	80039d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80039e0:	e02a      	b.n	8003a38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2200      	movs	r2, #0
 80039ea:	2180      	movs	r1, #128	@ 0x80
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fb1f 	bl	8004030 <UART_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e036      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10b      	bne.n	8003a1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	3302      	adds	r3, #2
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e007      	b.n	8003a2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	3301      	adds	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1cf      	bne.n	80039e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2140      	movs	r1, #64	@ 0x40
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 faef 	bl	8004030 <UART_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e006      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d11d      	bne.n	8003ac8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_UART_Receive_IT+0x26>
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e016      	b.n	8003aca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Receive_IT+0x38>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e00f      	b.n	8003aca <HAL_UART_Receive_IT+0x58>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fb24 	bl	800410c <UART_Start_Receive_IT>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	e000      	b.n	8003aca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_UART_IRQHandler+0x66>
 8003b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fc03 	bl	800433e <UART_Receive_IT>
      return;
 8003b38:	e256      	b.n	8003fe8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80de 	beq.w	8003d00 <HAL_UART_IRQHandler+0x22c>
 8003b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d106      	bne.n	8003b5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80d1 	beq.w	8003d00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_UART_IRQHandler+0xae>
 8003b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	f043 0201 	orr.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <HAL_UART_IRQHandler+0xd2>
 8003b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	f043 0202 	orr.w	r2, r3, #2
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <HAL_UART_IRQHandler+0xf6>
 8003bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	f043 0204 	orr.w	r2, r3, #4
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d011      	beq.n	8003bfa <HAL_UART_IRQHandler+0x126>
 8003bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	f043 0208 	orr.w	r2, r3, #8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 81ed 	beq.w	8003fde <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_UART_IRQHandler+0x14e>
 8003c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fb8e 	bl	800433e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2c:	2b40      	cmp	r3, #64	@ 0x40
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d103      	bne.n	8003c4e <HAL_UART_IRQHandler+0x17a>
 8003c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d04f      	beq.n	8003cee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa96 	bl	8004180 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5e:	2b40      	cmp	r3, #64	@ 0x40
 8003c60:	d141      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3314      	adds	r3, #20
 8003c68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3314      	adds	r3, #20
 8003c8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ca6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1d9      	bne.n	8003c62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d013      	beq.n	8003cde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cba:	4a7d      	ldr	r2, [pc, #500]	@ (8003eb0 <HAL_UART_IRQHandler+0x3dc>)
 8003cbc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe fe15 	bl	80028f2 <HAL_DMA_Abort_IT>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d016      	beq.n	8003cfc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cd8:	4610      	mov	r0, r2
 8003cda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cdc:	e00e      	b.n	8003cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f990 	bl	8004004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce4:	e00a      	b.n	8003cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f98c 	bl	8004004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	e006      	b.n	8003cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f988 	bl	8004004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8003cfa:	e170      	b.n	8003fde <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	bf00      	nop
    return;
 8003cfe:	e16e      	b.n	8003fde <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	f040 814a 	bne.w	8003f9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8143 	beq.w	8003f9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 813c 	beq.w	8003f9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d46:	2b40      	cmp	r3, #64	@ 0x40
 8003d48:	f040 80b4 	bne.w	8003eb4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8140 	beq.w	8003fe2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	f080 8139 	bcs.w	8003fe2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d76:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d82:	f000 8088 	beq.w	8003e96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003da4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003db2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003dbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1d9      	bne.n	8003d86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3314      	adds	r3, #20
 8003dd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003de2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003de4:	f023 0301 	bic.w	r3, r3, #1
 8003de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3314      	adds	r3, #20
 8003df2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003df6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003dfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e1      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3314      	adds	r3, #20
 8003e14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e3      	bne.n	8003e0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e66:	f023 0310 	bic.w	r3, r3, #16
 8003e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e78:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e7a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e3      	bne.n	8003e54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe fcbe 	bl	8002812 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8b6 	bl	8004018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eac:	e099      	b.n	8003fe2 <HAL_UART_IRQHandler+0x50e>
 8003eae:	bf00      	nop
 8003eb0:	08004247 	.word	0x08004247
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 808b 	beq.w	8003fe6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8086 	beq.w	8003fe6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	330c      	adds	r3, #12
 8003ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	330c      	adds	r3, #12
 8003efa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003efe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e3      	bne.n	8003eda <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3314      	adds	r3, #20
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	623b      	str	r3, [r7, #32]
   return(result);
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3314      	adds	r3, #20
 8003f32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f36:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e3      	bne.n	8003f12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0310 	bic.w	r3, r3, #16
 8003f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f7c:	61fa      	str	r2, [r7, #28]
 8003f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	69b9      	ldr	r1, [r7, #24]
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	617b      	str	r3, [r7, #20]
   return(result);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e3      	bne.n	8003f58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f94:	4619      	mov	r1, r3
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f83e 	bl	8004018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f9c:	e023      	b.n	8003fe6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_UART_IRQHandler+0x4ea>
 8003faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f959 	bl	800426e <UART_Transmit_IT>
    return;
 8003fbc:	e014      	b.n	8003fe8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00e      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x514>
 8003fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f999 	bl	800430e <UART_EndTransmit_IT>
    return;
 8003fdc:	e004      	b.n	8003fe8 <HAL_UART_IRQHandler+0x514>
    return;
 8003fde:	bf00      	nop
 8003fe0:	e002      	b.n	8003fe8 <HAL_UART_IRQHandler+0x514>
      return;
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <HAL_UART_IRQHandler+0x514>
      return;
 8003fe6:	bf00      	nop
  }
}
 8003fe8:	37e8      	adds	r7, #232	@ 0xe8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop

08003ff0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b090      	sub	sp, #64	@ 0x40
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	4613      	mov	r3, r2
 800403e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004040:	e050      	b.n	80040e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004048:	d04c      	beq.n	80040e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800404a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <UART_WaitOnFlagUntilTimeout+0x30>
 8004050:	f7fe fa9e 	bl	8002590 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800405c:	429a      	cmp	r2, r3
 800405e:	d241      	bcs.n	80040e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004080:	637a      	str	r2, [r7, #52]	@ 0x34
 8004082:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004086:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800408e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e5      	bne.n	8004060 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3314      	adds	r3, #20
 800409a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	613b      	str	r3, [r7, #16]
   return(result);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040b4:	623a      	str	r2, [r7, #32]
 80040b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	69f9      	ldr	r1, [r7, #28]
 80040ba:	6a3a      	ldr	r2, [r7, #32]
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e5      	bne.n	8004094 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e00f      	b.n	8004104 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	4013      	ands	r3, r2
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d09f      	beq.n	8004042 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3740      	adds	r7, #64	@ 0x40
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	4613      	mov	r3, r2
 8004118:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	88fa      	ldrh	r2, [r7, #6]
 8004124:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	88fa      	ldrh	r2, [r7, #6]
 800412a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2222      	movs	r2, #34	@ 0x22
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004150:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0220 	orr.w	r2, r2, #32
 8004170:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b095      	sub	sp, #84	@ 0x54
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	330c      	adds	r3, #12
 800418e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800419e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80041aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e5      	bne.n	8004188 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3314      	adds	r3, #20
 80041c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3314      	adds	r3, #20
 80041da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e5      	bne.n	80041bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d119      	bne.n	800422c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	60bb      	str	r3, [r7, #8]
   return(result);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f023 0310 	bic.w	r3, r3, #16
 800420e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004218:	61ba      	str	r2, [r7, #24]
 800421a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6979      	ldr	r1, [r7, #20]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	613b      	str	r3, [r7, #16]
   return(result);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e5      	bne.n	80041f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800423a:	bf00      	nop
 800423c:	3754      	adds	r7, #84	@ 0x54
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004252:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff fecf 	bl	8004004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b21      	cmp	r3, #33	@ 0x21
 8004280:	d13e      	bne.n	8004300 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428a:	d114      	bne.n	80042b6 <UART_Transmit_IT+0x48>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d110      	bne.n	80042b6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	1c9a      	adds	r2, r3, #2
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	621a      	str	r2, [r3, #32]
 80042b4:	e008      	b.n	80042c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	1c59      	adds	r1, r3, #1
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6211      	str	r1, [r2, #32]
 80042c0:	781a      	ldrb	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4619      	mov	r1, r3
 80042d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10f      	bne.n	80042fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e000      	b.n	8004302 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004300:	2302      	movs	r3, #2
  }
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004324:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff fe5e 	bl	8003ff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b08c      	sub	sp, #48	@ 0x30
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b22      	cmp	r3, #34	@ 0x22
 8004350:	f040 80ab 	bne.w	80044aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435c:	d117      	bne.n	800438e <UART_Receive_IT+0x50>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d113      	bne.n	800438e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	b29b      	uxth	r3, r3
 8004378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437c:	b29a      	uxth	r2, r3
 800437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004380:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	1c9a      	adds	r2, r3, #2
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	@ 0x28
 800438c:	e026      	b.n	80043dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004394:	2300      	movs	r3, #0
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a0:	d007      	beq.n	80043b2 <UART_Receive_IT+0x74>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <UART_Receive_IT+0x82>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	e008      	b.n	80043d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4619      	mov	r1, r3
 80043ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d15a      	bne.n	80044a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0220 	bic.w	r2, r2, #32
 80043fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800440e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0201 	bic.w	r2, r2, #1
 800441e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442c:	2b01      	cmp	r3, #1
 800442e:	d135      	bne.n	800449c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	613b      	str	r3, [r7, #16]
   return(result);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f023 0310 	bic.w	r3, r3, #16
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004456:	623a      	str	r2, [r7, #32]
 8004458:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	69f9      	ldr	r1, [r7, #28]
 800445c:	6a3a      	ldr	r2, [r7, #32]
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	61bb      	str	r3, [r7, #24]
   return(result);
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e5      	bne.n	8004436 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b10      	cmp	r3, #16
 8004476:	d10a      	bne.n	800448e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004492:	4619      	mov	r1, r3
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fdbf 	bl	8004018 <HAL_UARTEx_RxEventCallback>
 800449a:	e002      	b.n	80044a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7fd fd85 	bl	8001fac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e002      	b.n	80044ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80044aa:	2302      	movs	r3, #2
  }
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3730      	adds	r7, #48	@ 0x30
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044b8:	b0c0      	sub	sp, #256	@ 0x100
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d0:	68d9      	ldr	r1, [r3, #12]
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	ea40 0301 	orr.w	r3, r0, r1
 80044dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800450c:	f021 010c 	bic.w	r1, r1, #12
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800451a:	430b      	orrs	r3, r1
 800451c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800452a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452e:	6999      	ldr	r1, [r3, #24]
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	ea40 0301 	orr.w	r3, r0, r1
 800453a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b8f      	ldr	r3, [pc, #572]	@ (8004780 <UART_SetConfig+0x2cc>)
 8004544:	429a      	cmp	r2, r3
 8004546:	d005      	beq.n	8004554 <UART_SetConfig+0xa0>
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b8d      	ldr	r3, [pc, #564]	@ (8004784 <UART_SetConfig+0x2d0>)
 8004550:	429a      	cmp	r2, r3
 8004552:	d104      	bne.n	800455e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004554:	f7ff f99a 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 8004558:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800455c:	e003      	b.n	8004566 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800455e:	f7ff f981 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8004562:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004570:	f040 810c 	bne.w	800478c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004578:	2200      	movs	r2, #0
 800457a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800457e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004582:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004586:	4622      	mov	r2, r4
 8004588:	462b      	mov	r3, r5
 800458a:	1891      	adds	r1, r2, r2
 800458c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800458e:	415b      	adcs	r3, r3
 8004590:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004592:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004596:	4621      	mov	r1, r4
 8004598:	eb12 0801 	adds.w	r8, r2, r1
 800459c:	4629      	mov	r1, r5
 800459e:	eb43 0901 	adc.w	r9, r3, r1
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045b6:	4690      	mov	r8, r2
 80045b8:	4699      	mov	r9, r3
 80045ba:	4623      	mov	r3, r4
 80045bc:	eb18 0303 	adds.w	r3, r8, r3
 80045c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045c4:	462b      	mov	r3, r5
 80045c6:	eb49 0303 	adc.w	r3, r9, r3
 80045ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045e2:	460b      	mov	r3, r1
 80045e4:	18db      	adds	r3, r3, r3
 80045e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80045e8:	4613      	mov	r3, r2
 80045ea:	eb42 0303 	adc.w	r3, r2, r3
 80045ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80045f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045f8:	f7fc fb18 	bl	8000c2c <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4b61      	ldr	r3, [pc, #388]	@ (8004788 <UART_SetConfig+0x2d4>)
 8004602:	fba3 2302 	umull	r2, r3, r3, r2
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	011c      	lsls	r4, r3, #4
 800460a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800460e:	2200      	movs	r2, #0
 8004610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004614:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004618:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800461c:	4642      	mov	r2, r8
 800461e:	464b      	mov	r3, r9
 8004620:	1891      	adds	r1, r2, r2
 8004622:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004624:	415b      	adcs	r3, r3
 8004626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004628:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800462c:	4641      	mov	r1, r8
 800462e:	eb12 0a01 	adds.w	sl, r2, r1
 8004632:	4649      	mov	r1, r9
 8004634:	eb43 0b01 	adc.w	fp, r3, r1
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004644:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800464c:	4692      	mov	sl, r2
 800464e:	469b      	mov	fp, r3
 8004650:	4643      	mov	r3, r8
 8004652:	eb1a 0303 	adds.w	r3, sl, r3
 8004656:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800465a:	464b      	mov	r3, r9
 800465c:	eb4b 0303 	adc.w	r3, fp, r3
 8004660:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004670:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004674:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004678:	460b      	mov	r3, r1
 800467a:	18db      	adds	r3, r3, r3
 800467c:	643b      	str	r3, [r7, #64]	@ 0x40
 800467e:	4613      	mov	r3, r2
 8004680:	eb42 0303 	adc.w	r3, r2, r3
 8004684:	647b      	str	r3, [r7, #68]	@ 0x44
 8004686:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800468a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800468e:	f7fc facd 	bl	8000c2c <__aeabi_uldivmod>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4611      	mov	r1, r2
 8004698:	4b3b      	ldr	r3, [pc, #236]	@ (8004788 <UART_SetConfig+0x2d4>)
 800469a:	fba3 2301 	umull	r2, r3, r3, r1
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2264      	movs	r2, #100	@ 0x64
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	1acb      	subs	r3, r1, r3
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046ae:	4b36      	ldr	r3, [pc, #216]	@ (8004788 <UART_SetConfig+0x2d4>)
 80046b0:	fba3 2302 	umull	r2, r3, r3, r2
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046bc:	441c      	add	r4, r3
 80046be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046d0:	4642      	mov	r2, r8
 80046d2:	464b      	mov	r3, r9
 80046d4:	1891      	adds	r1, r2, r2
 80046d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046d8:	415b      	adcs	r3, r3
 80046da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046e0:	4641      	mov	r1, r8
 80046e2:	1851      	adds	r1, r2, r1
 80046e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80046e6:	4649      	mov	r1, r9
 80046e8:	414b      	adcs	r3, r1
 80046ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046f8:	4659      	mov	r1, fp
 80046fa:	00cb      	lsls	r3, r1, #3
 80046fc:	4651      	mov	r1, sl
 80046fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004702:	4651      	mov	r1, sl
 8004704:	00ca      	lsls	r2, r1, #3
 8004706:	4610      	mov	r0, r2
 8004708:	4619      	mov	r1, r3
 800470a:	4603      	mov	r3, r0
 800470c:	4642      	mov	r2, r8
 800470e:	189b      	adds	r3, r3, r2
 8004710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004714:	464b      	mov	r3, r9
 8004716:	460a      	mov	r2, r1
 8004718:	eb42 0303 	adc.w	r3, r2, r3
 800471c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800472c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004730:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004734:	460b      	mov	r3, r1
 8004736:	18db      	adds	r3, r3, r3
 8004738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800473a:	4613      	mov	r3, r2
 800473c:	eb42 0303 	adc.w	r3, r2, r3
 8004740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004742:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004746:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800474a:	f7fc fa6f 	bl	8000c2c <__aeabi_uldivmod>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <UART_SetConfig+0x2d4>)
 8004754:	fba3 1302 	umull	r1, r3, r3, r2
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	2164      	movs	r1, #100	@ 0x64
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	3332      	adds	r3, #50	@ 0x32
 8004766:	4a08      	ldr	r2, [pc, #32]	@ (8004788 <UART_SetConfig+0x2d4>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	f003 0207 	and.w	r2, r3, #7
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4422      	add	r2, r4
 800477a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800477c:	e106      	b.n	800498c <UART_SetConfig+0x4d8>
 800477e:	bf00      	nop
 8004780:	40011000 	.word	0x40011000
 8004784:	40011400 	.word	0x40011400
 8004788:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800478c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004790:	2200      	movs	r2, #0
 8004792:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004796:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800479a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800479e:	4642      	mov	r2, r8
 80047a0:	464b      	mov	r3, r9
 80047a2:	1891      	adds	r1, r2, r2
 80047a4:	6239      	str	r1, [r7, #32]
 80047a6:	415b      	adcs	r3, r3
 80047a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047ae:	4641      	mov	r1, r8
 80047b0:	1854      	adds	r4, r2, r1
 80047b2:	4649      	mov	r1, r9
 80047b4:	eb43 0501 	adc.w	r5, r3, r1
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	00eb      	lsls	r3, r5, #3
 80047c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047c6:	00e2      	lsls	r2, r4, #3
 80047c8:	4614      	mov	r4, r2
 80047ca:	461d      	mov	r5, r3
 80047cc:	4643      	mov	r3, r8
 80047ce:	18e3      	adds	r3, r4, r3
 80047d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047d4:	464b      	mov	r3, r9
 80047d6:	eb45 0303 	adc.w	r3, r5, r3
 80047da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047fa:	4629      	mov	r1, r5
 80047fc:	008b      	lsls	r3, r1, #2
 80047fe:	4621      	mov	r1, r4
 8004800:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004804:	4621      	mov	r1, r4
 8004806:	008a      	lsls	r2, r1, #2
 8004808:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800480c:	f7fc fa0e 	bl	8000c2c <__aeabi_uldivmod>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4b60      	ldr	r3, [pc, #384]	@ (8004998 <UART_SetConfig+0x4e4>)
 8004816:	fba3 2302 	umull	r2, r3, r3, r2
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	011c      	lsls	r4, r3, #4
 800481e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004822:	2200      	movs	r2, #0
 8004824:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004828:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800482c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004830:	4642      	mov	r2, r8
 8004832:	464b      	mov	r3, r9
 8004834:	1891      	adds	r1, r2, r2
 8004836:	61b9      	str	r1, [r7, #24]
 8004838:	415b      	adcs	r3, r3
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004840:	4641      	mov	r1, r8
 8004842:	1851      	adds	r1, r2, r1
 8004844:	6139      	str	r1, [r7, #16]
 8004846:	4649      	mov	r1, r9
 8004848:	414b      	adcs	r3, r1
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004858:	4659      	mov	r1, fp
 800485a:	00cb      	lsls	r3, r1, #3
 800485c:	4651      	mov	r1, sl
 800485e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004862:	4651      	mov	r1, sl
 8004864:	00ca      	lsls	r2, r1, #3
 8004866:	4610      	mov	r0, r2
 8004868:	4619      	mov	r1, r3
 800486a:	4603      	mov	r3, r0
 800486c:	4642      	mov	r2, r8
 800486e:	189b      	adds	r3, r3, r2
 8004870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004874:	464b      	mov	r3, r9
 8004876:	460a      	mov	r2, r1
 8004878:	eb42 0303 	adc.w	r3, r2, r3
 800487c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	67bb      	str	r3, [r7, #120]	@ 0x78
 800488a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004898:	4649      	mov	r1, r9
 800489a:	008b      	lsls	r3, r1, #2
 800489c:	4641      	mov	r1, r8
 800489e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a2:	4641      	mov	r1, r8
 80048a4:	008a      	lsls	r2, r1, #2
 80048a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048aa:	f7fc f9bf 	bl	8000c2c <__aeabi_uldivmod>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4611      	mov	r1, r2
 80048b4:	4b38      	ldr	r3, [pc, #224]	@ (8004998 <UART_SetConfig+0x4e4>)
 80048b6:	fba3 2301 	umull	r2, r3, r3, r1
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	2264      	movs	r2, #100	@ 0x64
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	1acb      	subs	r3, r1, r3
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	3332      	adds	r3, #50	@ 0x32
 80048c8:	4a33      	ldr	r2, [pc, #204]	@ (8004998 <UART_SetConfig+0x4e4>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048d4:	441c      	add	r4, r3
 80048d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048da:	2200      	movs	r2, #0
 80048dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80048de:	677a      	str	r2, [r7, #116]	@ 0x74
 80048e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048e4:	4642      	mov	r2, r8
 80048e6:	464b      	mov	r3, r9
 80048e8:	1891      	adds	r1, r2, r2
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	415b      	adcs	r3, r3
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048f4:	4641      	mov	r1, r8
 80048f6:	1851      	adds	r1, r2, r1
 80048f8:	6039      	str	r1, [r7, #0]
 80048fa:	4649      	mov	r1, r9
 80048fc:	414b      	adcs	r3, r1
 80048fe:	607b      	str	r3, [r7, #4]
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800490c:	4659      	mov	r1, fp
 800490e:	00cb      	lsls	r3, r1, #3
 8004910:	4651      	mov	r1, sl
 8004912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004916:	4651      	mov	r1, sl
 8004918:	00ca      	lsls	r2, r1, #3
 800491a:	4610      	mov	r0, r2
 800491c:	4619      	mov	r1, r3
 800491e:	4603      	mov	r3, r0
 8004920:	4642      	mov	r2, r8
 8004922:	189b      	adds	r3, r3, r2
 8004924:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004926:	464b      	mov	r3, r9
 8004928:	460a      	mov	r2, r1
 800492a:	eb42 0303 	adc.w	r3, r2, r3
 800492e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	663b      	str	r3, [r7, #96]	@ 0x60
 800493a:	667a      	str	r2, [r7, #100]	@ 0x64
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004948:	4649      	mov	r1, r9
 800494a:	008b      	lsls	r3, r1, #2
 800494c:	4641      	mov	r1, r8
 800494e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004952:	4641      	mov	r1, r8
 8004954:	008a      	lsls	r2, r1, #2
 8004956:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800495a:	f7fc f967 	bl	8000c2c <__aeabi_uldivmod>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4b0d      	ldr	r3, [pc, #52]	@ (8004998 <UART_SetConfig+0x4e4>)
 8004964:	fba3 1302 	umull	r1, r3, r3, r2
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	2164      	movs	r1, #100	@ 0x64
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	3332      	adds	r3, #50	@ 0x32
 8004976:	4a08      	ldr	r2, [pc, #32]	@ (8004998 <UART_SetConfig+0x4e4>)
 8004978:	fba2 2303 	umull	r2, r3, r2, r3
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	f003 020f 	and.w	r2, r3, #15
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4422      	add	r2, r4
 800498a:	609a      	str	r2, [r3, #8]
}
 800498c:	bf00      	nop
 800498e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004992:	46bd      	mov	sp, r7
 8004994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004998:	51eb851f 	.word	0x51eb851f

0800499c <main>:
void SystemClock_Config(void);
void Error_Handler(void);

#define DEBUG true

int main(void){
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0

	NMEAData* nmeaData;

    HAL_Init();
 80049a2:	f7fd fd95 	bl	80024d0 <HAL_Init>
    SystemClock_Config();
 80049a6:	f000 f8dd 	bl	8004b64 <SystemClock_Config>
    I2C1_Init();
 80049aa:	f7fd f855 	bl	8001a58 <I2C1_Init>
    gpsFSM_init();
 80049ae:	f7fc fdc9 	bl	8001544 <gpsFSM_init>
	HD44780_Init(2);
 80049b2:	2002      	movs	r0, #2
 80049b4:	f7fc fe7a 	bl	80016ac <HD44780_Init>
	HD44780_Clear();
 80049b8:	f7fc ff9e 	bl	80018f8 <HD44780_Clear>

	HD44780_Set_Display(true);
 80049bc:	2001      	movs	r0, #1
 80049be:	f7fc fef1 	bl	80017a4 <HD44780_Set_Display>
	HD44780_Set_Cursor(true);
 80049c2:	2001      	movs	r0, #1
 80049c4:	f7fc ff3a 	bl	800183c <HD44780_Set_Cursor>
	HD44780_Set_Blink(true);
 80049c8:	2001      	movs	r0, #1
 80049ca:	f7fc ff11 	bl	80017f0 <HD44780_Set_Blink>
	HD44780_Move_Cursor(0, 0);
 80049ce:	2100      	movs	r1, #0
 80049d0:	2000      	movs	r0, #0
 80049d2:	f7fc ff59 	bl	8001888 <HD44780_Move_Cursor>
	HD44780_Print_String("LCD Initialized!");
 80049d6:	4855      	ldr	r0, [pc, #340]	@ (8004b2c <main+0x190>)
 80049d8:	f7fc fec8 	bl	800176c <HD44780_Print_String>

	HAL_Delay_Wrapper(500);
 80049dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80049e0:	f7fd f82e 	bl	8001a40 <HAL_Delay_Wrapper>
	HD44780_Clear();
 80049e4:	f7fc ff88 	bl	80018f8 <HD44780_Clear>
	HD44780_Move_Cursor(0, 0);
 80049e8:	2100      	movs	r1, #0
 80049ea:	2000      	movs	r0, #0
 80049ec:	f7fc ff4c 	bl	8001888 <HD44780_Move_Cursor>
	if (UART5_Init()){
 80049f0:	f7fd f9a2 	bl	8001d38 <UART5_Init>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <main+0x74>
		HD44780_Print_String("GPS UART");
 80049fa:	484d      	ldr	r0, [pc, #308]	@ (8004b30 <main+0x194>)
 80049fc:	f7fc feb6 	bl	800176c <HD44780_Print_String>
		HD44780_Move_Cursor(0, 1);
 8004a00:	2101      	movs	r1, #1
 8004a02:	2000      	movs	r0, #0
 8004a04:	f7fc ff40 	bl	8001888 <HD44780_Move_Cursor>
		HD44780_Print_String("Initialized!");
 8004a08:	484a      	ldr	r0, [pc, #296]	@ (8004b34 <main+0x198>)
 8004a0a:	f7fc feaf 	bl	800176c <HD44780_Print_String>
 8004a0e:	e004      	b.n	8004a1a <main+0x7e>
	} else {
		HD44780_Print_String("GPS UART Error!");
 8004a10:	4849      	ldr	r0, [pc, #292]	@ (8004b38 <main+0x19c>)
 8004a12:	f7fc feab 	bl	800176c <HD44780_Print_String>
		Error_Handler();
 8004a16:	f000 f8ac 	bl	8004b72 <Error_Handler>
	}

	HAL_Delay_Wrapper(500);
 8004a1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004a1e:	f7fd f80f 	bl	8001a40 <HAL_Delay_Wrapper>
	HD44780_Clear();
 8004a22:	f7fc ff69 	bl	80018f8 <HD44780_Clear>
	HD44780_Move_Cursor(0, 0);
 8004a26:	2100      	movs	r1, #0
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f7fc ff2d 	bl	8001888 <HD44780_Move_Cursor>
    if (USART2_Init()){
 8004a2e:	f7fd f9c3 	bl	8001db8 <USART2_Init>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <main+0xb2>
    	HD44780_Print_String("PC UART");
 8004a38:	4840      	ldr	r0, [pc, #256]	@ (8004b3c <main+0x1a0>)
 8004a3a:	f7fc fe97 	bl	800176c <HD44780_Print_String>
    	HD44780_Move_Cursor(0, 1);
 8004a3e:	2101      	movs	r1, #1
 8004a40:	2000      	movs	r0, #0
 8004a42:	f7fc ff21 	bl	8001888 <HD44780_Move_Cursor>
    	HD44780_Print_String("Initialized!");
 8004a46:	483b      	ldr	r0, [pc, #236]	@ (8004b34 <main+0x198>)
 8004a48:	f7fc fe90 	bl	800176c <HD44780_Print_String>
 8004a4c:	e004      	b.n	8004a58 <main+0xbc>
    } else {
    	HD44780_Print_String("PC UART Error!");
 8004a4e:	483c      	ldr	r0, [pc, #240]	@ (8004b40 <main+0x1a4>)
 8004a50:	f7fc fe8c 	bl	800176c <HD44780_Print_String>
    	Error_Handler();
 8004a54:	f000 f88d 	bl	8004b72 <Error_Handler>
    }

    HAL_Delay_Wrapper(500);
 8004a58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004a5c:	f7fc fff0 	bl	8001a40 <HAL_Delay_Wrapper>
	HD44780_Clear();
 8004a60:	f7fc ff4a 	bl	80018f8 <HD44780_Clear>
	HD44780_Move_Cursor(0, 0);
 8004a64:	2100      	movs	r1, #0
 8004a66:	2000      	movs	r0, #0
 8004a68:	f7fc ff0e 	bl	8001888 <HD44780_Move_Cursor>
	HD44780_Print_String("Configuring GPS");
 8004a6c:	4835      	ldr	r0, [pc, #212]	@ (8004b44 <main+0x1a8>)
 8004a6e:	f7fc fe7d 	bl	800176c <HD44780_Print_String>

	HAL_Delay_Wrapper(500);
 8004a72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004a76:	f7fc ffe3 	bl	8001a40 <HAL_Delay_Wrapper>
	GPS_Configure_Init();
 8004a7a:	f7fc fd4f 	bl	800151c <GPS_Configure_Init>
	HD44780_Clear();
 8004a7e:	f7fc ff3b 	bl	80018f8 <HD44780_Clear>
	HD44780_Move_Cursor(0, 0);
 8004a82:	2100      	movs	r1, #0
 8004a84:	2000      	movs	r0, #0
 8004a86:	f7fc feff 	bl	8001888 <HD44780_Move_Cursor>
	HD44780_Print_String("GPS Configured!");
 8004a8a:	482f      	ldr	r0, [pc, #188]	@ (8004b48 <main+0x1ac>)
 8004a8c:	f7fc fe6e 	bl	800176c <HD44780_Print_String>

	HAL_Delay_Wrapper(500);
 8004a90:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004a94:	f7fc ffd4 	bl	8001a40 <HAL_Delay_Wrapper>
	HD44780_Clear();
 8004a98:	f7fc ff2e 	bl	80018f8 <HD44780_Clear>
	HD44780_Move_Cursor(0, 0);
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	f7fc fef2 	bl	8001888 <HD44780_Move_Cursor>
	HD44780_Print_String("Processing Data");
 8004aa4:	4829      	ldr	r0, [pc, #164]	@ (8004b4c <main+0x1b0>)
 8004aa6:	f7fc fe61 	bl	800176c <HD44780_Print_String>
	HD44780_Move_Cursor(0, 1);
 8004aaa:	2101      	movs	r1, #1
 8004aac:	2000      	movs	r0, #0
 8004aae:	f7fc feeb 	bl	8001888 <HD44780_Move_Cursor>
	HD44780_Print_String("State: IDLE");
 8004ab2:	4827      	ldr	r0, [pc, #156]	@ (8004b50 <main+0x1b4>)
 8004ab4:	f7fc fe5a 	bl	800176c <HD44780_Print_String>
	HAL_Delay_Wrapper(500);
 8004ab8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004abc:	f7fc ffc0 	bl	8001a40 <HAL_Delay_Wrapper>

    while (1){
    	gpsFSM_update();
 8004ac0:	f7fc fd50 	bl	8001564 <gpsFSM_update>
    	if (nmea_sentence_received() == true){
 8004ac4:	f7fd fb6a 	bl	800219c <nmea_sentence_received>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01c      	beq.n	8004b08 <main+0x16c>
    		char* nmea_sentence = get_nmea_sentence();
 8004ace:	f7fd fbc1 	bl	8002254 <get_nmea_sentence>
 8004ad2:	60f8      	str	r0, [r7, #12]
			#if DEBUG
    			USART2_Send_String((uint8_t*)"(DEBUG) NMEA Received: ");
 8004ad4:	481f      	ldr	r0, [pc, #124]	@ (8004b54 <main+0x1b8>)
 8004ad6:	f7fd fa3f 	bl	8001f58 <USART2_Send_String>
				USART2_Send_String((uint8_t*)nmea_sentence);
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7fd fa3c 	bl	8001f58 <USART2_Send_String>
			#endif
			if (Parse_NMEA_Sentence(nmea_sentence)){
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7fc fa97 	bl	8001014 <Parse_NMEA_Sentence>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00d      	beq.n	8004b08 <main+0x16c>
				nmeaData = Get_NMEA_Data();
 8004aec:	f7fc fc7c 	bl	80013e8 <Get_NMEA_Data>
 8004af0:	60b8      	str	r0, [r7, #8]
			#if DEBUG
				USART2_Send_String((uint8_t*)"(DEBUG) NMEA Processed: Fix Quality: ");
 8004af2:	4819      	ldr	r0, [pc, #100]	@ (8004b58 <main+0x1bc>)
 8004af4:	f7fd fa30 	bl	8001f58 <USART2_Send_String>
				USART2_Send_String((uint8_t*)nmeaData->fixQuality);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	337c      	adds	r3, #124	@ 0x7c
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fd fa2b 	bl	8001f58 <USART2_Send_String>
				USART2_Send_String((uint8_t*)"\r\n");
 8004b02:	4816      	ldr	r0, [pc, #88]	@ (8004b5c <main+0x1c0>)
 8004b04:	f7fd fa28 	bl	8001f58 <USART2_Send_String>
			#endif
			}
    	} if (pc_command_received() == true){
 8004b08:	f7fd fb26 	bl	8002158 <pc_command_received>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0d6      	beq.n	8004ac0 <main+0x124>
    		char* pc_command = get_pc_command();
 8004b12:	f7fd fb39 	bl	8002188 <get_pc_command>
 8004b16:	6078      	str	r0, [r7, #4]
			#if DEBUG
    			USART2_Send_String((uint8_t*)"(DEBUG) PC Command Received: ");
 8004b18:	4811      	ldr	r0, [pc, #68]	@ (8004b60 <main+0x1c4>)
 8004b1a:	f7fd fa1d 	bl	8001f58 <USART2_Send_String>
				USART2_Send_String((uint8_t*)pc_command);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fd fa1a 	bl	8001f58 <USART2_Send_String>
			#endif
			Process_PC_Command(pc_command);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fd f82d 	bl	8001b84 <Process_PC_Command>
    while (1){
 8004b2a:	e7c9      	b.n	8004ac0 <main+0x124>
 8004b2c:	080080f4 	.word	0x080080f4
 8004b30:	08008108 	.word	0x08008108
 8004b34:	08008114 	.word	0x08008114
 8004b38:	08008124 	.word	0x08008124
 8004b3c:	08008134 	.word	0x08008134
 8004b40:	0800813c 	.word	0x0800813c
 8004b44:	0800814c 	.word	0x0800814c
 8004b48:	0800815c 	.word	0x0800815c
 8004b4c:	0800816c 	.word	0x0800816c
 8004b50:	0800817c 	.word	0x0800817c
 8004b54:	08008188 	.word	0x08008188
 8004b58:	080081a0 	.word	0x080081a0
 8004b5c:	080081c8 	.word	0x080081c8
 8004b60:	080081cc 	.word	0x080081cc

08004b64 <SystemClock_Config>:
    	}
    }
}

void SystemClock_Config(void) {
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <Error_Handler>:

void Error_Handler(void){
 8004b72:	b480      	push	{r7}
 8004b74:	af00      	add	r7, sp, #0
    while (1){}
 8004b76:	bf00      	nop
 8004b78:	e7fd      	b.n	8004b76 <Error_Handler+0x4>

08004b7a <String_Compare>:
 *
 * @param str1 Pointer to the first string.
 * @param str2 Pointer to the second string.
 * @retval bool_t True if the strings are equal, false otherwise.
 */
bool_t String_Compare(const char *str1, const char *str2) {
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
    // Loops until null terminator in str1 "\0"
    while (*str1 && (*str1 == *str2)) {
 8004b84:	e005      	b.n	8004b92 <String_Compare+0x18>
        str1++;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	607b      	str	r3, [r7, #4]
        str2++;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	603b      	str	r3, [r7, #0]
    while (*str1 && (*str1 == *str2)) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <String_Compare+0x2c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d0ef      	beq.n	8004b86 <String_Compare+0xc>
    }
    return *str1 == *str2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	bf0c      	ite	eq
 8004bb2:	2301      	moveq	r3, #1
 8004bb4:	2300      	movne	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <String_Concat>:
 *
 * @param dest Pointer to the destination string. The source string will be appended to this.
 * @param src Pointer to the source string to be appended.
 * @retval char* Pointer to the destination string (original dest).
 */
char *String_Concat(char *dest, const char *src) {
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
    char *original_dest = dest;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]

    // Move dest pointer to the end of the current string
    while (*dest) { dest++; }
 8004bd2:	e002      	b.n	8004bda <String_Concat+0x16>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f8      	bne.n	8004bd4 <String_Concat+0x10>

    // Copy characters from src to the end of dest
    while (*src) {
 8004be2:	e009      	b.n	8004bf8 <String_Concat+0x34>
        *dest = *src;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781a      	ldrb	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	701a      	strb	r2, [r3, #0]
        dest++;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	607b      	str	r3, [r7, #4]
        src++;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	603b      	str	r3, [r7, #0]
    while (*src) {
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f1      	bne.n	8004be4 <String_Concat+0x20>
    }

    // Add null terminator
    *dest = '\0';
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]

    // Return the original destination pointer
    return original_dest;
 8004c06:	68fb      	ldr	r3, [r7, #12]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <String_Split>:
 * @param str Pointer to the string to be split.
 * @param delimiter The delimiter character used to split the string.
 * @param fields Array to store the split fields. Each field is a string.
 * @param fieldCount Pointer to an integer to store the number of fields.
 */
void String_Split(const char* str, char delimiter, char fields[MAX_FIELDS][MAX_FIELDS_LENGTH], int* fieldCount) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	460b      	mov	r3, r1
 8004c22:	72fb      	strb	r3, [r7, #11]
    *fieldCount = 0;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
    int length = strlen(str);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f7fb fae0 	bl	80001f0 <strlen>
 8004c30:	4603      	mov	r3, r0
 8004c32:	613b      	str	r3, [r7, #16]
    int fieldIndex = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
    int charIndex = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e043      	b.n	8004cca <String_Split+0xb6>
        if (str[i] == delimiter || str[i] == '\n') {
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	7afa      	ldrb	r2, [r7, #11]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d005      	beq.n	8004c5c <String_Split+0x48>
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4413      	add	r3, r2
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b0a      	cmp	r3, #10
 8004c5a:	d113      	bne.n	8004c84 <String_Split+0x70>
            fields[fieldIndex][charIndex] = '\0'; // Null-terminate current field
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	441a      	add	r2, r3
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
            fieldIndex++;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	3301      	adds	r3, #1
 8004c76:	61fb      	str	r3, [r7, #28]
            charIndex = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61bb      	str	r3, [r7, #24]
            if (fieldIndex >= MAX_FIELDS) break;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004c80:	dd20      	ble.n	8004cc4 <String_Split+0xb0>
 8004c82:	e026      	b.n	8004cd2 <String_Split+0xbe>
        } else {
            fields[fieldIndex][charIndex++] = str[i];
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	18d1      	adds	r1, r2, r3
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8004c90:	fb02 f303 	mul.w	r3, r2, r3
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	441a      	add	r2, r3
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	1c58      	adds	r0, r3, #1
 8004c9c:	61b8      	str	r0, [r7, #24]
 8004c9e:	7809      	ldrb	r1, [r1, #0]
 8004ca0:	54d1      	strb	r1, [r2, r3]
            if (charIndex >= MAX_FIELDS_LENGTH - 1) {
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8004ca8:	dd0c      	ble.n	8004cc4 <String_Split+0xb0>
                fields[fieldIndex][charIndex] = '\0'; // Null-terminate and prevent overflow
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8004cb0:	fb02 f303 	mul.w	r3, r2, r3
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	441a      	add	r2, r3
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	4413      	add	r3, r2
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
                charIndex = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < length; i++) {
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	dbb7      	blt.n	8004c42 <String_Split+0x2e>
            }
        }
    }
    *fieldCount = fieldIndex + 1; // Account for the last field
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	601a      	str	r2, [r3, #0]
}
 8004cda:	bf00      	nop
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <String_XOR_Checksum>:
 * This function calculates the XOR checksum of the given string.
 *
 * @param str Pointer to the string to be checksummed.
 * @retval unsigned char The XOR checksum of the string.
 */
unsigned char String_XOR_Checksum(const char* str) {
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
    unsigned char checksum = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]
    while (*str) {
 8004cee:	e007      	b.n	8004d00 <String_XOR_Checksum+0x1e>
        checksum ^= *str;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	781a      	ldrb	r2, [r3, #0]
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	4053      	eors	r3, r2
 8004cf8:	73fb      	strb	r3, [r7, #15]
        str++;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	607b      	str	r3, [r7, #4]
    while (*str) {
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f3      	bne.n	8004cf0 <String_XOR_Checksum+0xe>
    }
    return checksum;
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <CHAR_To_HEX_String>:
 * This function converts an unsigned char value to a two-character hexadecimal string.
 *
 * @param value The unsigned char value to convert.
 * @param buffer Pointer to the buffer to store the hexadecimal string. Must be at least 3 bytes long.
 */
void CHAR_To_HEX_String(unsigned char value, char* buffer) {
 8004d18:	b4b0      	push	{r4, r5, r7}
 8004d1a:	b089      	sub	sp, #36	@ 0x24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	6039      	str	r1, [r7, #0]
 8004d22:	71fb      	strb	r3, [r7, #7]
    const char hexDigits[] = "0123456789ABCDEF";
 8004d24:	4b12      	ldr	r3, [pc, #72]	@ (8004d70 <CHAR_To_HEX_String+0x58>)
 8004d26:	f107 040c 	add.w	r4, r7, #12
 8004d2a:	461d      	mov	r5, r3
 8004d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	7023      	strb	r3, [r4, #0]
    buffer[0] = hexDigits[(value >> 4) & 0x0F]; // High nibble
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	091b      	lsrs	r3, r3, #4
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	3320      	adds	r3, #32
 8004d40:	443b      	add	r3, r7
 8004d42:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	701a      	strb	r2, [r3, #0]
    buffer[1] = hexDigits[value & 0x0F];        // Low nibble
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	f003 020f 	and.w	r2, r3, #15
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	3220      	adds	r2, #32
 8004d56:	443a      	add	r2, r7
 8004d58:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004d5c:	701a      	strb	r2, [r3, #0]
    buffer[2] = '\0'; // Null-terminate the string
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	3302      	adds	r3, #2
 8004d62:	2200      	movs	r2, #0
 8004d64:	701a      	strb	r2, [r3, #0]
}
 8004d66:	bf00      	nop
 8004d68:	3724      	adds	r7, #36	@ 0x24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bcb0      	pop	{r4, r5, r7}
 8004d6e:	4770      	bx	lr
 8004d70:	080081ec 	.word	0x080081ec

08004d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004d74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004dac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004d78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d7a:	e003      	b.n	8004d84 <LoopCopyDataInit>

08004d7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004db0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004d7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d82:	3104      	adds	r1, #4

08004d84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004d84:	480b      	ldr	r0, [pc, #44]	@ (8004db4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004d86:	4b0c      	ldr	r3, [pc, #48]	@ (8004db8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004d88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004d8c:	d3f6      	bcc.n	8004d7c <CopyDataInit>
  ldr  r2, =_sbss
 8004d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8004dbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004d90:	e002      	b.n	8004d98 <LoopFillZerobss>

08004d92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004d92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004d94:	f842 3b04 	str.w	r3, [r2], #4

08004d98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004d98:	4b09      	ldr	r3, [pc, #36]	@ (8004dc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004d9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004d9c:	d3f9      	bcc.n	8004d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004d9e:	f7fd fa69 	bl	8002274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004da2:	f001 f8a5 	bl	8005ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004da6:	f7ff fdf9 	bl	800499c <main>
  bx  lr    
 8004daa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004dac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004db0:	080085f8 	.word	0x080085f8
  ldr  r0, =_sdata
 8004db4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004db8:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 8004dbc:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8004dc0:	200011d8 	.word	0x200011d8

08004dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dc4:	e7fe      	b.n	8004dc4 <ADC_IRQHandler>

08004dc6 <atof>:
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	f000 be22 	b.w	8005a10 <strtod>

08004dcc <atoi>:
 8004dcc:	220a      	movs	r2, #10
 8004dce:	2100      	movs	r1, #0
 8004dd0:	f000 bea4 	b.w	8005b1c <strtol>

08004dd4 <__itoa>:
 8004dd4:	1e93      	subs	r3, r2, #2
 8004dd6:	2b22      	cmp	r3, #34	@ 0x22
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	460c      	mov	r4, r1
 8004ddc:	d904      	bls.n	8004de8 <__itoa+0x14>
 8004dde:	2300      	movs	r3, #0
 8004de0:	700b      	strb	r3, [r1, #0]
 8004de2:	461c      	mov	r4, r3
 8004de4:	4620      	mov	r0, r4
 8004de6:	bd10      	pop	{r4, pc}
 8004de8:	2a0a      	cmp	r2, #10
 8004dea:	d109      	bne.n	8004e00 <__itoa+0x2c>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	da07      	bge.n	8004e00 <__itoa+0x2c>
 8004df0:	232d      	movs	r3, #45	@ 0x2d
 8004df2:	700b      	strb	r3, [r1, #0]
 8004df4:	4240      	negs	r0, r0
 8004df6:	2101      	movs	r1, #1
 8004df8:	4421      	add	r1, r4
 8004dfa:	f000 fe99 	bl	8005b30 <__utoa>
 8004dfe:	e7f1      	b.n	8004de4 <__itoa+0x10>
 8004e00:	2100      	movs	r1, #0
 8004e02:	e7f9      	b.n	8004df8 <__itoa+0x24>

08004e04 <itoa>:
 8004e04:	f7ff bfe6 	b.w	8004dd4 <__itoa>

08004e08 <sulp>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	460d      	mov	r5, r1
 8004e0e:	ec45 4b10 	vmov	d0, r4, r5
 8004e12:	4616      	mov	r6, r2
 8004e14:	f002 f864 	bl	8006ee0 <__ulp>
 8004e18:	ec51 0b10 	vmov	r0, r1, d0
 8004e1c:	b17e      	cbz	r6, 8004e3e <sulp+0x36>
 8004e1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004e22:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	dd09      	ble.n	8004e3e <sulp+0x36>
 8004e2a:	051b      	lsls	r3, r3, #20
 8004e2c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004e30:	2400      	movs	r4, #0
 8004e32:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004e36:	4622      	mov	r2, r4
 8004e38:	462b      	mov	r3, r5
 8004e3a:	f7fb fbed 	bl	8000618 <__aeabi_dmul>
 8004e3e:	ec41 0b10 	vmov	d0, r0, r1
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	0000      	movs	r0, r0
	...

08004e48 <_strtod_l>:
 8004e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4c:	b09f      	sub	sp, #124	@ 0x7c
 8004e4e:	460c      	mov	r4, r1
 8004e50:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004e52:	2200      	movs	r2, #0
 8004e54:	921a      	str	r2, [sp, #104]	@ 0x68
 8004e56:	9005      	str	r0, [sp, #20]
 8004e58:	f04f 0a00 	mov.w	sl, #0
 8004e5c:	f04f 0b00 	mov.w	fp, #0
 8004e60:	460a      	mov	r2, r1
 8004e62:	9219      	str	r2, [sp, #100]	@ 0x64
 8004e64:	7811      	ldrb	r1, [r2, #0]
 8004e66:	292b      	cmp	r1, #43	@ 0x2b
 8004e68:	d04a      	beq.n	8004f00 <_strtod_l+0xb8>
 8004e6a:	d838      	bhi.n	8004ede <_strtod_l+0x96>
 8004e6c:	290d      	cmp	r1, #13
 8004e6e:	d832      	bhi.n	8004ed6 <_strtod_l+0x8e>
 8004e70:	2908      	cmp	r1, #8
 8004e72:	d832      	bhi.n	8004eda <_strtod_l+0x92>
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d03b      	beq.n	8004ef0 <_strtod_l+0xa8>
 8004e78:	2200      	movs	r2, #0
 8004e7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004e7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004e7e:	782a      	ldrb	r2, [r5, #0]
 8004e80:	2a30      	cmp	r2, #48	@ 0x30
 8004e82:	f040 80b3 	bne.w	8004fec <_strtod_l+0x1a4>
 8004e86:	786a      	ldrb	r2, [r5, #1]
 8004e88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004e8c:	2a58      	cmp	r2, #88	@ 0x58
 8004e8e:	d16e      	bne.n	8004f6e <_strtod_l+0x126>
 8004e90:	9302      	str	r3, [sp, #8]
 8004e92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	ab1a      	add	r3, sp, #104	@ 0x68
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	4a8e      	ldr	r2, [pc, #568]	@ (80050d4 <_strtod_l+0x28c>)
 8004e9c:	9805      	ldr	r0, [sp, #20]
 8004e9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004ea0:	a919      	add	r1, sp, #100	@ 0x64
 8004ea2:	f001 f917 	bl	80060d4 <__gethex>
 8004ea6:	f010 060f 	ands.w	r6, r0, #15
 8004eaa:	4604      	mov	r4, r0
 8004eac:	d005      	beq.n	8004eba <_strtod_l+0x72>
 8004eae:	2e06      	cmp	r6, #6
 8004eb0:	d128      	bne.n	8004f04 <_strtod_l+0xbc>
 8004eb2:	3501      	adds	r5, #1
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9519      	str	r5, [sp, #100]	@ 0x64
 8004eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004eba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f040 858e 	bne.w	80059de <_strtod_l+0xb96>
 8004ec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ec4:	b1cb      	cbz	r3, 8004efa <_strtod_l+0xb2>
 8004ec6:	4652      	mov	r2, sl
 8004ec8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8004ecc:	ec43 2b10 	vmov	d0, r2, r3
 8004ed0:	b01f      	add	sp, #124	@ 0x7c
 8004ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed6:	2920      	cmp	r1, #32
 8004ed8:	d1ce      	bne.n	8004e78 <_strtod_l+0x30>
 8004eda:	3201      	adds	r2, #1
 8004edc:	e7c1      	b.n	8004e62 <_strtod_l+0x1a>
 8004ede:	292d      	cmp	r1, #45	@ 0x2d
 8004ee0:	d1ca      	bne.n	8004e78 <_strtod_l+0x30>
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004ee6:	1c51      	adds	r1, r2, #1
 8004ee8:	9119      	str	r1, [sp, #100]	@ 0x64
 8004eea:	7852      	ldrb	r2, [r2, #1]
 8004eec:	2a00      	cmp	r2, #0
 8004eee:	d1c5      	bne.n	8004e7c <_strtod_l+0x34>
 8004ef0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004ef2:	9419      	str	r4, [sp, #100]	@ 0x64
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f040 8570 	bne.w	80059da <_strtod_l+0xb92>
 8004efa:	4652      	mov	r2, sl
 8004efc:	465b      	mov	r3, fp
 8004efe:	e7e5      	b.n	8004ecc <_strtod_l+0x84>
 8004f00:	2100      	movs	r1, #0
 8004f02:	e7ef      	b.n	8004ee4 <_strtod_l+0x9c>
 8004f04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004f06:	b13a      	cbz	r2, 8004f18 <_strtod_l+0xd0>
 8004f08:	2135      	movs	r1, #53	@ 0x35
 8004f0a:	a81c      	add	r0, sp, #112	@ 0x70
 8004f0c:	f002 f8e2 	bl	80070d4 <__copybits>
 8004f10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004f12:	9805      	ldr	r0, [sp, #20]
 8004f14:	f001 fcb0 	bl	8006878 <_Bfree>
 8004f18:	3e01      	subs	r6, #1
 8004f1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004f1c:	2e04      	cmp	r6, #4
 8004f1e:	d806      	bhi.n	8004f2e <_strtod_l+0xe6>
 8004f20:	e8df f006 	tbb	[pc, r6]
 8004f24:	201d0314 	.word	0x201d0314
 8004f28:	14          	.byte	0x14
 8004f29:	00          	.byte	0x00
 8004f2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004f2e:	05e1      	lsls	r1, r4, #23
 8004f30:	bf48      	it	mi
 8004f32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004f36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004f3a:	0d1b      	lsrs	r3, r3, #20
 8004f3c:	051b      	lsls	r3, r3, #20
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1bb      	bne.n	8004eba <_strtod_l+0x72>
 8004f42:	f000 ffcf 	bl	8005ee4 <__errno>
 8004f46:	2322      	movs	r3, #34	@ 0x22
 8004f48:	6003      	str	r3, [r0, #0]
 8004f4a:	e7b6      	b.n	8004eba <_strtod_l+0x72>
 8004f4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004f50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004f54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004f5c:	e7e7      	b.n	8004f2e <_strtod_l+0xe6>
 8004f5e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80050dc <_strtod_l+0x294>
 8004f62:	e7e4      	b.n	8004f2e <_strtod_l+0xe6>
 8004f64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004f68:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004f6c:	e7df      	b.n	8004f2e <_strtod_l+0xe6>
 8004f6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	9219      	str	r2, [sp, #100]	@ 0x64
 8004f74:	785b      	ldrb	r3, [r3, #1]
 8004f76:	2b30      	cmp	r3, #48	@ 0x30
 8004f78:	d0f9      	beq.n	8004f6e <_strtod_l+0x126>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d09d      	beq.n	8004eba <_strtod_l+0x72>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f84:	930c      	str	r3, [sp, #48]	@ 0x30
 8004f86:	2300      	movs	r3, #0
 8004f88:	9308      	str	r3, [sp, #32]
 8004f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f8c:	461f      	mov	r7, r3
 8004f8e:	220a      	movs	r2, #10
 8004f90:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004f92:	7805      	ldrb	r5, [r0, #0]
 8004f94:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004f98:	b2d9      	uxtb	r1, r3
 8004f9a:	2909      	cmp	r1, #9
 8004f9c:	d928      	bls.n	8004ff0 <_strtod_l+0x1a8>
 8004f9e:	494e      	ldr	r1, [pc, #312]	@ (80050d8 <_strtod_l+0x290>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f000 ff34 	bl	8005e0e <strncmp>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d032      	beq.n	8005010 <_strtod_l+0x1c8>
 8004faa:	2000      	movs	r0, #0
 8004fac:	462a      	mov	r2, r5
 8004fae:	4681      	mov	r9, r0
 8004fb0:	463d      	mov	r5, r7
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2a65      	cmp	r2, #101	@ 0x65
 8004fb6:	d001      	beq.n	8004fbc <_strtod_l+0x174>
 8004fb8:	2a45      	cmp	r2, #69	@ 0x45
 8004fba:	d114      	bne.n	8004fe6 <_strtod_l+0x19e>
 8004fbc:	b91d      	cbnz	r5, 8004fc6 <_strtod_l+0x17e>
 8004fbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fc0:	4302      	orrs	r2, r0
 8004fc2:	d095      	beq.n	8004ef0 <_strtod_l+0xa8>
 8004fc4:	2500      	movs	r5, #0
 8004fc6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004fc8:	1c62      	adds	r2, r4, #1
 8004fca:	9219      	str	r2, [sp, #100]	@ 0x64
 8004fcc:	7862      	ldrb	r2, [r4, #1]
 8004fce:	2a2b      	cmp	r2, #43	@ 0x2b
 8004fd0:	d077      	beq.n	80050c2 <_strtod_l+0x27a>
 8004fd2:	2a2d      	cmp	r2, #45	@ 0x2d
 8004fd4:	d07b      	beq.n	80050ce <_strtod_l+0x286>
 8004fd6:	f04f 0c00 	mov.w	ip, #0
 8004fda:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004fde:	2909      	cmp	r1, #9
 8004fe0:	f240 8082 	bls.w	80050e8 <_strtod_l+0x2a0>
 8004fe4:	9419      	str	r4, [sp, #100]	@ 0x64
 8004fe6:	f04f 0800 	mov.w	r8, #0
 8004fea:	e0a2      	b.n	8005132 <_strtod_l+0x2ea>
 8004fec:	2300      	movs	r3, #0
 8004fee:	e7c7      	b.n	8004f80 <_strtod_l+0x138>
 8004ff0:	2f08      	cmp	r7, #8
 8004ff2:	bfd5      	itete	le
 8004ff4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004ff6:	9908      	ldrgt	r1, [sp, #32]
 8004ff8:	fb02 3301 	mlale	r3, r2, r1, r3
 8004ffc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005000:	f100 0001 	add.w	r0, r0, #1
 8005004:	bfd4      	ite	le
 8005006:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005008:	9308      	strgt	r3, [sp, #32]
 800500a:	3701      	adds	r7, #1
 800500c:	9019      	str	r0, [sp, #100]	@ 0x64
 800500e:	e7bf      	b.n	8004f90 <_strtod_l+0x148>
 8005010:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	9219      	str	r2, [sp, #100]	@ 0x64
 8005016:	785a      	ldrb	r2, [r3, #1]
 8005018:	b37f      	cbz	r7, 800507a <_strtod_l+0x232>
 800501a:	4681      	mov	r9, r0
 800501c:	463d      	mov	r5, r7
 800501e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005022:	2b09      	cmp	r3, #9
 8005024:	d912      	bls.n	800504c <_strtod_l+0x204>
 8005026:	2301      	movs	r3, #1
 8005028:	e7c4      	b.n	8004fb4 <_strtod_l+0x16c>
 800502a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005030:	785a      	ldrb	r2, [r3, #1]
 8005032:	3001      	adds	r0, #1
 8005034:	2a30      	cmp	r2, #48	@ 0x30
 8005036:	d0f8      	beq.n	800502a <_strtod_l+0x1e2>
 8005038:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800503c:	2b08      	cmp	r3, #8
 800503e:	f200 84d3 	bhi.w	80059e8 <_strtod_l+0xba0>
 8005042:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005044:	930c      	str	r3, [sp, #48]	@ 0x30
 8005046:	4681      	mov	r9, r0
 8005048:	2000      	movs	r0, #0
 800504a:	4605      	mov	r5, r0
 800504c:	3a30      	subs	r2, #48	@ 0x30
 800504e:	f100 0301 	add.w	r3, r0, #1
 8005052:	d02a      	beq.n	80050aa <_strtod_l+0x262>
 8005054:	4499      	add	r9, r3
 8005056:	eb00 0c05 	add.w	ip, r0, r5
 800505a:	462b      	mov	r3, r5
 800505c:	210a      	movs	r1, #10
 800505e:	4563      	cmp	r3, ip
 8005060:	d10d      	bne.n	800507e <_strtod_l+0x236>
 8005062:	1c69      	adds	r1, r5, #1
 8005064:	4401      	add	r1, r0
 8005066:	4428      	add	r0, r5
 8005068:	2808      	cmp	r0, #8
 800506a:	dc16      	bgt.n	800509a <_strtod_l+0x252>
 800506c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800506e:	230a      	movs	r3, #10
 8005070:	fb03 2300 	mla	r3, r3, r0, r2
 8005074:	930a      	str	r3, [sp, #40]	@ 0x28
 8005076:	2300      	movs	r3, #0
 8005078:	e018      	b.n	80050ac <_strtod_l+0x264>
 800507a:	4638      	mov	r0, r7
 800507c:	e7da      	b.n	8005034 <_strtod_l+0x1ec>
 800507e:	2b08      	cmp	r3, #8
 8005080:	f103 0301 	add.w	r3, r3, #1
 8005084:	dc03      	bgt.n	800508e <_strtod_l+0x246>
 8005086:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005088:	434e      	muls	r6, r1
 800508a:	960a      	str	r6, [sp, #40]	@ 0x28
 800508c:	e7e7      	b.n	800505e <_strtod_l+0x216>
 800508e:	2b10      	cmp	r3, #16
 8005090:	bfde      	ittt	le
 8005092:	9e08      	ldrle	r6, [sp, #32]
 8005094:	434e      	mulle	r6, r1
 8005096:	9608      	strle	r6, [sp, #32]
 8005098:	e7e1      	b.n	800505e <_strtod_l+0x216>
 800509a:	280f      	cmp	r0, #15
 800509c:	dceb      	bgt.n	8005076 <_strtod_l+0x22e>
 800509e:	9808      	ldr	r0, [sp, #32]
 80050a0:	230a      	movs	r3, #10
 80050a2:	fb03 2300 	mla	r3, r3, r0, r2
 80050a6:	9308      	str	r3, [sp, #32]
 80050a8:	e7e5      	b.n	8005076 <_strtod_l+0x22e>
 80050aa:	4629      	mov	r1, r5
 80050ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80050ae:	1c50      	adds	r0, r2, #1
 80050b0:	9019      	str	r0, [sp, #100]	@ 0x64
 80050b2:	7852      	ldrb	r2, [r2, #1]
 80050b4:	4618      	mov	r0, r3
 80050b6:	460d      	mov	r5, r1
 80050b8:	e7b1      	b.n	800501e <_strtod_l+0x1d6>
 80050ba:	f04f 0900 	mov.w	r9, #0
 80050be:	2301      	movs	r3, #1
 80050c0:	e77d      	b.n	8004fbe <_strtod_l+0x176>
 80050c2:	f04f 0c00 	mov.w	ip, #0
 80050c6:	1ca2      	adds	r2, r4, #2
 80050c8:	9219      	str	r2, [sp, #100]	@ 0x64
 80050ca:	78a2      	ldrb	r2, [r4, #2]
 80050cc:	e785      	b.n	8004fda <_strtod_l+0x192>
 80050ce:	f04f 0c01 	mov.w	ip, #1
 80050d2:	e7f8      	b.n	80050c6 <_strtod_l+0x27e>
 80050d4:	0800822c 	.word	0x0800822c
 80050d8:	08008208 	.word	0x08008208
 80050dc:	7ff00000 	.word	0x7ff00000
 80050e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80050e2:	1c51      	adds	r1, r2, #1
 80050e4:	9119      	str	r1, [sp, #100]	@ 0x64
 80050e6:	7852      	ldrb	r2, [r2, #1]
 80050e8:	2a30      	cmp	r2, #48	@ 0x30
 80050ea:	d0f9      	beq.n	80050e0 <_strtod_l+0x298>
 80050ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80050f0:	2908      	cmp	r1, #8
 80050f2:	f63f af78 	bhi.w	8004fe6 <_strtod_l+0x19e>
 80050f6:	3a30      	subs	r2, #48	@ 0x30
 80050f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80050fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80050fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80050fe:	f04f 080a 	mov.w	r8, #10
 8005102:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005104:	1c56      	adds	r6, r2, #1
 8005106:	9619      	str	r6, [sp, #100]	@ 0x64
 8005108:	7852      	ldrb	r2, [r2, #1]
 800510a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800510e:	f1be 0f09 	cmp.w	lr, #9
 8005112:	d939      	bls.n	8005188 <_strtod_l+0x340>
 8005114:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005116:	1a76      	subs	r6, r6, r1
 8005118:	2e08      	cmp	r6, #8
 800511a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800511e:	dc03      	bgt.n	8005128 <_strtod_l+0x2e0>
 8005120:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005122:	4588      	cmp	r8, r1
 8005124:	bfa8      	it	ge
 8005126:	4688      	movge	r8, r1
 8005128:	f1bc 0f00 	cmp.w	ip, #0
 800512c:	d001      	beq.n	8005132 <_strtod_l+0x2ea>
 800512e:	f1c8 0800 	rsb	r8, r8, #0
 8005132:	2d00      	cmp	r5, #0
 8005134:	d14e      	bne.n	80051d4 <_strtod_l+0x38c>
 8005136:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005138:	4308      	orrs	r0, r1
 800513a:	f47f aebe 	bne.w	8004eba <_strtod_l+0x72>
 800513e:	2b00      	cmp	r3, #0
 8005140:	f47f aed6 	bne.w	8004ef0 <_strtod_l+0xa8>
 8005144:	2a69      	cmp	r2, #105	@ 0x69
 8005146:	d028      	beq.n	800519a <_strtod_l+0x352>
 8005148:	dc25      	bgt.n	8005196 <_strtod_l+0x34e>
 800514a:	2a49      	cmp	r2, #73	@ 0x49
 800514c:	d025      	beq.n	800519a <_strtod_l+0x352>
 800514e:	2a4e      	cmp	r2, #78	@ 0x4e
 8005150:	f47f aece 	bne.w	8004ef0 <_strtod_l+0xa8>
 8005154:	499b      	ldr	r1, [pc, #620]	@ (80053c4 <_strtod_l+0x57c>)
 8005156:	a819      	add	r0, sp, #100	@ 0x64
 8005158:	f001 f9de 	bl	8006518 <__match>
 800515c:	2800      	cmp	r0, #0
 800515e:	f43f aec7 	beq.w	8004ef0 <_strtod_l+0xa8>
 8005162:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b28      	cmp	r3, #40	@ 0x28
 8005168:	d12e      	bne.n	80051c8 <_strtod_l+0x380>
 800516a:	4997      	ldr	r1, [pc, #604]	@ (80053c8 <_strtod_l+0x580>)
 800516c:	aa1c      	add	r2, sp, #112	@ 0x70
 800516e:	a819      	add	r0, sp, #100	@ 0x64
 8005170:	f001 f9e6 	bl	8006540 <__hexnan>
 8005174:	2805      	cmp	r0, #5
 8005176:	d127      	bne.n	80051c8 <_strtod_l+0x380>
 8005178:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800517a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800517e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005182:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005186:	e698      	b.n	8004eba <_strtod_l+0x72>
 8005188:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800518a:	fb08 2101 	mla	r1, r8, r1, r2
 800518e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005192:	920e      	str	r2, [sp, #56]	@ 0x38
 8005194:	e7b5      	b.n	8005102 <_strtod_l+0x2ba>
 8005196:	2a6e      	cmp	r2, #110	@ 0x6e
 8005198:	e7da      	b.n	8005150 <_strtod_l+0x308>
 800519a:	498c      	ldr	r1, [pc, #560]	@ (80053cc <_strtod_l+0x584>)
 800519c:	a819      	add	r0, sp, #100	@ 0x64
 800519e:	f001 f9bb 	bl	8006518 <__match>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	f43f aea4 	beq.w	8004ef0 <_strtod_l+0xa8>
 80051a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051aa:	4989      	ldr	r1, [pc, #548]	@ (80053d0 <_strtod_l+0x588>)
 80051ac:	3b01      	subs	r3, #1
 80051ae:	a819      	add	r0, sp, #100	@ 0x64
 80051b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80051b2:	f001 f9b1 	bl	8006518 <__match>
 80051b6:	b910      	cbnz	r0, 80051be <_strtod_l+0x376>
 80051b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051ba:	3301      	adds	r3, #1
 80051bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80051be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80053e0 <_strtod_l+0x598>
 80051c2:	f04f 0a00 	mov.w	sl, #0
 80051c6:	e678      	b.n	8004eba <_strtod_l+0x72>
 80051c8:	4882      	ldr	r0, [pc, #520]	@ (80053d4 <_strtod_l+0x58c>)
 80051ca:	f000 fec9 	bl	8005f60 <nan>
 80051ce:	ec5b ab10 	vmov	sl, fp, d0
 80051d2:	e672      	b.n	8004eba <_strtod_l+0x72>
 80051d4:	eba8 0309 	sub.w	r3, r8, r9
 80051d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80051da:	9309      	str	r3, [sp, #36]	@ 0x24
 80051dc:	2f00      	cmp	r7, #0
 80051de:	bf08      	it	eq
 80051e0:	462f      	moveq	r7, r5
 80051e2:	2d10      	cmp	r5, #16
 80051e4:	462c      	mov	r4, r5
 80051e6:	bfa8      	it	ge
 80051e8:	2410      	movge	r4, #16
 80051ea:	f7fb f99b 	bl	8000524 <__aeabi_ui2d>
 80051ee:	2d09      	cmp	r5, #9
 80051f0:	4682      	mov	sl, r0
 80051f2:	468b      	mov	fp, r1
 80051f4:	dc13      	bgt.n	800521e <_strtod_l+0x3d6>
 80051f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f43f ae5e 	beq.w	8004eba <_strtod_l+0x72>
 80051fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005200:	dd78      	ble.n	80052f4 <_strtod_l+0x4ac>
 8005202:	2b16      	cmp	r3, #22
 8005204:	dc5f      	bgt.n	80052c6 <_strtod_l+0x47e>
 8005206:	4974      	ldr	r1, [pc, #464]	@ (80053d8 <_strtod_l+0x590>)
 8005208:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800520c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005210:	4652      	mov	r2, sl
 8005212:	465b      	mov	r3, fp
 8005214:	f7fb fa00 	bl	8000618 <__aeabi_dmul>
 8005218:	4682      	mov	sl, r0
 800521a:	468b      	mov	fp, r1
 800521c:	e64d      	b.n	8004eba <_strtod_l+0x72>
 800521e:	4b6e      	ldr	r3, [pc, #440]	@ (80053d8 <_strtod_l+0x590>)
 8005220:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005224:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005228:	f7fb f9f6 	bl	8000618 <__aeabi_dmul>
 800522c:	4682      	mov	sl, r0
 800522e:	9808      	ldr	r0, [sp, #32]
 8005230:	468b      	mov	fp, r1
 8005232:	f7fb f977 	bl	8000524 <__aeabi_ui2d>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4650      	mov	r0, sl
 800523c:	4659      	mov	r1, fp
 800523e:	f7fb f835 	bl	80002ac <__adddf3>
 8005242:	2d0f      	cmp	r5, #15
 8005244:	4682      	mov	sl, r0
 8005246:	468b      	mov	fp, r1
 8005248:	ddd5      	ble.n	80051f6 <_strtod_l+0x3ae>
 800524a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800524c:	1b2c      	subs	r4, r5, r4
 800524e:	441c      	add	r4, r3
 8005250:	2c00      	cmp	r4, #0
 8005252:	f340 8096 	ble.w	8005382 <_strtod_l+0x53a>
 8005256:	f014 030f 	ands.w	r3, r4, #15
 800525a:	d00a      	beq.n	8005272 <_strtod_l+0x42a>
 800525c:	495e      	ldr	r1, [pc, #376]	@ (80053d8 <_strtod_l+0x590>)
 800525e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005262:	4652      	mov	r2, sl
 8005264:	465b      	mov	r3, fp
 8005266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800526a:	f7fb f9d5 	bl	8000618 <__aeabi_dmul>
 800526e:	4682      	mov	sl, r0
 8005270:	468b      	mov	fp, r1
 8005272:	f034 040f 	bics.w	r4, r4, #15
 8005276:	d073      	beq.n	8005360 <_strtod_l+0x518>
 8005278:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800527c:	dd48      	ble.n	8005310 <_strtod_l+0x4c8>
 800527e:	2400      	movs	r4, #0
 8005280:	46a0      	mov	r8, r4
 8005282:	940a      	str	r4, [sp, #40]	@ 0x28
 8005284:	46a1      	mov	r9, r4
 8005286:	9a05      	ldr	r2, [sp, #20]
 8005288:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80053e0 <_strtod_l+0x598>
 800528c:	2322      	movs	r3, #34	@ 0x22
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	f04f 0a00 	mov.w	sl, #0
 8005294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005296:	2b00      	cmp	r3, #0
 8005298:	f43f ae0f 	beq.w	8004eba <_strtod_l+0x72>
 800529c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800529e:	9805      	ldr	r0, [sp, #20]
 80052a0:	f001 faea 	bl	8006878 <_Bfree>
 80052a4:	9805      	ldr	r0, [sp, #20]
 80052a6:	4649      	mov	r1, r9
 80052a8:	f001 fae6 	bl	8006878 <_Bfree>
 80052ac:	9805      	ldr	r0, [sp, #20]
 80052ae:	4641      	mov	r1, r8
 80052b0:	f001 fae2 	bl	8006878 <_Bfree>
 80052b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052b6:	9805      	ldr	r0, [sp, #20]
 80052b8:	f001 fade 	bl	8006878 <_Bfree>
 80052bc:	9805      	ldr	r0, [sp, #20]
 80052be:	4621      	mov	r1, r4
 80052c0:	f001 fada 	bl	8006878 <_Bfree>
 80052c4:	e5f9      	b.n	8004eba <_strtod_l+0x72>
 80052c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80052cc:	4293      	cmp	r3, r2
 80052ce:	dbbc      	blt.n	800524a <_strtod_l+0x402>
 80052d0:	4c41      	ldr	r4, [pc, #260]	@ (80053d8 <_strtod_l+0x590>)
 80052d2:	f1c5 050f 	rsb	r5, r5, #15
 80052d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80052da:	4652      	mov	r2, sl
 80052dc:	465b      	mov	r3, fp
 80052de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052e2:	f7fb f999 	bl	8000618 <__aeabi_dmul>
 80052e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e8:	1b5d      	subs	r5, r3, r5
 80052ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80052ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80052f2:	e78f      	b.n	8005214 <_strtod_l+0x3cc>
 80052f4:	3316      	adds	r3, #22
 80052f6:	dba8      	blt.n	800524a <_strtod_l+0x402>
 80052f8:	4b37      	ldr	r3, [pc, #220]	@ (80053d8 <_strtod_l+0x590>)
 80052fa:	eba9 0808 	sub.w	r8, r9, r8
 80052fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005302:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005306:	4650      	mov	r0, sl
 8005308:	4659      	mov	r1, fp
 800530a:	f7fb faaf 	bl	800086c <__aeabi_ddiv>
 800530e:	e783      	b.n	8005218 <_strtod_l+0x3d0>
 8005310:	4b32      	ldr	r3, [pc, #200]	@ (80053dc <_strtod_l+0x594>)
 8005312:	9308      	str	r3, [sp, #32]
 8005314:	2300      	movs	r3, #0
 8005316:	1124      	asrs	r4, r4, #4
 8005318:	4650      	mov	r0, sl
 800531a:	4659      	mov	r1, fp
 800531c:	461e      	mov	r6, r3
 800531e:	2c01      	cmp	r4, #1
 8005320:	dc21      	bgt.n	8005366 <_strtod_l+0x51e>
 8005322:	b10b      	cbz	r3, 8005328 <_strtod_l+0x4e0>
 8005324:	4682      	mov	sl, r0
 8005326:	468b      	mov	fp, r1
 8005328:	492c      	ldr	r1, [pc, #176]	@ (80053dc <_strtod_l+0x594>)
 800532a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800532e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005332:	4652      	mov	r2, sl
 8005334:	465b      	mov	r3, fp
 8005336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800533a:	f7fb f96d 	bl	8000618 <__aeabi_dmul>
 800533e:	4b28      	ldr	r3, [pc, #160]	@ (80053e0 <_strtod_l+0x598>)
 8005340:	460a      	mov	r2, r1
 8005342:	400b      	ands	r3, r1
 8005344:	4927      	ldr	r1, [pc, #156]	@ (80053e4 <_strtod_l+0x59c>)
 8005346:	428b      	cmp	r3, r1
 8005348:	4682      	mov	sl, r0
 800534a:	d898      	bhi.n	800527e <_strtod_l+0x436>
 800534c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005350:	428b      	cmp	r3, r1
 8005352:	bf86      	itte	hi
 8005354:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80053e8 <_strtod_l+0x5a0>
 8005358:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800535c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005360:	2300      	movs	r3, #0
 8005362:	9308      	str	r3, [sp, #32]
 8005364:	e07a      	b.n	800545c <_strtod_l+0x614>
 8005366:	07e2      	lsls	r2, r4, #31
 8005368:	d505      	bpl.n	8005376 <_strtod_l+0x52e>
 800536a:	9b08      	ldr	r3, [sp, #32]
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f7fb f952 	bl	8000618 <__aeabi_dmul>
 8005374:	2301      	movs	r3, #1
 8005376:	9a08      	ldr	r2, [sp, #32]
 8005378:	3208      	adds	r2, #8
 800537a:	3601      	adds	r6, #1
 800537c:	1064      	asrs	r4, r4, #1
 800537e:	9208      	str	r2, [sp, #32]
 8005380:	e7cd      	b.n	800531e <_strtod_l+0x4d6>
 8005382:	d0ed      	beq.n	8005360 <_strtod_l+0x518>
 8005384:	4264      	negs	r4, r4
 8005386:	f014 020f 	ands.w	r2, r4, #15
 800538a:	d00a      	beq.n	80053a2 <_strtod_l+0x55a>
 800538c:	4b12      	ldr	r3, [pc, #72]	@ (80053d8 <_strtod_l+0x590>)
 800538e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005392:	4650      	mov	r0, sl
 8005394:	4659      	mov	r1, fp
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	f7fb fa67 	bl	800086c <__aeabi_ddiv>
 800539e:	4682      	mov	sl, r0
 80053a0:	468b      	mov	fp, r1
 80053a2:	1124      	asrs	r4, r4, #4
 80053a4:	d0dc      	beq.n	8005360 <_strtod_l+0x518>
 80053a6:	2c1f      	cmp	r4, #31
 80053a8:	dd20      	ble.n	80053ec <_strtod_l+0x5a4>
 80053aa:	2400      	movs	r4, #0
 80053ac:	46a0      	mov	r8, r4
 80053ae:	940a      	str	r4, [sp, #40]	@ 0x28
 80053b0:	46a1      	mov	r9, r4
 80053b2:	9a05      	ldr	r2, [sp, #20]
 80053b4:	2322      	movs	r3, #34	@ 0x22
 80053b6:	f04f 0a00 	mov.w	sl, #0
 80053ba:	f04f 0b00 	mov.w	fp, #0
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	e768      	b.n	8005294 <_strtod_l+0x44c>
 80053c2:	bf00      	nop
 80053c4:	08008213 	.word	0x08008213
 80053c8:	08008218 	.word	0x08008218
 80053cc:	0800820a 	.word	0x0800820a
 80053d0:	0800820d 	.word	0x0800820d
 80053d4:	080085e6 	.word	0x080085e6
 80053d8:	080084b0 	.word	0x080084b0
 80053dc:	08008488 	.word	0x08008488
 80053e0:	7ff00000 	.word	0x7ff00000
 80053e4:	7ca00000 	.word	0x7ca00000
 80053e8:	7fefffff 	.word	0x7fefffff
 80053ec:	f014 0310 	ands.w	r3, r4, #16
 80053f0:	bf18      	it	ne
 80053f2:	236a      	movne	r3, #106	@ 0x6a
 80053f4:	4ea9      	ldr	r6, [pc, #676]	@ (800569c <_strtod_l+0x854>)
 80053f6:	9308      	str	r3, [sp, #32]
 80053f8:	4650      	mov	r0, sl
 80053fa:	4659      	mov	r1, fp
 80053fc:	2300      	movs	r3, #0
 80053fe:	07e2      	lsls	r2, r4, #31
 8005400:	d504      	bpl.n	800540c <_strtod_l+0x5c4>
 8005402:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005406:	f7fb f907 	bl	8000618 <__aeabi_dmul>
 800540a:	2301      	movs	r3, #1
 800540c:	1064      	asrs	r4, r4, #1
 800540e:	f106 0608 	add.w	r6, r6, #8
 8005412:	d1f4      	bne.n	80053fe <_strtod_l+0x5b6>
 8005414:	b10b      	cbz	r3, 800541a <_strtod_l+0x5d2>
 8005416:	4682      	mov	sl, r0
 8005418:	468b      	mov	fp, r1
 800541a:	9b08      	ldr	r3, [sp, #32]
 800541c:	b1b3      	cbz	r3, 800544c <_strtod_l+0x604>
 800541e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005422:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005426:	2b00      	cmp	r3, #0
 8005428:	4659      	mov	r1, fp
 800542a:	dd0f      	ble.n	800544c <_strtod_l+0x604>
 800542c:	2b1f      	cmp	r3, #31
 800542e:	dd55      	ble.n	80054dc <_strtod_l+0x694>
 8005430:	2b34      	cmp	r3, #52	@ 0x34
 8005432:	bfde      	ittt	le
 8005434:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8005438:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800543c:	4093      	lslle	r3, r2
 800543e:	f04f 0a00 	mov.w	sl, #0
 8005442:	bfcc      	ite	gt
 8005444:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005448:	ea03 0b01 	andle.w	fp, r3, r1
 800544c:	2200      	movs	r2, #0
 800544e:	2300      	movs	r3, #0
 8005450:	4650      	mov	r0, sl
 8005452:	4659      	mov	r1, fp
 8005454:	f7fb fb48 	bl	8000ae8 <__aeabi_dcmpeq>
 8005458:	2800      	cmp	r0, #0
 800545a:	d1a6      	bne.n	80053aa <_strtod_l+0x562>
 800545c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005462:	9805      	ldr	r0, [sp, #20]
 8005464:	462b      	mov	r3, r5
 8005466:	463a      	mov	r2, r7
 8005468:	f001 fa6e 	bl	8006948 <__s2b>
 800546c:	900a      	str	r0, [sp, #40]	@ 0x28
 800546e:	2800      	cmp	r0, #0
 8005470:	f43f af05 	beq.w	800527e <_strtod_l+0x436>
 8005474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005476:	2a00      	cmp	r2, #0
 8005478:	eba9 0308 	sub.w	r3, r9, r8
 800547c:	bfa8      	it	ge
 800547e:	2300      	movge	r3, #0
 8005480:	9312      	str	r3, [sp, #72]	@ 0x48
 8005482:	2400      	movs	r4, #0
 8005484:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005488:	9316      	str	r3, [sp, #88]	@ 0x58
 800548a:	46a0      	mov	r8, r4
 800548c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800548e:	9805      	ldr	r0, [sp, #20]
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	f001 f9b1 	bl	80067f8 <_Balloc>
 8005496:	4681      	mov	r9, r0
 8005498:	2800      	cmp	r0, #0
 800549a:	f43f aef4 	beq.w	8005286 <_strtod_l+0x43e>
 800549e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	3202      	adds	r2, #2
 80054a4:	f103 010c 	add.w	r1, r3, #12
 80054a8:	0092      	lsls	r2, r2, #2
 80054aa:	300c      	adds	r0, #12
 80054ac:	f000 fd47 	bl	8005f3e <memcpy>
 80054b0:	ec4b ab10 	vmov	d0, sl, fp
 80054b4:	9805      	ldr	r0, [sp, #20]
 80054b6:	aa1c      	add	r2, sp, #112	@ 0x70
 80054b8:	a91b      	add	r1, sp, #108	@ 0x6c
 80054ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80054be:	f001 fd7f 	bl	8006fc0 <__d2b>
 80054c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80054c4:	2800      	cmp	r0, #0
 80054c6:	f43f aede 	beq.w	8005286 <_strtod_l+0x43e>
 80054ca:	9805      	ldr	r0, [sp, #20]
 80054cc:	2101      	movs	r1, #1
 80054ce:	f001 fad1 	bl	8006a74 <__i2b>
 80054d2:	4680      	mov	r8, r0
 80054d4:	b948      	cbnz	r0, 80054ea <_strtod_l+0x6a2>
 80054d6:	f04f 0800 	mov.w	r8, #0
 80054da:	e6d4      	b.n	8005286 <_strtod_l+0x43e>
 80054dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	ea03 0a0a 	and.w	sl, r3, sl
 80054e8:	e7b0      	b.n	800544c <_strtod_l+0x604>
 80054ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80054ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	bfab      	itete	ge
 80054f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80054f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80054f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80054f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80054fa:	bfac      	ite	ge
 80054fc:	18ef      	addge	r7, r5, r3
 80054fe:	1b5e      	sublt	r6, r3, r5
 8005500:	9b08      	ldr	r3, [sp, #32]
 8005502:	1aed      	subs	r5, r5, r3
 8005504:	4415      	add	r5, r2
 8005506:	4b66      	ldr	r3, [pc, #408]	@ (80056a0 <_strtod_l+0x858>)
 8005508:	3d01      	subs	r5, #1
 800550a:	429d      	cmp	r5, r3
 800550c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005510:	da50      	bge.n	80055b4 <_strtod_l+0x76c>
 8005512:	1b5b      	subs	r3, r3, r5
 8005514:	2b1f      	cmp	r3, #31
 8005516:	eba2 0203 	sub.w	r2, r2, r3
 800551a:	f04f 0101 	mov.w	r1, #1
 800551e:	dc3d      	bgt.n	800559c <_strtod_l+0x754>
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005526:	2300      	movs	r3, #0
 8005528:	9310      	str	r3, [sp, #64]	@ 0x40
 800552a:	18bd      	adds	r5, r7, r2
 800552c:	9b08      	ldr	r3, [sp, #32]
 800552e:	42af      	cmp	r7, r5
 8005530:	4416      	add	r6, r2
 8005532:	441e      	add	r6, r3
 8005534:	463b      	mov	r3, r7
 8005536:	bfa8      	it	ge
 8005538:	462b      	movge	r3, r5
 800553a:	42b3      	cmp	r3, r6
 800553c:	bfa8      	it	ge
 800553e:	4633      	movge	r3, r6
 8005540:	2b00      	cmp	r3, #0
 8005542:	bfc2      	ittt	gt
 8005544:	1aed      	subgt	r5, r5, r3
 8005546:	1af6      	subgt	r6, r6, r3
 8005548:	1aff      	subgt	r7, r7, r3
 800554a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800554c:	2b00      	cmp	r3, #0
 800554e:	dd16      	ble.n	800557e <_strtod_l+0x736>
 8005550:	4641      	mov	r1, r8
 8005552:	9805      	ldr	r0, [sp, #20]
 8005554:	461a      	mov	r2, r3
 8005556:	f001 fb4d 	bl	8006bf4 <__pow5mult>
 800555a:	4680      	mov	r8, r0
 800555c:	2800      	cmp	r0, #0
 800555e:	d0ba      	beq.n	80054d6 <_strtod_l+0x68e>
 8005560:	4601      	mov	r1, r0
 8005562:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005564:	9805      	ldr	r0, [sp, #20]
 8005566:	f001 fa9b 	bl	8006aa0 <__multiply>
 800556a:	900e      	str	r0, [sp, #56]	@ 0x38
 800556c:	2800      	cmp	r0, #0
 800556e:	f43f ae8a 	beq.w	8005286 <_strtod_l+0x43e>
 8005572:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005574:	9805      	ldr	r0, [sp, #20]
 8005576:	f001 f97f 	bl	8006878 <_Bfree>
 800557a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800557c:	931a      	str	r3, [sp, #104]	@ 0x68
 800557e:	2d00      	cmp	r5, #0
 8005580:	dc1d      	bgt.n	80055be <_strtod_l+0x776>
 8005582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	dd23      	ble.n	80055d0 <_strtod_l+0x788>
 8005588:	4649      	mov	r1, r9
 800558a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800558c:	9805      	ldr	r0, [sp, #20]
 800558e:	f001 fb31 	bl	8006bf4 <__pow5mult>
 8005592:	4681      	mov	r9, r0
 8005594:	b9e0      	cbnz	r0, 80055d0 <_strtod_l+0x788>
 8005596:	f04f 0900 	mov.w	r9, #0
 800559a:	e674      	b.n	8005286 <_strtod_l+0x43e>
 800559c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80055a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80055a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80055a8:	35e2      	adds	r5, #226	@ 0xe2
 80055aa:	fa01 f305 	lsl.w	r3, r1, r5
 80055ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80055b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80055b2:	e7ba      	b.n	800552a <_strtod_l+0x6e2>
 80055b4:	2300      	movs	r3, #0
 80055b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80055b8:	2301      	movs	r3, #1
 80055ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80055bc:	e7b5      	b.n	800552a <_strtod_l+0x6e2>
 80055be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80055c0:	9805      	ldr	r0, [sp, #20]
 80055c2:	462a      	mov	r2, r5
 80055c4:	f001 fb70 	bl	8006ca8 <__lshift>
 80055c8:	901a      	str	r0, [sp, #104]	@ 0x68
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d1d9      	bne.n	8005582 <_strtod_l+0x73a>
 80055ce:	e65a      	b.n	8005286 <_strtod_l+0x43e>
 80055d0:	2e00      	cmp	r6, #0
 80055d2:	dd07      	ble.n	80055e4 <_strtod_l+0x79c>
 80055d4:	4649      	mov	r1, r9
 80055d6:	9805      	ldr	r0, [sp, #20]
 80055d8:	4632      	mov	r2, r6
 80055da:	f001 fb65 	bl	8006ca8 <__lshift>
 80055de:	4681      	mov	r9, r0
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d0d8      	beq.n	8005596 <_strtod_l+0x74e>
 80055e4:	2f00      	cmp	r7, #0
 80055e6:	dd08      	ble.n	80055fa <_strtod_l+0x7b2>
 80055e8:	4641      	mov	r1, r8
 80055ea:	9805      	ldr	r0, [sp, #20]
 80055ec:	463a      	mov	r2, r7
 80055ee:	f001 fb5b 	bl	8006ca8 <__lshift>
 80055f2:	4680      	mov	r8, r0
 80055f4:	2800      	cmp	r0, #0
 80055f6:	f43f ae46 	beq.w	8005286 <_strtod_l+0x43e>
 80055fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80055fc:	9805      	ldr	r0, [sp, #20]
 80055fe:	464a      	mov	r2, r9
 8005600:	f001 fbda 	bl	8006db8 <__mdiff>
 8005604:	4604      	mov	r4, r0
 8005606:	2800      	cmp	r0, #0
 8005608:	f43f ae3d 	beq.w	8005286 <_strtod_l+0x43e>
 800560c:	68c3      	ldr	r3, [r0, #12]
 800560e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005610:	2300      	movs	r3, #0
 8005612:	60c3      	str	r3, [r0, #12]
 8005614:	4641      	mov	r1, r8
 8005616:	f001 fbb3 	bl	8006d80 <__mcmp>
 800561a:	2800      	cmp	r0, #0
 800561c:	da46      	bge.n	80056ac <_strtod_l+0x864>
 800561e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005620:	ea53 030a 	orrs.w	r3, r3, sl
 8005624:	d16c      	bne.n	8005700 <_strtod_l+0x8b8>
 8005626:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800562a:	2b00      	cmp	r3, #0
 800562c:	d168      	bne.n	8005700 <_strtod_l+0x8b8>
 800562e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005632:	0d1b      	lsrs	r3, r3, #20
 8005634:	051b      	lsls	r3, r3, #20
 8005636:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800563a:	d961      	bls.n	8005700 <_strtod_l+0x8b8>
 800563c:	6963      	ldr	r3, [r4, #20]
 800563e:	b913      	cbnz	r3, 8005646 <_strtod_l+0x7fe>
 8005640:	6923      	ldr	r3, [r4, #16]
 8005642:	2b01      	cmp	r3, #1
 8005644:	dd5c      	ble.n	8005700 <_strtod_l+0x8b8>
 8005646:	4621      	mov	r1, r4
 8005648:	2201      	movs	r2, #1
 800564a:	9805      	ldr	r0, [sp, #20]
 800564c:	f001 fb2c 	bl	8006ca8 <__lshift>
 8005650:	4641      	mov	r1, r8
 8005652:	4604      	mov	r4, r0
 8005654:	f001 fb94 	bl	8006d80 <__mcmp>
 8005658:	2800      	cmp	r0, #0
 800565a:	dd51      	ble.n	8005700 <_strtod_l+0x8b8>
 800565c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005660:	9a08      	ldr	r2, [sp, #32]
 8005662:	0d1b      	lsrs	r3, r3, #20
 8005664:	051b      	lsls	r3, r3, #20
 8005666:	2a00      	cmp	r2, #0
 8005668:	d06b      	beq.n	8005742 <_strtod_l+0x8fa>
 800566a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800566e:	d868      	bhi.n	8005742 <_strtod_l+0x8fa>
 8005670:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005674:	f67f ae9d 	bls.w	80053b2 <_strtod_l+0x56a>
 8005678:	4b0a      	ldr	r3, [pc, #40]	@ (80056a4 <_strtod_l+0x85c>)
 800567a:	4650      	mov	r0, sl
 800567c:	4659      	mov	r1, fp
 800567e:	2200      	movs	r2, #0
 8005680:	f7fa ffca 	bl	8000618 <__aeabi_dmul>
 8005684:	4b08      	ldr	r3, [pc, #32]	@ (80056a8 <_strtod_l+0x860>)
 8005686:	400b      	ands	r3, r1
 8005688:	4682      	mov	sl, r0
 800568a:	468b      	mov	fp, r1
 800568c:	2b00      	cmp	r3, #0
 800568e:	f47f ae05 	bne.w	800529c <_strtod_l+0x454>
 8005692:	9a05      	ldr	r2, [sp, #20]
 8005694:	2322      	movs	r3, #34	@ 0x22
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e600      	b.n	800529c <_strtod_l+0x454>
 800569a:	bf00      	nop
 800569c:	08008240 	.word	0x08008240
 80056a0:	fffffc02 	.word	0xfffffc02
 80056a4:	39500000 	.word	0x39500000
 80056a8:	7ff00000 	.word	0x7ff00000
 80056ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80056b0:	d165      	bne.n	800577e <_strtod_l+0x936>
 80056b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80056b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056b8:	b35a      	cbz	r2, 8005712 <_strtod_l+0x8ca>
 80056ba:	4a9f      	ldr	r2, [pc, #636]	@ (8005938 <_strtod_l+0xaf0>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d12b      	bne.n	8005718 <_strtod_l+0x8d0>
 80056c0:	9b08      	ldr	r3, [sp, #32]
 80056c2:	4651      	mov	r1, sl
 80056c4:	b303      	cbz	r3, 8005708 <_strtod_l+0x8c0>
 80056c6:	4b9d      	ldr	r3, [pc, #628]	@ (800593c <_strtod_l+0xaf4>)
 80056c8:	465a      	mov	r2, fp
 80056ca:	4013      	ands	r3, r2
 80056cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056d4:	d81b      	bhi.n	800570e <_strtod_l+0x8c6>
 80056d6:	0d1b      	lsrs	r3, r3, #20
 80056d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	4299      	cmp	r1, r3
 80056e2:	d119      	bne.n	8005718 <_strtod_l+0x8d0>
 80056e4:	4b96      	ldr	r3, [pc, #600]	@ (8005940 <_strtod_l+0xaf8>)
 80056e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d102      	bne.n	80056f2 <_strtod_l+0x8aa>
 80056ec:	3101      	adds	r1, #1
 80056ee:	f43f adca 	beq.w	8005286 <_strtod_l+0x43e>
 80056f2:	4b92      	ldr	r3, [pc, #584]	@ (800593c <_strtod_l+0xaf4>)
 80056f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056f6:	401a      	ands	r2, r3
 80056f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80056fc:	f04f 0a00 	mov.w	sl, #0
 8005700:	9b08      	ldr	r3, [sp, #32]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1b8      	bne.n	8005678 <_strtod_l+0x830>
 8005706:	e5c9      	b.n	800529c <_strtod_l+0x454>
 8005708:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800570c:	e7e8      	b.n	80056e0 <_strtod_l+0x898>
 800570e:	4613      	mov	r3, r2
 8005710:	e7e6      	b.n	80056e0 <_strtod_l+0x898>
 8005712:	ea53 030a 	orrs.w	r3, r3, sl
 8005716:	d0a1      	beq.n	800565c <_strtod_l+0x814>
 8005718:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800571a:	b1db      	cbz	r3, 8005754 <_strtod_l+0x90c>
 800571c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800571e:	4213      	tst	r3, r2
 8005720:	d0ee      	beq.n	8005700 <_strtod_l+0x8b8>
 8005722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005724:	9a08      	ldr	r2, [sp, #32]
 8005726:	4650      	mov	r0, sl
 8005728:	4659      	mov	r1, fp
 800572a:	b1bb      	cbz	r3, 800575c <_strtod_l+0x914>
 800572c:	f7ff fb6c 	bl	8004e08 <sulp>
 8005730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005734:	ec53 2b10 	vmov	r2, r3, d0
 8005738:	f7fa fdb8 	bl	80002ac <__adddf3>
 800573c:	4682      	mov	sl, r0
 800573e:	468b      	mov	fp, r1
 8005740:	e7de      	b.n	8005700 <_strtod_l+0x8b8>
 8005742:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005746:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800574a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800574e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005752:	e7d5      	b.n	8005700 <_strtod_l+0x8b8>
 8005754:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005756:	ea13 0f0a 	tst.w	r3, sl
 800575a:	e7e1      	b.n	8005720 <_strtod_l+0x8d8>
 800575c:	f7ff fb54 	bl	8004e08 <sulp>
 8005760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005764:	ec53 2b10 	vmov	r2, r3, d0
 8005768:	f7fa fd9e 	bl	80002a8 <__aeabi_dsub>
 800576c:	2200      	movs	r2, #0
 800576e:	2300      	movs	r3, #0
 8005770:	4682      	mov	sl, r0
 8005772:	468b      	mov	fp, r1
 8005774:	f7fb f9b8 	bl	8000ae8 <__aeabi_dcmpeq>
 8005778:	2800      	cmp	r0, #0
 800577a:	d0c1      	beq.n	8005700 <_strtod_l+0x8b8>
 800577c:	e619      	b.n	80053b2 <_strtod_l+0x56a>
 800577e:	4641      	mov	r1, r8
 8005780:	4620      	mov	r0, r4
 8005782:	f001 fc75 	bl	8007070 <__ratio>
 8005786:	ec57 6b10 	vmov	r6, r7, d0
 800578a:	2200      	movs	r2, #0
 800578c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005790:	4630      	mov	r0, r6
 8005792:	4639      	mov	r1, r7
 8005794:	f7fb f9bc 	bl	8000b10 <__aeabi_dcmple>
 8005798:	2800      	cmp	r0, #0
 800579a:	d06f      	beq.n	800587c <_strtod_l+0xa34>
 800579c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d17a      	bne.n	8005898 <_strtod_l+0xa50>
 80057a2:	f1ba 0f00 	cmp.w	sl, #0
 80057a6:	d158      	bne.n	800585a <_strtod_l+0xa12>
 80057a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d15a      	bne.n	8005868 <_strtod_l+0xa20>
 80057b2:	4b64      	ldr	r3, [pc, #400]	@ (8005944 <_strtod_l+0xafc>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	4630      	mov	r0, r6
 80057b8:	4639      	mov	r1, r7
 80057ba:	f7fb f99f 	bl	8000afc <__aeabi_dcmplt>
 80057be:	2800      	cmp	r0, #0
 80057c0:	d159      	bne.n	8005876 <_strtod_l+0xa2e>
 80057c2:	4630      	mov	r0, r6
 80057c4:	4639      	mov	r1, r7
 80057c6:	4b60      	ldr	r3, [pc, #384]	@ (8005948 <_strtod_l+0xb00>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	f7fa ff25 	bl	8000618 <__aeabi_dmul>
 80057ce:	4606      	mov	r6, r0
 80057d0:	460f      	mov	r7, r1
 80057d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80057d6:	9606      	str	r6, [sp, #24]
 80057d8:	9307      	str	r3, [sp, #28]
 80057da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057de:	4d57      	ldr	r5, [pc, #348]	@ (800593c <_strtod_l+0xaf4>)
 80057e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80057e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057e6:	401d      	ands	r5, r3
 80057e8:	4b58      	ldr	r3, [pc, #352]	@ (800594c <_strtod_l+0xb04>)
 80057ea:	429d      	cmp	r5, r3
 80057ec:	f040 80b2 	bne.w	8005954 <_strtod_l+0xb0c>
 80057f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80057f6:	ec4b ab10 	vmov	d0, sl, fp
 80057fa:	f001 fb71 	bl	8006ee0 <__ulp>
 80057fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005802:	ec51 0b10 	vmov	r0, r1, d0
 8005806:	f7fa ff07 	bl	8000618 <__aeabi_dmul>
 800580a:	4652      	mov	r2, sl
 800580c:	465b      	mov	r3, fp
 800580e:	f7fa fd4d 	bl	80002ac <__adddf3>
 8005812:	460b      	mov	r3, r1
 8005814:	4949      	ldr	r1, [pc, #292]	@ (800593c <_strtod_l+0xaf4>)
 8005816:	4a4e      	ldr	r2, [pc, #312]	@ (8005950 <_strtod_l+0xb08>)
 8005818:	4019      	ands	r1, r3
 800581a:	4291      	cmp	r1, r2
 800581c:	4682      	mov	sl, r0
 800581e:	d942      	bls.n	80058a6 <_strtod_l+0xa5e>
 8005820:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005822:	4b47      	ldr	r3, [pc, #284]	@ (8005940 <_strtod_l+0xaf8>)
 8005824:	429a      	cmp	r2, r3
 8005826:	d103      	bne.n	8005830 <_strtod_l+0x9e8>
 8005828:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800582a:	3301      	adds	r3, #1
 800582c:	f43f ad2b 	beq.w	8005286 <_strtod_l+0x43e>
 8005830:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005940 <_strtod_l+0xaf8>
 8005834:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005838:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800583a:	9805      	ldr	r0, [sp, #20]
 800583c:	f001 f81c 	bl	8006878 <_Bfree>
 8005840:	9805      	ldr	r0, [sp, #20]
 8005842:	4649      	mov	r1, r9
 8005844:	f001 f818 	bl	8006878 <_Bfree>
 8005848:	9805      	ldr	r0, [sp, #20]
 800584a:	4641      	mov	r1, r8
 800584c:	f001 f814 	bl	8006878 <_Bfree>
 8005850:	9805      	ldr	r0, [sp, #20]
 8005852:	4621      	mov	r1, r4
 8005854:	f001 f810 	bl	8006878 <_Bfree>
 8005858:	e618      	b.n	800548c <_strtod_l+0x644>
 800585a:	f1ba 0f01 	cmp.w	sl, #1
 800585e:	d103      	bne.n	8005868 <_strtod_l+0xa20>
 8005860:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005862:	2b00      	cmp	r3, #0
 8005864:	f43f ada5 	beq.w	80053b2 <_strtod_l+0x56a>
 8005868:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005918 <_strtod_l+0xad0>
 800586c:	4f35      	ldr	r7, [pc, #212]	@ (8005944 <_strtod_l+0xafc>)
 800586e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005872:	2600      	movs	r6, #0
 8005874:	e7b1      	b.n	80057da <_strtod_l+0x992>
 8005876:	4f34      	ldr	r7, [pc, #208]	@ (8005948 <_strtod_l+0xb00>)
 8005878:	2600      	movs	r6, #0
 800587a:	e7aa      	b.n	80057d2 <_strtod_l+0x98a>
 800587c:	4b32      	ldr	r3, [pc, #200]	@ (8005948 <_strtod_l+0xb00>)
 800587e:	4630      	mov	r0, r6
 8005880:	4639      	mov	r1, r7
 8005882:	2200      	movs	r2, #0
 8005884:	f7fa fec8 	bl	8000618 <__aeabi_dmul>
 8005888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800588a:	4606      	mov	r6, r0
 800588c:	460f      	mov	r7, r1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d09f      	beq.n	80057d2 <_strtod_l+0x98a>
 8005892:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005896:	e7a0      	b.n	80057da <_strtod_l+0x992>
 8005898:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005920 <_strtod_l+0xad8>
 800589c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80058a0:	ec57 6b17 	vmov	r6, r7, d7
 80058a4:	e799      	b.n	80057da <_strtod_l+0x992>
 80058a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80058aa:	9b08      	ldr	r3, [sp, #32]
 80058ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1c1      	bne.n	8005838 <_strtod_l+0x9f0>
 80058b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80058b8:	0d1b      	lsrs	r3, r3, #20
 80058ba:	051b      	lsls	r3, r3, #20
 80058bc:	429d      	cmp	r5, r3
 80058be:	d1bb      	bne.n	8005838 <_strtod_l+0x9f0>
 80058c0:	4630      	mov	r0, r6
 80058c2:	4639      	mov	r1, r7
 80058c4:	f7fb f9ca 	bl	8000c5c <__aeabi_d2lz>
 80058c8:	f7fa fe78 	bl	80005bc <__aeabi_l2d>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4630      	mov	r0, r6
 80058d2:	4639      	mov	r1, r7
 80058d4:	f7fa fce8 	bl	80002a8 <__aeabi_dsub>
 80058d8:	460b      	mov	r3, r1
 80058da:	4602      	mov	r2, r0
 80058dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80058e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80058e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058e6:	ea46 060a 	orr.w	r6, r6, sl
 80058ea:	431e      	orrs	r6, r3
 80058ec:	d06f      	beq.n	80059ce <_strtod_l+0xb86>
 80058ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8005928 <_strtod_l+0xae0>)
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f7fb f902 	bl	8000afc <__aeabi_dcmplt>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	f47f accf 	bne.w	800529c <_strtod_l+0x454>
 80058fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8005930 <_strtod_l+0xae8>)
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005908:	f7fb f916 	bl	8000b38 <__aeabi_dcmpgt>
 800590c:	2800      	cmp	r0, #0
 800590e:	d093      	beq.n	8005838 <_strtod_l+0x9f0>
 8005910:	e4c4      	b.n	800529c <_strtod_l+0x454>
 8005912:	bf00      	nop
 8005914:	f3af 8000 	nop.w
 8005918:	00000000 	.word	0x00000000
 800591c:	bff00000 	.word	0xbff00000
 8005920:	00000000 	.word	0x00000000
 8005924:	3ff00000 	.word	0x3ff00000
 8005928:	94a03595 	.word	0x94a03595
 800592c:	3fdfffff 	.word	0x3fdfffff
 8005930:	35afe535 	.word	0x35afe535
 8005934:	3fe00000 	.word	0x3fe00000
 8005938:	000fffff 	.word	0x000fffff
 800593c:	7ff00000 	.word	0x7ff00000
 8005940:	7fefffff 	.word	0x7fefffff
 8005944:	3ff00000 	.word	0x3ff00000
 8005948:	3fe00000 	.word	0x3fe00000
 800594c:	7fe00000 	.word	0x7fe00000
 8005950:	7c9fffff 	.word	0x7c9fffff
 8005954:	9b08      	ldr	r3, [sp, #32]
 8005956:	b323      	cbz	r3, 80059a2 <_strtod_l+0xb5a>
 8005958:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800595c:	d821      	bhi.n	80059a2 <_strtod_l+0xb5a>
 800595e:	a328      	add	r3, pc, #160	@ (adr r3, 8005a00 <_strtod_l+0xbb8>)
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	4630      	mov	r0, r6
 8005966:	4639      	mov	r1, r7
 8005968:	f7fb f8d2 	bl	8000b10 <__aeabi_dcmple>
 800596c:	b1a0      	cbz	r0, 8005998 <_strtod_l+0xb50>
 800596e:	4639      	mov	r1, r7
 8005970:	4630      	mov	r0, r6
 8005972:	f7fb f8eb 	bl	8000b4c <__aeabi_d2uiz>
 8005976:	2801      	cmp	r0, #1
 8005978:	bf38      	it	cc
 800597a:	2001      	movcc	r0, #1
 800597c:	f7fa fdd2 	bl	8000524 <__aeabi_ui2d>
 8005980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005982:	4606      	mov	r6, r0
 8005984:	460f      	mov	r7, r1
 8005986:	b9fb      	cbnz	r3, 80059c8 <_strtod_l+0xb80>
 8005988:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800598c:	9014      	str	r0, [sp, #80]	@ 0x50
 800598e:	9315      	str	r3, [sp, #84]	@ 0x54
 8005990:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005994:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005998:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800599a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800599e:	1b5b      	subs	r3, r3, r5
 80059a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80059a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80059a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80059aa:	f001 fa99 	bl	8006ee0 <__ulp>
 80059ae:	4650      	mov	r0, sl
 80059b0:	ec53 2b10 	vmov	r2, r3, d0
 80059b4:	4659      	mov	r1, fp
 80059b6:	f7fa fe2f 	bl	8000618 <__aeabi_dmul>
 80059ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80059be:	f7fa fc75 	bl	80002ac <__adddf3>
 80059c2:	4682      	mov	sl, r0
 80059c4:	468b      	mov	fp, r1
 80059c6:	e770      	b.n	80058aa <_strtod_l+0xa62>
 80059c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80059cc:	e7e0      	b.n	8005990 <_strtod_l+0xb48>
 80059ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8005a08 <_strtod_l+0xbc0>)
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	f7fb f892 	bl	8000afc <__aeabi_dcmplt>
 80059d8:	e798      	b.n	800590c <_strtod_l+0xac4>
 80059da:	2300      	movs	r3, #0
 80059dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80059e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	f7ff ba6d 	b.w	8004ec2 <_strtod_l+0x7a>
 80059e8:	2a65      	cmp	r2, #101	@ 0x65
 80059ea:	f43f ab66 	beq.w	80050ba <_strtod_l+0x272>
 80059ee:	2a45      	cmp	r2, #69	@ 0x45
 80059f0:	f43f ab63 	beq.w	80050ba <_strtod_l+0x272>
 80059f4:	2301      	movs	r3, #1
 80059f6:	f7ff bb9e 	b.w	8005136 <_strtod_l+0x2ee>
 80059fa:	bf00      	nop
 80059fc:	f3af 8000 	nop.w
 8005a00:	ffc00000 	.word	0xffc00000
 8005a04:	41dfffff 	.word	0x41dfffff
 8005a08:	94a03595 	.word	0x94a03595
 8005a0c:	3fcfffff 	.word	0x3fcfffff

08005a10 <strtod>:
 8005a10:	460a      	mov	r2, r1
 8005a12:	4601      	mov	r1, r0
 8005a14:	4802      	ldr	r0, [pc, #8]	@ (8005a20 <strtod+0x10>)
 8005a16:	4b03      	ldr	r3, [pc, #12]	@ (8005a24 <strtod+0x14>)
 8005a18:	6800      	ldr	r0, [r0, #0]
 8005a1a:	f7ff ba15 	b.w	8004e48 <_strtod_l>
 8005a1e:	bf00      	nop
 8005a20:	20000184 	.word	0x20000184
 8005a24:	20000018 	.word	0x20000018

08005a28 <_strtol_l.constprop.0>:
 8005a28:	2b24      	cmp	r3, #36	@ 0x24
 8005a2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a2e:	4686      	mov	lr, r0
 8005a30:	4690      	mov	r8, r2
 8005a32:	d801      	bhi.n	8005a38 <_strtol_l.constprop.0+0x10>
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d106      	bne.n	8005a46 <_strtol_l.constprop.0+0x1e>
 8005a38:	f000 fa54 	bl	8005ee4 <__errno>
 8005a3c:	2316      	movs	r3, #22
 8005a3e:	6003      	str	r3, [r0, #0]
 8005a40:	2000      	movs	r0, #0
 8005a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a46:	4834      	ldr	r0, [pc, #208]	@ (8005b18 <_strtol_l.constprop.0+0xf0>)
 8005a48:	460d      	mov	r5, r1
 8005a4a:	462a      	mov	r2, r5
 8005a4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a50:	5d06      	ldrb	r6, [r0, r4]
 8005a52:	f016 0608 	ands.w	r6, r6, #8
 8005a56:	d1f8      	bne.n	8005a4a <_strtol_l.constprop.0+0x22>
 8005a58:	2c2d      	cmp	r4, #45	@ 0x2d
 8005a5a:	d12d      	bne.n	8005ab8 <_strtol_l.constprop.0+0x90>
 8005a5c:	782c      	ldrb	r4, [r5, #0]
 8005a5e:	2601      	movs	r6, #1
 8005a60:	1c95      	adds	r5, r2, #2
 8005a62:	f033 0210 	bics.w	r2, r3, #16
 8005a66:	d109      	bne.n	8005a7c <_strtol_l.constprop.0+0x54>
 8005a68:	2c30      	cmp	r4, #48	@ 0x30
 8005a6a:	d12a      	bne.n	8005ac2 <_strtol_l.constprop.0+0x9a>
 8005a6c:	782a      	ldrb	r2, [r5, #0]
 8005a6e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a72:	2a58      	cmp	r2, #88	@ 0x58
 8005a74:	d125      	bne.n	8005ac2 <_strtol_l.constprop.0+0x9a>
 8005a76:	786c      	ldrb	r4, [r5, #1]
 8005a78:	2310      	movs	r3, #16
 8005a7a:	3502      	adds	r5, #2
 8005a7c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005a80:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005a84:	2200      	movs	r2, #0
 8005a86:	fbbc f9f3 	udiv	r9, ip, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005a90:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005a94:	2f09      	cmp	r7, #9
 8005a96:	d81b      	bhi.n	8005ad0 <_strtol_l.constprop.0+0xa8>
 8005a98:	463c      	mov	r4, r7
 8005a9a:	42a3      	cmp	r3, r4
 8005a9c:	dd27      	ble.n	8005aee <_strtol_l.constprop.0+0xc6>
 8005a9e:	1c57      	adds	r7, r2, #1
 8005aa0:	d007      	beq.n	8005ab2 <_strtol_l.constprop.0+0x8a>
 8005aa2:	4581      	cmp	r9, r0
 8005aa4:	d320      	bcc.n	8005ae8 <_strtol_l.constprop.0+0xc0>
 8005aa6:	d101      	bne.n	8005aac <_strtol_l.constprop.0+0x84>
 8005aa8:	45a2      	cmp	sl, r4
 8005aaa:	db1d      	blt.n	8005ae8 <_strtol_l.constprop.0+0xc0>
 8005aac:	fb00 4003 	mla	r0, r0, r3, r4
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ab6:	e7eb      	b.n	8005a90 <_strtol_l.constprop.0+0x68>
 8005ab8:	2c2b      	cmp	r4, #43	@ 0x2b
 8005aba:	bf04      	itt	eq
 8005abc:	782c      	ldrbeq	r4, [r5, #0]
 8005abe:	1c95      	addeq	r5, r2, #2
 8005ac0:	e7cf      	b.n	8005a62 <_strtol_l.constprop.0+0x3a>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1da      	bne.n	8005a7c <_strtol_l.constprop.0+0x54>
 8005ac6:	2c30      	cmp	r4, #48	@ 0x30
 8005ac8:	bf0c      	ite	eq
 8005aca:	2308      	moveq	r3, #8
 8005acc:	230a      	movne	r3, #10
 8005ace:	e7d5      	b.n	8005a7c <_strtol_l.constprop.0+0x54>
 8005ad0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005ad4:	2f19      	cmp	r7, #25
 8005ad6:	d801      	bhi.n	8005adc <_strtol_l.constprop.0+0xb4>
 8005ad8:	3c37      	subs	r4, #55	@ 0x37
 8005ada:	e7de      	b.n	8005a9a <_strtol_l.constprop.0+0x72>
 8005adc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005ae0:	2f19      	cmp	r7, #25
 8005ae2:	d804      	bhi.n	8005aee <_strtol_l.constprop.0+0xc6>
 8005ae4:	3c57      	subs	r4, #87	@ 0x57
 8005ae6:	e7d8      	b.n	8005a9a <_strtol_l.constprop.0+0x72>
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005aec:	e7e1      	b.n	8005ab2 <_strtol_l.constprop.0+0x8a>
 8005aee:	1c53      	adds	r3, r2, #1
 8005af0:	d108      	bne.n	8005b04 <_strtol_l.constprop.0+0xdc>
 8005af2:	2322      	movs	r3, #34	@ 0x22
 8005af4:	f8ce 3000 	str.w	r3, [lr]
 8005af8:	4660      	mov	r0, ip
 8005afa:	f1b8 0f00 	cmp.w	r8, #0
 8005afe:	d0a0      	beq.n	8005a42 <_strtol_l.constprop.0+0x1a>
 8005b00:	1e69      	subs	r1, r5, #1
 8005b02:	e006      	b.n	8005b12 <_strtol_l.constprop.0+0xea>
 8005b04:	b106      	cbz	r6, 8005b08 <_strtol_l.constprop.0+0xe0>
 8005b06:	4240      	negs	r0, r0
 8005b08:	f1b8 0f00 	cmp.w	r8, #0
 8005b0c:	d099      	beq.n	8005a42 <_strtol_l.constprop.0+0x1a>
 8005b0e:	2a00      	cmp	r2, #0
 8005b10:	d1f6      	bne.n	8005b00 <_strtol_l.constprop.0+0xd8>
 8005b12:	f8c8 1000 	str.w	r1, [r8]
 8005b16:	e794      	b.n	8005a42 <_strtol_l.constprop.0+0x1a>
 8005b18:	0800828e 	.word	0x0800828e

08005b1c <strtol>:
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	460a      	mov	r2, r1
 8005b20:	4601      	mov	r1, r0
 8005b22:	4802      	ldr	r0, [pc, #8]	@ (8005b2c <strtol+0x10>)
 8005b24:	6800      	ldr	r0, [r0, #0]
 8005b26:	f7ff bf7f 	b.w	8005a28 <_strtol_l.constprop.0>
 8005b2a:	bf00      	nop
 8005b2c:	20000184 	.word	0x20000184

08005b30 <__utoa>:
 8005b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b32:	4c1f      	ldr	r4, [pc, #124]	@ (8005bb0 <__utoa+0x80>)
 8005b34:	b08b      	sub	sp, #44	@ 0x2c
 8005b36:	4605      	mov	r5, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	466e      	mov	r6, sp
 8005b3c:	f104 0c20 	add.w	ip, r4, #32
 8005b40:	6820      	ldr	r0, [r4, #0]
 8005b42:	6861      	ldr	r1, [r4, #4]
 8005b44:	4637      	mov	r7, r6
 8005b46:	c703      	stmia	r7!, {r0, r1}
 8005b48:	3408      	adds	r4, #8
 8005b4a:	4564      	cmp	r4, ip
 8005b4c:	463e      	mov	r6, r7
 8005b4e:	d1f7      	bne.n	8005b40 <__utoa+0x10>
 8005b50:	7921      	ldrb	r1, [r4, #4]
 8005b52:	7139      	strb	r1, [r7, #4]
 8005b54:	1e91      	subs	r1, r2, #2
 8005b56:	6820      	ldr	r0, [r4, #0]
 8005b58:	6038      	str	r0, [r7, #0]
 8005b5a:	2922      	cmp	r1, #34	@ 0x22
 8005b5c:	f04f 0100 	mov.w	r1, #0
 8005b60:	d904      	bls.n	8005b6c <__utoa+0x3c>
 8005b62:	7019      	strb	r1, [r3, #0]
 8005b64:	460b      	mov	r3, r1
 8005b66:	4618      	mov	r0, r3
 8005b68:	b00b      	add	sp, #44	@ 0x2c
 8005b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b6c:	1e58      	subs	r0, r3, #1
 8005b6e:	4684      	mov	ip, r0
 8005b70:	fbb5 f7f2 	udiv	r7, r5, r2
 8005b74:	fb02 5617 	mls	r6, r2, r7, r5
 8005b78:	3628      	adds	r6, #40	@ 0x28
 8005b7a:	446e      	add	r6, sp
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005b82:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005b86:	462e      	mov	r6, r5
 8005b88:	42b2      	cmp	r2, r6
 8005b8a:	f101 0101 	add.w	r1, r1, #1
 8005b8e:	463d      	mov	r5, r7
 8005b90:	d9ee      	bls.n	8005b70 <__utoa+0x40>
 8005b92:	2200      	movs	r2, #0
 8005b94:	545a      	strb	r2, [r3, r1]
 8005b96:	1919      	adds	r1, r3, r4
 8005b98:	1aa5      	subs	r5, r4, r2
 8005b9a:	42aa      	cmp	r2, r5
 8005b9c:	dae3      	bge.n	8005b66 <__utoa+0x36>
 8005b9e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005ba2:	780e      	ldrb	r6, [r1, #0]
 8005ba4:	7006      	strb	r6, [r0, #0]
 8005ba6:	3201      	adds	r2, #1
 8005ba8:	f801 5901 	strb.w	r5, [r1], #-1
 8005bac:	e7f4      	b.n	8005b98 <__utoa+0x68>
 8005bae:	bf00      	nop
 8005bb0:	08008268 	.word	0x08008268

08005bb4 <std>:
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	4604      	mov	r4, r0
 8005bba:	e9c0 3300 	strd	r3, r3, [r0]
 8005bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bc2:	6083      	str	r3, [r0, #8]
 8005bc4:	8181      	strh	r1, [r0, #12]
 8005bc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bc8:	81c2      	strh	r2, [r0, #14]
 8005bca:	6183      	str	r3, [r0, #24]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	2208      	movs	r2, #8
 8005bd0:	305c      	adds	r0, #92	@ 0x5c
 8005bd2:	f000 f914 	bl	8005dfe <memset>
 8005bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c0c <std+0x58>)
 8005bd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bda:	4b0d      	ldr	r3, [pc, #52]	@ (8005c10 <std+0x5c>)
 8005bdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bde:	4b0d      	ldr	r3, [pc, #52]	@ (8005c14 <std+0x60>)
 8005be0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005be2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c18 <std+0x64>)
 8005be4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005be6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c1c <std+0x68>)
 8005be8:	6224      	str	r4, [r4, #32]
 8005bea:	429c      	cmp	r4, r3
 8005bec:	d006      	beq.n	8005bfc <std+0x48>
 8005bee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bf2:	4294      	cmp	r4, r2
 8005bf4:	d002      	beq.n	8005bfc <std+0x48>
 8005bf6:	33d0      	adds	r3, #208	@ 0xd0
 8005bf8:	429c      	cmp	r4, r3
 8005bfa:	d105      	bne.n	8005c08 <std+0x54>
 8005bfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c04:	f000 b998 	b.w	8005f38 <__retarget_lock_init_recursive>
 8005c08:	bd10      	pop	{r4, pc}
 8005c0a:	bf00      	nop
 8005c0c:	08005d79 	.word	0x08005d79
 8005c10:	08005d9b 	.word	0x08005d9b
 8005c14:	08005dd3 	.word	0x08005dd3
 8005c18:	08005df7 	.word	0x08005df7
 8005c1c:	2000108c 	.word	0x2000108c

08005c20 <stdio_exit_handler>:
 8005c20:	4a02      	ldr	r2, [pc, #8]	@ (8005c2c <stdio_exit_handler+0xc>)
 8005c22:	4903      	ldr	r1, [pc, #12]	@ (8005c30 <stdio_exit_handler+0x10>)
 8005c24:	4803      	ldr	r0, [pc, #12]	@ (8005c34 <stdio_exit_handler+0x14>)
 8005c26:	f000 b869 	b.w	8005cfc <_fwalk_sglue>
 8005c2a:	bf00      	nop
 8005c2c:	2000000c 	.word	0x2000000c
 8005c30:	08007849 	.word	0x08007849
 8005c34:	20000188 	.word	0x20000188

08005c38 <cleanup_stdio>:
 8005c38:	6841      	ldr	r1, [r0, #4]
 8005c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c6c <cleanup_stdio+0x34>)
 8005c3c:	4299      	cmp	r1, r3
 8005c3e:	b510      	push	{r4, lr}
 8005c40:	4604      	mov	r4, r0
 8005c42:	d001      	beq.n	8005c48 <cleanup_stdio+0x10>
 8005c44:	f001 fe00 	bl	8007848 <_fflush_r>
 8005c48:	68a1      	ldr	r1, [r4, #8]
 8005c4a:	4b09      	ldr	r3, [pc, #36]	@ (8005c70 <cleanup_stdio+0x38>)
 8005c4c:	4299      	cmp	r1, r3
 8005c4e:	d002      	beq.n	8005c56 <cleanup_stdio+0x1e>
 8005c50:	4620      	mov	r0, r4
 8005c52:	f001 fdf9 	bl	8007848 <_fflush_r>
 8005c56:	68e1      	ldr	r1, [r4, #12]
 8005c58:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <cleanup_stdio+0x3c>)
 8005c5a:	4299      	cmp	r1, r3
 8005c5c:	d004      	beq.n	8005c68 <cleanup_stdio+0x30>
 8005c5e:	4620      	mov	r0, r4
 8005c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c64:	f001 bdf0 	b.w	8007848 <_fflush_r>
 8005c68:	bd10      	pop	{r4, pc}
 8005c6a:	bf00      	nop
 8005c6c:	2000108c 	.word	0x2000108c
 8005c70:	200010f4 	.word	0x200010f4
 8005c74:	2000115c 	.word	0x2000115c

08005c78 <global_stdio_init.part.0>:
 8005c78:	b510      	push	{r4, lr}
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <global_stdio_init.part.0+0x30>)
 8005c7c:	4c0b      	ldr	r4, [pc, #44]	@ (8005cac <global_stdio_init.part.0+0x34>)
 8005c7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005cb0 <global_stdio_init.part.0+0x38>)
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	4620      	mov	r0, r4
 8005c84:	2200      	movs	r2, #0
 8005c86:	2104      	movs	r1, #4
 8005c88:	f7ff ff94 	bl	8005bb4 <std>
 8005c8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c90:	2201      	movs	r2, #1
 8005c92:	2109      	movs	r1, #9
 8005c94:	f7ff ff8e 	bl	8005bb4 <std>
 8005c98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ca2:	2112      	movs	r1, #18
 8005ca4:	f7ff bf86 	b.w	8005bb4 <std>
 8005ca8:	200011c4 	.word	0x200011c4
 8005cac:	2000108c 	.word	0x2000108c
 8005cb0:	08005c21 	.word	0x08005c21

08005cb4 <__sfp_lock_acquire>:
 8005cb4:	4801      	ldr	r0, [pc, #4]	@ (8005cbc <__sfp_lock_acquire+0x8>)
 8005cb6:	f000 b940 	b.w	8005f3a <__retarget_lock_acquire_recursive>
 8005cba:	bf00      	nop
 8005cbc:	200011cd 	.word	0x200011cd

08005cc0 <__sfp_lock_release>:
 8005cc0:	4801      	ldr	r0, [pc, #4]	@ (8005cc8 <__sfp_lock_release+0x8>)
 8005cc2:	f000 b93b 	b.w	8005f3c <__retarget_lock_release_recursive>
 8005cc6:	bf00      	nop
 8005cc8:	200011cd 	.word	0x200011cd

08005ccc <__sinit>:
 8005ccc:	b510      	push	{r4, lr}
 8005cce:	4604      	mov	r4, r0
 8005cd0:	f7ff fff0 	bl	8005cb4 <__sfp_lock_acquire>
 8005cd4:	6a23      	ldr	r3, [r4, #32]
 8005cd6:	b11b      	cbz	r3, 8005ce0 <__sinit+0x14>
 8005cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cdc:	f7ff bff0 	b.w	8005cc0 <__sfp_lock_release>
 8005ce0:	4b04      	ldr	r3, [pc, #16]	@ (8005cf4 <__sinit+0x28>)
 8005ce2:	6223      	str	r3, [r4, #32]
 8005ce4:	4b04      	ldr	r3, [pc, #16]	@ (8005cf8 <__sinit+0x2c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f5      	bne.n	8005cd8 <__sinit+0xc>
 8005cec:	f7ff ffc4 	bl	8005c78 <global_stdio_init.part.0>
 8005cf0:	e7f2      	b.n	8005cd8 <__sinit+0xc>
 8005cf2:	bf00      	nop
 8005cf4:	08005c39 	.word	0x08005c39
 8005cf8:	200011c4 	.word	0x200011c4

08005cfc <_fwalk_sglue>:
 8005cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d00:	4607      	mov	r7, r0
 8005d02:	4688      	mov	r8, r1
 8005d04:	4614      	mov	r4, r2
 8005d06:	2600      	movs	r6, #0
 8005d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8005d10:	d505      	bpl.n	8005d1e <_fwalk_sglue+0x22>
 8005d12:	6824      	ldr	r4, [r4, #0]
 8005d14:	2c00      	cmp	r4, #0
 8005d16:	d1f7      	bne.n	8005d08 <_fwalk_sglue+0xc>
 8005d18:	4630      	mov	r0, r6
 8005d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d1e:	89ab      	ldrh	r3, [r5, #12]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d907      	bls.n	8005d34 <_fwalk_sglue+0x38>
 8005d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	d003      	beq.n	8005d34 <_fwalk_sglue+0x38>
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	4638      	mov	r0, r7
 8005d30:	47c0      	blx	r8
 8005d32:	4306      	orrs	r6, r0
 8005d34:	3568      	adds	r5, #104	@ 0x68
 8005d36:	e7e9      	b.n	8005d0c <_fwalk_sglue+0x10>

08005d38 <siprintf>:
 8005d38:	b40e      	push	{r1, r2, r3}
 8005d3a:	b500      	push	{lr}
 8005d3c:	b09c      	sub	sp, #112	@ 0x70
 8005d3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d40:	9002      	str	r0, [sp, #8]
 8005d42:	9006      	str	r0, [sp, #24]
 8005d44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d48:	4809      	ldr	r0, [pc, #36]	@ (8005d70 <siprintf+0x38>)
 8005d4a:	9107      	str	r1, [sp, #28]
 8005d4c:	9104      	str	r1, [sp, #16]
 8005d4e:	4909      	ldr	r1, [pc, #36]	@ (8005d74 <siprintf+0x3c>)
 8005d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d54:	9105      	str	r1, [sp, #20]
 8005d56:	6800      	ldr	r0, [r0, #0]
 8005d58:	9301      	str	r3, [sp, #4]
 8005d5a:	a902      	add	r1, sp, #8
 8005d5c:	f001 fa66 	bl	800722c <_svfiprintf_r>
 8005d60:	9b02      	ldr	r3, [sp, #8]
 8005d62:	2200      	movs	r2, #0
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	b01c      	add	sp, #112	@ 0x70
 8005d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d6c:	b003      	add	sp, #12
 8005d6e:	4770      	bx	lr
 8005d70:	20000184 	.word	0x20000184
 8005d74:	ffff0208 	.word	0xffff0208

08005d78 <__sread>:
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d80:	f000 f88c 	bl	8005e9c <_read_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	bfab      	itete	ge
 8005d88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d8c:	181b      	addge	r3, r3, r0
 8005d8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d92:	bfac      	ite	ge
 8005d94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d96:	81a3      	strhlt	r3, [r4, #12]
 8005d98:	bd10      	pop	{r4, pc}

08005d9a <__swrite>:
 8005d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9e:	461f      	mov	r7, r3
 8005da0:	898b      	ldrh	r3, [r1, #12]
 8005da2:	05db      	lsls	r3, r3, #23
 8005da4:	4605      	mov	r5, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	4616      	mov	r6, r2
 8005daa:	d505      	bpl.n	8005db8 <__swrite+0x1e>
 8005dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db0:	2302      	movs	r3, #2
 8005db2:	2200      	movs	r2, #0
 8005db4:	f000 f860 	bl	8005e78 <_lseek_r>
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	4632      	mov	r2, r6
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	4628      	mov	r0, r5
 8005dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dce:	f000 b877 	b.w	8005ec0 <_write_r>

08005dd2 <__sseek>:
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dda:	f000 f84d 	bl	8005e78 <_lseek_r>
 8005dde:	1c43      	adds	r3, r0, #1
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	bf15      	itete	ne
 8005de4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005de6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dee:	81a3      	strheq	r3, [r4, #12]
 8005df0:	bf18      	it	ne
 8005df2:	81a3      	strhne	r3, [r4, #12]
 8005df4:	bd10      	pop	{r4, pc}

08005df6 <__sclose>:
 8005df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfa:	f000 b82d 	b.w	8005e58 <_close_r>

08005dfe <memset>:
 8005dfe:	4402      	add	r2, r0
 8005e00:	4603      	mov	r3, r0
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d100      	bne.n	8005e08 <memset+0xa>
 8005e06:	4770      	bx	lr
 8005e08:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0c:	e7f9      	b.n	8005e02 <memset+0x4>

08005e0e <strncmp>:
 8005e0e:	b510      	push	{r4, lr}
 8005e10:	b16a      	cbz	r2, 8005e2e <strncmp+0x20>
 8005e12:	3901      	subs	r1, #1
 8005e14:	1884      	adds	r4, r0, r2
 8005e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e1a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d103      	bne.n	8005e2a <strncmp+0x1c>
 8005e22:	42a0      	cmp	r0, r4
 8005e24:	d001      	beq.n	8005e2a <strncmp+0x1c>
 8005e26:	2a00      	cmp	r2, #0
 8005e28:	d1f5      	bne.n	8005e16 <strncmp+0x8>
 8005e2a:	1ad0      	subs	r0, r2, r3
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	4610      	mov	r0, r2
 8005e30:	e7fc      	b.n	8005e2c <strncmp+0x1e>

08005e32 <strncpy>:
 8005e32:	b510      	push	{r4, lr}
 8005e34:	3901      	subs	r1, #1
 8005e36:	4603      	mov	r3, r0
 8005e38:	b132      	cbz	r2, 8005e48 <strncpy+0x16>
 8005e3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005e3e:	f803 4b01 	strb.w	r4, [r3], #1
 8005e42:	3a01      	subs	r2, #1
 8005e44:	2c00      	cmp	r4, #0
 8005e46:	d1f7      	bne.n	8005e38 <strncpy+0x6>
 8005e48:	441a      	add	r2, r3
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d100      	bne.n	8005e52 <strncpy+0x20>
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	f803 1b01 	strb.w	r1, [r3], #1
 8005e56:	e7f9      	b.n	8005e4c <strncpy+0x1a>

08005e58 <_close_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4d06      	ldr	r5, [pc, #24]	@ (8005e74 <_close_r+0x1c>)
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	4604      	mov	r4, r0
 8005e60:	4608      	mov	r0, r1
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	f7fc faca 	bl	80023fc <_close>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_close_r+0x1a>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_close_r+0x1a>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	200011c8 	.word	0x200011c8

08005e78 <_lseek_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4d07      	ldr	r5, [pc, #28]	@ (8005e98 <_lseek_r+0x20>)
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	4608      	mov	r0, r1
 8005e80:	4611      	mov	r1, r2
 8005e82:	2200      	movs	r2, #0
 8005e84:	602a      	str	r2, [r5, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f7fc fadf 	bl	800244a <_lseek>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d102      	bne.n	8005e96 <_lseek_r+0x1e>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	b103      	cbz	r3, 8005e96 <_lseek_r+0x1e>
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	200011c8 	.word	0x200011c8

08005e9c <_read_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4d07      	ldr	r5, [pc, #28]	@ (8005ebc <_read_r+0x20>)
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	602a      	str	r2, [r5, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f7fc fa6d 	bl	800238a <_read>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_read_r+0x1e>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_read_r+0x1e>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	200011c8 	.word	0x200011c8

08005ec0 <_write_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4d07      	ldr	r5, [pc, #28]	@ (8005ee0 <_write_r+0x20>)
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	4608      	mov	r0, r1
 8005ec8:	4611      	mov	r1, r2
 8005eca:	2200      	movs	r2, #0
 8005ecc:	602a      	str	r2, [r5, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f7fc fa78 	bl	80023c4 <_write>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_write_r+0x1e>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_write_r+0x1e>
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	200011c8 	.word	0x200011c8

08005ee4 <__errno>:
 8005ee4:	4b01      	ldr	r3, [pc, #4]	@ (8005eec <__errno+0x8>)
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	20000184 	.word	0x20000184

08005ef0 <__libc_init_array>:
 8005ef0:	b570      	push	{r4, r5, r6, lr}
 8005ef2:	4d0d      	ldr	r5, [pc, #52]	@ (8005f28 <__libc_init_array+0x38>)
 8005ef4:	4c0d      	ldr	r4, [pc, #52]	@ (8005f2c <__libc_init_array+0x3c>)
 8005ef6:	1b64      	subs	r4, r4, r5
 8005ef8:	10a4      	asrs	r4, r4, #2
 8005efa:	2600      	movs	r6, #0
 8005efc:	42a6      	cmp	r6, r4
 8005efe:	d109      	bne.n	8005f14 <__libc_init_array+0x24>
 8005f00:	4d0b      	ldr	r5, [pc, #44]	@ (8005f30 <__libc_init_array+0x40>)
 8005f02:	4c0c      	ldr	r4, [pc, #48]	@ (8005f34 <__libc_init_array+0x44>)
 8005f04:	f002 f818 	bl	8007f38 <_init>
 8005f08:	1b64      	subs	r4, r4, r5
 8005f0a:	10a4      	asrs	r4, r4, #2
 8005f0c:	2600      	movs	r6, #0
 8005f0e:	42a6      	cmp	r6, r4
 8005f10:	d105      	bne.n	8005f1e <__libc_init_array+0x2e>
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
 8005f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f18:	4798      	blx	r3
 8005f1a:	3601      	adds	r6, #1
 8005f1c:	e7ee      	b.n	8005efc <__libc_init_array+0xc>
 8005f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f22:	4798      	blx	r3
 8005f24:	3601      	adds	r6, #1
 8005f26:	e7f2      	b.n	8005f0e <__libc_init_array+0x1e>
 8005f28:	080085f0 	.word	0x080085f0
 8005f2c:	080085f0 	.word	0x080085f0
 8005f30:	080085f0 	.word	0x080085f0
 8005f34:	080085f4 	.word	0x080085f4

08005f38 <__retarget_lock_init_recursive>:
 8005f38:	4770      	bx	lr

08005f3a <__retarget_lock_acquire_recursive>:
 8005f3a:	4770      	bx	lr

08005f3c <__retarget_lock_release_recursive>:
 8005f3c:	4770      	bx	lr

08005f3e <memcpy>:
 8005f3e:	440a      	add	r2, r1
 8005f40:	4291      	cmp	r1, r2
 8005f42:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005f46:	d100      	bne.n	8005f4a <memcpy+0xc>
 8005f48:	4770      	bx	lr
 8005f4a:	b510      	push	{r4, lr}
 8005f4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f54:	4291      	cmp	r1, r2
 8005f56:	d1f9      	bne.n	8005f4c <memcpy+0xe>
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	0000      	movs	r0, r0
 8005f5c:	0000      	movs	r0, r0
	...

08005f60 <nan>:
 8005f60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005f68 <nan+0x8>
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	00000000 	.word	0x00000000
 8005f6c:	7ff80000 	.word	0x7ff80000

08005f70 <_free_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4605      	mov	r5, r0
 8005f74:	2900      	cmp	r1, #0
 8005f76:	d041      	beq.n	8005ffc <_free_r+0x8c>
 8005f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f7c:	1f0c      	subs	r4, r1, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfb8      	it	lt
 8005f82:	18e4      	addlt	r4, r4, r3
 8005f84:	f000 fc2c 	bl	80067e0 <__malloc_lock>
 8005f88:	4a1d      	ldr	r2, [pc, #116]	@ (8006000 <_free_r+0x90>)
 8005f8a:	6813      	ldr	r3, [r2, #0]
 8005f8c:	b933      	cbnz	r3, 8005f9c <_free_r+0x2c>
 8005f8e:	6063      	str	r3, [r4, #4]
 8005f90:	6014      	str	r4, [r2, #0]
 8005f92:	4628      	mov	r0, r5
 8005f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f98:	f000 bc28 	b.w	80067ec <__malloc_unlock>
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	d908      	bls.n	8005fb2 <_free_r+0x42>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	1821      	adds	r1, r4, r0
 8005fa4:	428b      	cmp	r3, r1
 8005fa6:	bf01      	itttt	eq
 8005fa8:	6819      	ldreq	r1, [r3, #0]
 8005faa:	685b      	ldreq	r3, [r3, #4]
 8005fac:	1809      	addeq	r1, r1, r0
 8005fae:	6021      	streq	r1, [r4, #0]
 8005fb0:	e7ed      	b.n	8005f8e <_free_r+0x1e>
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	b10b      	cbz	r3, 8005fbc <_free_r+0x4c>
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	d9fa      	bls.n	8005fb2 <_free_r+0x42>
 8005fbc:	6811      	ldr	r1, [r2, #0]
 8005fbe:	1850      	adds	r0, r2, r1
 8005fc0:	42a0      	cmp	r0, r4
 8005fc2:	d10b      	bne.n	8005fdc <_free_r+0x6c>
 8005fc4:	6820      	ldr	r0, [r4, #0]
 8005fc6:	4401      	add	r1, r0
 8005fc8:	1850      	adds	r0, r2, r1
 8005fca:	4283      	cmp	r3, r0
 8005fcc:	6011      	str	r1, [r2, #0]
 8005fce:	d1e0      	bne.n	8005f92 <_free_r+0x22>
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	6053      	str	r3, [r2, #4]
 8005fd6:	4408      	add	r0, r1
 8005fd8:	6010      	str	r0, [r2, #0]
 8005fda:	e7da      	b.n	8005f92 <_free_r+0x22>
 8005fdc:	d902      	bls.n	8005fe4 <_free_r+0x74>
 8005fde:	230c      	movs	r3, #12
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	e7d6      	b.n	8005f92 <_free_r+0x22>
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	1821      	adds	r1, r4, r0
 8005fe8:	428b      	cmp	r3, r1
 8005fea:	bf04      	itt	eq
 8005fec:	6819      	ldreq	r1, [r3, #0]
 8005fee:	685b      	ldreq	r3, [r3, #4]
 8005ff0:	6063      	str	r3, [r4, #4]
 8005ff2:	bf04      	itt	eq
 8005ff4:	1809      	addeq	r1, r1, r0
 8005ff6:	6021      	streq	r1, [r4, #0]
 8005ff8:	6054      	str	r4, [r2, #4]
 8005ffa:	e7ca      	b.n	8005f92 <_free_r+0x22>
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
 8005ffe:	bf00      	nop
 8006000:	200011d4 	.word	0x200011d4

08006004 <rshift>:
 8006004:	6903      	ldr	r3, [r0, #16]
 8006006:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800600a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800600e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006012:	f100 0414 	add.w	r4, r0, #20
 8006016:	dd45      	ble.n	80060a4 <rshift+0xa0>
 8006018:	f011 011f 	ands.w	r1, r1, #31
 800601c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006020:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006024:	d10c      	bne.n	8006040 <rshift+0x3c>
 8006026:	f100 0710 	add.w	r7, r0, #16
 800602a:	4629      	mov	r1, r5
 800602c:	42b1      	cmp	r1, r6
 800602e:	d334      	bcc.n	800609a <rshift+0x96>
 8006030:	1a9b      	subs	r3, r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	1eea      	subs	r2, r5, #3
 8006036:	4296      	cmp	r6, r2
 8006038:	bf38      	it	cc
 800603a:	2300      	movcc	r3, #0
 800603c:	4423      	add	r3, r4
 800603e:	e015      	b.n	800606c <rshift+0x68>
 8006040:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006044:	f1c1 0820 	rsb	r8, r1, #32
 8006048:	40cf      	lsrs	r7, r1
 800604a:	f105 0e04 	add.w	lr, r5, #4
 800604e:	46a1      	mov	r9, r4
 8006050:	4576      	cmp	r6, lr
 8006052:	46f4      	mov	ip, lr
 8006054:	d815      	bhi.n	8006082 <rshift+0x7e>
 8006056:	1a9a      	subs	r2, r3, r2
 8006058:	0092      	lsls	r2, r2, #2
 800605a:	3a04      	subs	r2, #4
 800605c:	3501      	adds	r5, #1
 800605e:	42ae      	cmp	r6, r5
 8006060:	bf38      	it	cc
 8006062:	2200      	movcc	r2, #0
 8006064:	18a3      	adds	r3, r4, r2
 8006066:	50a7      	str	r7, [r4, r2]
 8006068:	b107      	cbz	r7, 800606c <rshift+0x68>
 800606a:	3304      	adds	r3, #4
 800606c:	1b1a      	subs	r2, r3, r4
 800606e:	42a3      	cmp	r3, r4
 8006070:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006074:	bf08      	it	eq
 8006076:	2300      	moveq	r3, #0
 8006078:	6102      	str	r2, [r0, #16]
 800607a:	bf08      	it	eq
 800607c:	6143      	streq	r3, [r0, #20]
 800607e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006082:	f8dc c000 	ldr.w	ip, [ip]
 8006086:	fa0c fc08 	lsl.w	ip, ip, r8
 800608a:	ea4c 0707 	orr.w	r7, ip, r7
 800608e:	f849 7b04 	str.w	r7, [r9], #4
 8006092:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006096:	40cf      	lsrs	r7, r1
 8006098:	e7da      	b.n	8006050 <rshift+0x4c>
 800609a:	f851 cb04 	ldr.w	ip, [r1], #4
 800609e:	f847 cf04 	str.w	ip, [r7, #4]!
 80060a2:	e7c3      	b.n	800602c <rshift+0x28>
 80060a4:	4623      	mov	r3, r4
 80060a6:	e7e1      	b.n	800606c <rshift+0x68>

080060a8 <__hexdig_fun>:
 80060a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80060ac:	2b09      	cmp	r3, #9
 80060ae:	d802      	bhi.n	80060b6 <__hexdig_fun+0xe>
 80060b0:	3820      	subs	r0, #32
 80060b2:	b2c0      	uxtb	r0, r0
 80060b4:	4770      	bx	lr
 80060b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80060ba:	2b05      	cmp	r3, #5
 80060bc:	d801      	bhi.n	80060c2 <__hexdig_fun+0x1a>
 80060be:	3847      	subs	r0, #71	@ 0x47
 80060c0:	e7f7      	b.n	80060b2 <__hexdig_fun+0xa>
 80060c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80060c6:	2b05      	cmp	r3, #5
 80060c8:	d801      	bhi.n	80060ce <__hexdig_fun+0x26>
 80060ca:	3827      	subs	r0, #39	@ 0x27
 80060cc:	e7f1      	b.n	80060b2 <__hexdig_fun+0xa>
 80060ce:	2000      	movs	r0, #0
 80060d0:	4770      	bx	lr
	...

080060d4 <__gethex>:
 80060d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	b085      	sub	sp, #20
 80060da:	468a      	mov	sl, r1
 80060dc:	9302      	str	r3, [sp, #8]
 80060de:	680b      	ldr	r3, [r1, #0]
 80060e0:	9001      	str	r0, [sp, #4]
 80060e2:	4690      	mov	r8, r2
 80060e4:	1c9c      	adds	r4, r3, #2
 80060e6:	46a1      	mov	r9, r4
 80060e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80060ec:	2830      	cmp	r0, #48	@ 0x30
 80060ee:	d0fa      	beq.n	80060e6 <__gethex+0x12>
 80060f0:	eba9 0303 	sub.w	r3, r9, r3
 80060f4:	f1a3 0b02 	sub.w	fp, r3, #2
 80060f8:	f7ff ffd6 	bl	80060a8 <__hexdig_fun>
 80060fc:	4605      	mov	r5, r0
 80060fe:	2800      	cmp	r0, #0
 8006100:	d168      	bne.n	80061d4 <__gethex+0x100>
 8006102:	49a0      	ldr	r1, [pc, #640]	@ (8006384 <__gethex+0x2b0>)
 8006104:	2201      	movs	r2, #1
 8006106:	4648      	mov	r0, r9
 8006108:	f7ff fe81 	bl	8005e0e <strncmp>
 800610c:	4607      	mov	r7, r0
 800610e:	2800      	cmp	r0, #0
 8006110:	d167      	bne.n	80061e2 <__gethex+0x10e>
 8006112:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006116:	4626      	mov	r6, r4
 8006118:	f7ff ffc6 	bl	80060a8 <__hexdig_fun>
 800611c:	2800      	cmp	r0, #0
 800611e:	d062      	beq.n	80061e6 <__gethex+0x112>
 8006120:	4623      	mov	r3, r4
 8006122:	7818      	ldrb	r0, [r3, #0]
 8006124:	2830      	cmp	r0, #48	@ 0x30
 8006126:	4699      	mov	r9, r3
 8006128:	f103 0301 	add.w	r3, r3, #1
 800612c:	d0f9      	beq.n	8006122 <__gethex+0x4e>
 800612e:	f7ff ffbb 	bl	80060a8 <__hexdig_fun>
 8006132:	fab0 f580 	clz	r5, r0
 8006136:	096d      	lsrs	r5, r5, #5
 8006138:	f04f 0b01 	mov.w	fp, #1
 800613c:	464a      	mov	r2, r9
 800613e:	4616      	mov	r6, r2
 8006140:	3201      	adds	r2, #1
 8006142:	7830      	ldrb	r0, [r6, #0]
 8006144:	f7ff ffb0 	bl	80060a8 <__hexdig_fun>
 8006148:	2800      	cmp	r0, #0
 800614a:	d1f8      	bne.n	800613e <__gethex+0x6a>
 800614c:	498d      	ldr	r1, [pc, #564]	@ (8006384 <__gethex+0x2b0>)
 800614e:	2201      	movs	r2, #1
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff fe5c 	bl	8005e0e <strncmp>
 8006156:	2800      	cmp	r0, #0
 8006158:	d13f      	bne.n	80061da <__gethex+0x106>
 800615a:	b944      	cbnz	r4, 800616e <__gethex+0x9a>
 800615c:	1c74      	adds	r4, r6, #1
 800615e:	4622      	mov	r2, r4
 8006160:	4616      	mov	r6, r2
 8006162:	3201      	adds	r2, #1
 8006164:	7830      	ldrb	r0, [r6, #0]
 8006166:	f7ff ff9f 	bl	80060a8 <__hexdig_fun>
 800616a:	2800      	cmp	r0, #0
 800616c:	d1f8      	bne.n	8006160 <__gethex+0x8c>
 800616e:	1ba4      	subs	r4, r4, r6
 8006170:	00a7      	lsls	r7, r4, #2
 8006172:	7833      	ldrb	r3, [r6, #0]
 8006174:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006178:	2b50      	cmp	r3, #80	@ 0x50
 800617a:	d13e      	bne.n	80061fa <__gethex+0x126>
 800617c:	7873      	ldrb	r3, [r6, #1]
 800617e:	2b2b      	cmp	r3, #43	@ 0x2b
 8006180:	d033      	beq.n	80061ea <__gethex+0x116>
 8006182:	2b2d      	cmp	r3, #45	@ 0x2d
 8006184:	d034      	beq.n	80061f0 <__gethex+0x11c>
 8006186:	1c71      	adds	r1, r6, #1
 8006188:	2400      	movs	r4, #0
 800618a:	7808      	ldrb	r0, [r1, #0]
 800618c:	f7ff ff8c 	bl	80060a8 <__hexdig_fun>
 8006190:	1e43      	subs	r3, r0, #1
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b18      	cmp	r3, #24
 8006196:	d830      	bhi.n	80061fa <__gethex+0x126>
 8006198:	f1a0 0210 	sub.w	r2, r0, #16
 800619c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80061a0:	f7ff ff82 	bl	80060a8 <__hexdig_fun>
 80061a4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80061a8:	fa5f fc8c 	uxtb.w	ip, ip
 80061ac:	f1bc 0f18 	cmp.w	ip, #24
 80061b0:	f04f 030a 	mov.w	r3, #10
 80061b4:	d91e      	bls.n	80061f4 <__gethex+0x120>
 80061b6:	b104      	cbz	r4, 80061ba <__gethex+0xe6>
 80061b8:	4252      	negs	r2, r2
 80061ba:	4417      	add	r7, r2
 80061bc:	f8ca 1000 	str.w	r1, [sl]
 80061c0:	b1ed      	cbz	r5, 80061fe <__gethex+0x12a>
 80061c2:	f1bb 0f00 	cmp.w	fp, #0
 80061c6:	bf0c      	ite	eq
 80061c8:	2506      	moveq	r5, #6
 80061ca:	2500      	movne	r5, #0
 80061cc:	4628      	mov	r0, r5
 80061ce:	b005      	add	sp, #20
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	2500      	movs	r5, #0
 80061d6:	462c      	mov	r4, r5
 80061d8:	e7b0      	b.n	800613c <__gethex+0x68>
 80061da:	2c00      	cmp	r4, #0
 80061dc:	d1c7      	bne.n	800616e <__gethex+0x9a>
 80061de:	4627      	mov	r7, r4
 80061e0:	e7c7      	b.n	8006172 <__gethex+0x9e>
 80061e2:	464e      	mov	r6, r9
 80061e4:	462f      	mov	r7, r5
 80061e6:	2501      	movs	r5, #1
 80061e8:	e7c3      	b.n	8006172 <__gethex+0x9e>
 80061ea:	2400      	movs	r4, #0
 80061ec:	1cb1      	adds	r1, r6, #2
 80061ee:	e7cc      	b.n	800618a <__gethex+0xb6>
 80061f0:	2401      	movs	r4, #1
 80061f2:	e7fb      	b.n	80061ec <__gethex+0x118>
 80061f4:	fb03 0002 	mla	r0, r3, r2, r0
 80061f8:	e7ce      	b.n	8006198 <__gethex+0xc4>
 80061fa:	4631      	mov	r1, r6
 80061fc:	e7de      	b.n	80061bc <__gethex+0xe8>
 80061fe:	eba6 0309 	sub.w	r3, r6, r9
 8006202:	3b01      	subs	r3, #1
 8006204:	4629      	mov	r1, r5
 8006206:	2b07      	cmp	r3, #7
 8006208:	dc0a      	bgt.n	8006220 <__gethex+0x14c>
 800620a:	9801      	ldr	r0, [sp, #4]
 800620c:	f000 faf4 	bl	80067f8 <_Balloc>
 8006210:	4604      	mov	r4, r0
 8006212:	b940      	cbnz	r0, 8006226 <__gethex+0x152>
 8006214:	4b5c      	ldr	r3, [pc, #368]	@ (8006388 <__gethex+0x2b4>)
 8006216:	4602      	mov	r2, r0
 8006218:	21e4      	movs	r1, #228	@ 0xe4
 800621a:	485c      	ldr	r0, [pc, #368]	@ (800638c <__gethex+0x2b8>)
 800621c:	f001 fb66 	bl	80078ec <__assert_func>
 8006220:	3101      	adds	r1, #1
 8006222:	105b      	asrs	r3, r3, #1
 8006224:	e7ef      	b.n	8006206 <__gethex+0x132>
 8006226:	f100 0a14 	add.w	sl, r0, #20
 800622a:	2300      	movs	r3, #0
 800622c:	4655      	mov	r5, sl
 800622e:	469b      	mov	fp, r3
 8006230:	45b1      	cmp	r9, r6
 8006232:	d337      	bcc.n	80062a4 <__gethex+0x1d0>
 8006234:	f845 bb04 	str.w	fp, [r5], #4
 8006238:	eba5 050a 	sub.w	r5, r5, sl
 800623c:	10ad      	asrs	r5, r5, #2
 800623e:	6125      	str	r5, [r4, #16]
 8006240:	4658      	mov	r0, fp
 8006242:	f000 fbcb 	bl	80069dc <__hi0bits>
 8006246:	016d      	lsls	r5, r5, #5
 8006248:	f8d8 6000 	ldr.w	r6, [r8]
 800624c:	1a2d      	subs	r5, r5, r0
 800624e:	42b5      	cmp	r5, r6
 8006250:	dd54      	ble.n	80062fc <__gethex+0x228>
 8006252:	1bad      	subs	r5, r5, r6
 8006254:	4629      	mov	r1, r5
 8006256:	4620      	mov	r0, r4
 8006258:	f000 ff5f 	bl	800711a <__any_on>
 800625c:	4681      	mov	r9, r0
 800625e:	b178      	cbz	r0, 8006280 <__gethex+0x1ac>
 8006260:	1e6b      	subs	r3, r5, #1
 8006262:	1159      	asrs	r1, r3, #5
 8006264:	f003 021f 	and.w	r2, r3, #31
 8006268:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800626c:	f04f 0901 	mov.w	r9, #1
 8006270:	fa09 f202 	lsl.w	r2, r9, r2
 8006274:	420a      	tst	r2, r1
 8006276:	d003      	beq.n	8006280 <__gethex+0x1ac>
 8006278:	454b      	cmp	r3, r9
 800627a:	dc36      	bgt.n	80062ea <__gethex+0x216>
 800627c:	f04f 0902 	mov.w	r9, #2
 8006280:	4629      	mov	r1, r5
 8006282:	4620      	mov	r0, r4
 8006284:	f7ff febe 	bl	8006004 <rshift>
 8006288:	442f      	add	r7, r5
 800628a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800628e:	42bb      	cmp	r3, r7
 8006290:	da42      	bge.n	8006318 <__gethex+0x244>
 8006292:	9801      	ldr	r0, [sp, #4]
 8006294:	4621      	mov	r1, r4
 8006296:	f000 faef 	bl	8006878 <_Bfree>
 800629a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800629c:	2300      	movs	r3, #0
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	25a3      	movs	r5, #163	@ 0xa3
 80062a2:	e793      	b.n	80061cc <__gethex+0xf8>
 80062a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80062a8:	2a2e      	cmp	r2, #46	@ 0x2e
 80062aa:	d012      	beq.n	80062d2 <__gethex+0x1fe>
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d104      	bne.n	80062ba <__gethex+0x1e6>
 80062b0:	f845 bb04 	str.w	fp, [r5], #4
 80062b4:	f04f 0b00 	mov.w	fp, #0
 80062b8:	465b      	mov	r3, fp
 80062ba:	7830      	ldrb	r0, [r6, #0]
 80062bc:	9303      	str	r3, [sp, #12]
 80062be:	f7ff fef3 	bl	80060a8 <__hexdig_fun>
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	f000 000f 	and.w	r0, r0, #15
 80062c8:	4098      	lsls	r0, r3
 80062ca:	ea4b 0b00 	orr.w	fp, fp, r0
 80062ce:	3304      	adds	r3, #4
 80062d0:	e7ae      	b.n	8006230 <__gethex+0x15c>
 80062d2:	45b1      	cmp	r9, r6
 80062d4:	d8ea      	bhi.n	80062ac <__gethex+0x1d8>
 80062d6:	492b      	ldr	r1, [pc, #172]	@ (8006384 <__gethex+0x2b0>)
 80062d8:	9303      	str	r3, [sp, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	4630      	mov	r0, r6
 80062de:	f7ff fd96 	bl	8005e0e <strncmp>
 80062e2:	9b03      	ldr	r3, [sp, #12]
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d1e1      	bne.n	80062ac <__gethex+0x1d8>
 80062e8:	e7a2      	b.n	8006230 <__gethex+0x15c>
 80062ea:	1ea9      	subs	r1, r5, #2
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 ff14 	bl	800711a <__any_on>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d0c2      	beq.n	800627c <__gethex+0x1a8>
 80062f6:	f04f 0903 	mov.w	r9, #3
 80062fa:	e7c1      	b.n	8006280 <__gethex+0x1ac>
 80062fc:	da09      	bge.n	8006312 <__gethex+0x23e>
 80062fe:	1b75      	subs	r5, r6, r5
 8006300:	4621      	mov	r1, r4
 8006302:	9801      	ldr	r0, [sp, #4]
 8006304:	462a      	mov	r2, r5
 8006306:	f000 fccf 	bl	8006ca8 <__lshift>
 800630a:	1b7f      	subs	r7, r7, r5
 800630c:	4604      	mov	r4, r0
 800630e:	f100 0a14 	add.w	sl, r0, #20
 8006312:	f04f 0900 	mov.w	r9, #0
 8006316:	e7b8      	b.n	800628a <__gethex+0x1b6>
 8006318:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800631c:	42bd      	cmp	r5, r7
 800631e:	dd6f      	ble.n	8006400 <__gethex+0x32c>
 8006320:	1bed      	subs	r5, r5, r7
 8006322:	42ae      	cmp	r6, r5
 8006324:	dc34      	bgt.n	8006390 <__gethex+0x2bc>
 8006326:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d022      	beq.n	8006374 <__gethex+0x2a0>
 800632e:	2b03      	cmp	r3, #3
 8006330:	d024      	beq.n	800637c <__gethex+0x2a8>
 8006332:	2b01      	cmp	r3, #1
 8006334:	d115      	bne.n	8006362 <__gethex+0x28e>
 8006336:	42ae      	cmp	r6, r5
 8006338:	d113      	bne.n	8006362 <__gethex+0x28e>
 800633a:	2e01      	cmp	r6, #1
 800633c:	d10b      	bne.n	8006356 <__gethex+0x282>
 800633e:	9a02      	ldr	r2, [sp, #8]
 8006340:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	2301      	movs	r3, #1
 8006348:	6123      	str	r3, [r4, #16]
 800634a:	f8ca 3000 	str.w	r3, [sl]
 800634e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006350:	2562      	movs	r5, #98	@ 0x62
 8006352:	601c      	str	r4, [r3, #0]
 8006354:	e73a      	b.n	80061cc <__gethex+0xf8>
 8006356:	1e71      	subs	r1, r6, #1
 8006358:	4620      	mov	r0, r4
 800635a:	f000 fede 	bl	800711a <__any_on>
 800635e:	2800      	cmp	r0, #0
 8006360:	d1ed      	bne.n	800633e <__gethex+0x26a>
 8006362:	9801      	ldr	r0, [sp, #4]
 8006364:	4621      	mov	r1, r4
 8006366:	f000 fa87 	bl	8006878 <_Bfree>
 800636a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800636c:	2300      	movs	r3, #0
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	2550      	movs	r5, #80	@ 0x50
 8006372:	e72b      	b.n	80061cc <__gethex+0xf8>
 8006374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f3      	bne.n	8006362 <__gethex+0x28e>
 800637a:	e7e0      	b.n	800633e <__gethex+0x26a>
 800637c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1dd      	bne.n	800633e <__gethex+0x26a>
 8006382:	e7ee      	b.n	8006362 <__gethex+0x28e>
 8006384:	08008208 	.word	0x08008208
 8006388:	08008396 	.word	0x08008396
 800638c:	080083a7 	.word	0x080083a7
 8006390:	1e6f      	subs	r7, r5, #1
 8006392:	f1b9 0f00 	cmp.w	r9, #0
 8006396:	d130      	bne.n	80063fa <__gethex+0x326>
 8006398:	b127      	cbz	r7, 80063a4 <__gethex+0x2d0>
 800639a:	4639      	mov	r1, r7
 800639c:	4620      	mov	r0, r4
 800639e:	f000 febc 	bl	800711a <__any_on>
 80063a2:	4681      	mov	r9, r0
 80063a4:	117a      	asrs	r2, r7, #5
 80063a6:	2301      	movs	r3, #1
 80063a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80063ac:	f007 071f 	and.w	r7, r7, #31
 80063b0:	40bb      	lsls	r3, r7
 80063b2:	4213      	tst	r3, r2
 80063b4:	4629      	mov	r1, r5
 80063b6:	4620      	mov	r0, r4
 80063b8:	bf18      	it	ne
 80063ba:	f049 0902 	orrne.w	r9, r9, #2
 80063be:	f7ff fe21 	bl	8006004 <rshift>
 80063c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80063c6:	1b76      	subs	r6, r6, r5
 80063c8:	2502      	movs	r5, #2
 80063ca:	f1b9 0f00 	cmp.w	r9, #0
 80063ce:	d047      	beq.n	8006460 <__gethex+0x38c>
 80063d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d015      	beq.n	8006404 <__gethex+0x330>
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d017      	beq.n	800640c <__gethex+0x338>
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d109      	bne.n	80063f4 <__gethex+0x320>
 80063e0:	f019 0f02 	tst.w	r9, #2
 80063e4:	d006      	beq.n	80063f4 <__gethex+0x320>
 80063e6:	f8da 3000 	ldr.w	r3, [sl]
 80063ea:	ea49 0903 	orr.w	r9, r9, r3
 80063ee:	f019 0f01 	tst.w	r9, #1
 80063f2:	d10e      	bne.n	8006412 <__gethex+0x33e>
 80063f4:	f045 0510 	orr.w	r5, r5, #16
 80063f8:	e032      	b.n	8006460 <__gethex+0x38c>
 80063fa:	f04f 0901 	mov.w	r9, #1
 80063fe:	e7d1      	b.n	80063a4 <__gethex+0x2d0>
 8006400:	2501      	movs	r5, #1
 8006402:	e7e2      	b.n	80063ca <__gethex+0x2f6>
 8006404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006406:	f1c3 0301 	rsb	r3, r3, #1
 800640a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800640c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f0      	beq.n	80063f4 <__gethex+0x320>
 8006412:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006416:	f104 0314 	add.w	r3, r4, #20
 800641a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800641e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006422:	f04f 0c00 	mov.w	ip, #0
 8006426:	4618      	mov	r0, r3
 8006428:	f853 2b04 	ldr.w	r2, [r3], #4
 800642c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8006430:	d01b      	beq.n	800646a <__gethex+0x396>
 8006432:	3201      	adds	r2, #1
 8006434:	6002      	str	r2, [r0, #0]
 8006436:	2d02      	cmp	r5, #2
 8006438:	f104 0314 	add.w	r3, r4, #20
 800643c:	d13c      	bne.n	80064b8 <__gethex+0x3e4>
 800643e:	f8d8 2000 	ldr.w	r2, [r8]
 8006442:	3a01      	subs	r2, #1
 8006444:	42b2      	cmp	r2, r6
 8006446:	d109      	bne.n	800645c <__gethex+0x388>
 8006448:	1171      	asrs	r1, r6, #5
 800644a:	2201      	movs	r2, #1
 800644c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006450:	f006 061f 	and.w	r6, r6, #31
 8006454:	fa02 f606 	lsl.w	r6, r2, r6
 8006458:	421e      	tst	r6, r3
 800645a:	d13a      	bne.n	80064d2 <__gethex+0x3fe>
 800645c:	f045 0520 	orr.w	r5, r5, #32
 8006460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006462:	601c      	str	r4, [r3, #0]
 8006464:	9b02      	ldr	r3, [sp, #8]
 8006466:	601f      	str	r7, [r3, #0]
 8006468:	e6b0      	b.n	80061cc <__gethex+0xf8>
 800646a:	4299      	cmp	r1, r3
 800646c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006470:	d8d9      	bhi.n	8006426 <__gethex+0x352>
 8006472:	68a3      	ldr	r3, [r4, #8]
 8006474:	459b      	cmp	fp, r3
 8006476:	db17      	blt.n	80064a8 <__gethex+0x3d4>
 8006478:	6861      	ldr	r1, [r4, #4]
 800647a:	9801      	ldr	r0, [sp, #4]
 800647c:	3101      	adds	r1, #1
 800647e:	f000 f9bb 	bl	80067f8 <_Balloc>
 8006482:	4681      	mov	r9, r0
 8006484:	b918      	cbnz	r0, 800648e <__gethex+0x3ba>
 8006486:	4b1a      	ldr	r3, [pc, #104]	@ (80064f0 <__gethex+0x41c>)
 8006488:	4602      	mov	r2, r0
 800648a:	2184      	movs	r1, #132	@ 0x84
 800648c:	e6c5      	b.n	800621a <__gethex+0x146>
 800648e:	6922      	ldr	r2, [r4, #16]
 8006490:	3202      	adds	r2, #2
 8006492:	f104 010c 	add.w	r1, r4, #12
 8006496:	0092      	lsls	r2, r2, #2
 8006498:	300c      	adds	r0, #12
 800649a:	f7ff fd50 	bl	8005f3e <memcpy>
 800649e:	4621      	mov	r1, r4
 80064a0:	9801      	ldr	r0, [sp, #4]
 80064a2:	f000 f9e9 	bl	8006878 <_Bfree>
 80064a6:	464c      	mov	r4, r9
 80064a8:	6923      	ldr	r3, [r4, #16]
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80064b0:	6122      	str	r2, [r4, #16]
 80064b2:	2201      	movs	r2, #1
 80064b4:	615a      	str	r2, [r3, #20]
 80064b6:	e7be      	b.n	8006436 <__gethex+0x362>
 80064b8:	6922      	ldr	r2, [r4, #16]
 80064ba:	455a      	cmp	r2, fp
 80064bc:	dd0b      	ble.n	80064d6 <__gethex+0x402>
 80064be:	2101      	movs	r1, #1
 80064c0:	4620      	mov	r0, r4
 80064c2:	f7ff fd9f 	bl	8006004 <rshift>
 80064c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064ca:	3701      	adds	r7, #1
 80064cc:	42bb      	cmp	r3, r7
 80064ce:	f6ff aee0 	blt.w	8006292 <__gethex+0x1be>
 80064d2:	2501      	movs	r5, #1
 80064d4:	e7c2      	b.n	800645c <__gethex+0x388>
 80064d6:	f016 061f 	ands.w	r6, r6, #31
 80064da:	d0fa      	beq.n	80064d2 <__gethex+0x3fe>
 80064dc:	4453      	add	r3, sl
 80064de:	f1c6 0620 	rsb	r6, r6, #32
 80064e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80064e6:	f000 fa79 	bl	80069dc <__hi0bits>
 80064ea:	42b0      	cmp	r0, r6
 80064ec:	dbe7      	blt.n	80064be <__gethex+0x3ea>
 80064ee:	e7f0      	b.n	80064d2 <__gethex+0x3fe>
 80064f0:	08008396 	.word	0x08008396

080064f4 <L_shift>:
 80064f4:	f1c2 0208 	rsb	r2, r2, #8
 80064f8:	0092      	lsls	r2, r2, #2
 80064fa:	b570      	push	{r4, r5, r6, lr}
 80064fc:	f1c2 0620 	rsb	r6, r2, #32
 8006500:	6843      	ldr	r3, [r0, #4]
 8006502:	6804      	ldr	r4, [r0, #0]
 8006504:	fa03 f506 	lsl.w	r5, r3, r6
 8006508:	432c      	orrs	r4, r5
 800650a:	40d3      	lsrs	r3, r2
 800650c:	6004      	str	r4, [r0, #0]
 800650e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006512:	4288      	cmp	r0, r1
 8006514:	d3f4      	bcc.n	8006500 <L_shift+0xc>
 8006516:	bd70      	pop	{r4, r5, r6, pc}

08006518 <__match>:
 8006518:	b530      	push	{r4, r5, lr}
 800651a:	6803      	ldr	r3, [r0, #0]
 800651c:	3301      	adds	r3, #1
 800651e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006522:	b914      	cbnz	r4, 800652a <__match+0x12>
 8006524:	6003      	str	r3, [r0, #0]
 8006526:	2001      	movs	r0, #1
 8006528:	bd30      	pop	{r4, r5, pc}
 800652a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800652e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006532:	2d19      	cmp	r5, #25
 8006534:	bf98      	it	ls
 8006536:	3220      	addls	r2, #32
 8006538:	42a2      	cmp	r2, r4
 800653a:	d0f0      	beq.n	800651e <__match+0x6>
 800653c:	2000      	movs	r0, #0
 800653e:	e7f3      	b.n	8006528 <__match+0x10>

08006540 <__hexnan>:
 8006540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	680b      	ldr	r3, [r1, #0]
 8006546:	6801      	ldr	r1, [r0, #0]
 8006548:	115e      	asrs	r6, r3, #5
 800654a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800654e:	f013 031f 	ands.w	r3, r3, #31
 8006552:	b087      	sub	sp, #28
 8006554:	bf18      	it	ne
 8006556:	3604      	addne	r6, #4
 8006558:	2500      	movs	r5, #0
 800655a:	1f37      	subs	r7, r6, #4
 800655c:	4682      	mov	sl, r0
 800655e:	4690      	mov	r8, r2
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	f846 5c04 	str.w	r5, [r6, #-4]
 8006566:	46b9      	mov	r9, r7
 8006568:	463c      	mov	r4, r7
 800656a:	9502      	str	r5, [sp, #8]
 800656c:	46ab      	mov	fp, r5
 800656e:	784a      	ldrb	r2, [r1, #1]
 8006570:	1c4b      	adds	r3, r1, #1
 8006572:	9303      	str	r3, [sp, #12]
 8006574:	b342      	cbz	r2, 80065c8 <__hexnan+0x88>
 8006576:	4610      	mov	r0, r2
 8006578:	9105      	str	r1, [sp, #20]
 800657a:	9204      	str	r2, [sp, #16]
 800657c:	f7ff fd94 	bl	80060a8 <__hexdig_fun>
 8006580:	2800      	cmp	r0, #0
 8006582:	d151      	bne.n	8006628 <__hexnan+0xe8>
 8006584:	9a04      	ldr	r2, [sp, #16]
 8006586:	9905      	ldr	r1, [sp, #20]
 8006588:	2a20      	cmp	r2, #32
 800658a:	d818      	bhi.n	80065be <__hexnan+0x7e>
 800658c:	9b02      	ldr	r3, [sp, #8]
 800658e:	459b      	cmp	fp, r3
 8006590:	dd13      	ble.n	80065ba <__hexnan+0x7a>
 8006592:	454c      	cmp	r4, r9
 8006594:	d206      	bcs.n	80065a4 <__hexnan+0x64>
 8006596:	2d07      	cmp	r5, #7
 8006598:	dc04      	bgt.n	80065a4 <__hexnan+0x64>
 800659a:	462a      	mov	r2, r5
 800659c:	4649      	mov	r1, r9
 800659e:	4620      	mov	r0, r4
 80065a0:	f7ff ffa8 	bl	80064f4 <L_shift>
 80065a4:	4544      	cmp	r4, r8
 80065a6:	d952      	bls.n	800664e <__hexnan+0x10e>
 80065a8:	2300      	movs	r3, #0
 80065aa:	f1a4 0904 	sub.w	r9, r4, #4
 80065ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80065b2:	f8cd b008 	str.w	fp, [sp, #8]
 80065b6:	464c      	mov	r4, r9
 80065b8:	461d      	mov	r5, r3
 80065ba:	9903      	ldr	r1, [sp, #12]
 80065bc:	e7d7      	b.n	800656e <__hexnan+0x2e>
 80065be:	2a29      	cmp	r2, #41	@ 0x29
 80065c0:	d157      	bne.n	8006672 <__hexnan+0x132>
 80065c2:	3102      	adds	r1, #2
 80065c4:	f8ca 1000 	str.w	r1, [sl]
 80065c8:	f1bb 0f00 	cmp.w	fp, #0
 80065cc:	d051      	beq.n	8006672 <__hexnan+0x132>
 80065ce:	454c      	cmp	r4, r9
 80065d0:	d206      	bcs.n	80065e0 <__hexnan+0xa0>
 80065d2:	2d07      	cmp	r5, #7
 80065d4:	dc04      	bgt.n	80065e0 <__hexnan+0xa0>
 80065d6:	462a      	mov	r2, r5
 80065d8:	4649      	mov	r1, r9
 80065da:	4620      	mov	r0, r4
 80065dc:	f7ff ff8a 	bl	80064f4 <L_shift>
 80065e0:	4544      	cmp	r4, r8
 80065e2:	d936      	bls.n	8006652 <__hexnan+0x112>
 80065e4:	f1a8 0204 	sub.w	r2, r8, #4
 80065e8:	4623      	mov	r3, r4
 80065ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80065ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80065f2:	429f      	cmp	r7, r3
 80065f4:	d2f9      	bcs.n	80065ea <__hexnan+0xaa>
 80065f6:	1b3b      	subs	r3, r7, r4
 80065f8:	f023 0303 	bic.w	r3, r3, #3
 80065fc:	3304      	adds	r3, #4
 80065fe:	3401      	adds	r4, #1
 8006600:	3e03      	subs	r6, #3
 8006602:	42b4      	cmp	r4, r6
 8006604:	bf88      	it	hi
 8006606:	2304      	movhi	r3, #4
 8006608:	4443      	add	r3, r8
 800660a:	2200      	movs	r2, #0
 800660c:	f843 2b04 	str.w	r2, [r3], #4
 8006610:	429f      	cmp	r7, r3
 8006612:	d2fb      	bcs.n	800660c <__hexnan+0xcc>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	b91b      	cbnz	r3, 8006620 <__hexnan+0xe0>
 8006618:	4547      	cmp	r7, r8
 800661a:	d128      	bne.n	800666e <__hexnan+0x12e>
 800661c:	2301      	movs	r3, #1
 800661e:	603b      	str	r3, [r7, #0]
 8006620:	2005      	movs	r0, #5
 8006622:	b007      	add	sp, #28
 8006624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006628:	3501      	adds	r5, #1
 800662a:	2d08      	cmp	r5, #8
 800662c:	f10b 0b01 	add.w	fp, fp, #1
 8006630:	dd06      	ble.n	8006640 <__hexnan+0x100>
 8006632:	4544      	cmp	r4, r8
 8006634:	d9c1      	bls.n	80065ba <__hexnan+0x7a>
 8006636:	2300      	movs	r3, #0
 8006638:	f844 3c04 	str.w	r3, [r4, #-4]
 800663c:	2501      	movs	r5, #1
 800663e:	3c04      	subs	r4, #4
 8006640:	6822      	ldr	r2, [r4, #0]
 8006642:	f000 000f 	and.w	r0, r0, #15
 8006646:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800664a:	6020      	str	r0, [r4, #0]
 800664c:	e7b5      	b.n	80065ba <__hexnan+0x7a>
 800664e:	2508      	movs	r5, #8
 8006650:	e7b3      	b.n	80065ba <__hexnan+0x7a>
 8006652:	9b01      	ldr	r3, [sp, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0dd      	beq.n	8006614 <__hexnan+0xd4>
 8006658:	f1c3 0320 	rsb	r3, r3, #32
 800665c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006660:	40da      	lsrs	r2, r3
 8006662:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006666:	4013      	ands	r3, r2
 8006668:	f846 3c04 	str.w	r3, [r6, #-4]
 800666c:	e7d2      	b.n	8006614 <__hexnan+0xd4>
 800666e:	3f04      	subs	r7, #4
 8006670:	e7d0      	b.n	8006614 <__hexnan+0xd4>
 8006672:	2004      	movs	r0, #4
 8006674:	e7d5      	b.n	8006622 <__hexnan+0xe2>
	...

08006678 <sbrk_aligned>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	4e0f      	ldr	r6, [pc, #60]	@ (80066b8 <sbrk_aligned+0x40>)
 800667c:	460c      	mov	r4, r1
 800667e:	6831      	ldr	r1, [r6, #0]
 8006680:	4605      	mov	r5, r0
 8006682:	b911      	cbnz	r1, 800668a <sbrk_aligned+0x12>
 8006684:	f001 f922 	bl	80078cc <_sbrk_r>
 8006688:	6030      	str	r0, [r6, #0]
 800668a:	4621      	mov	r1, r4
 800668c:	4628      	mov	r0, r5
 800668e:	f001 f91d 	bl	80078cc <_sbrk_r>
 8006692:	1c43      	adds	r3, r0, #1
 8006694:	d103      	bne.n	800669e <sbrk_aligned+0x26>
 8006696:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800669a:	4620      	mov	r0, r4
 800669c:	bd70      	pop	{r4, r5, r6, pc}
 800669e:	1cc4      	adds	r4, r0, #3
 80066a0:	f024 0403 	bic.w	r4, r4, #3
 80066a4:	42a0      	cmp	r0, r4
 80066a6:	d0f8      	beq.n	800669a <sbrk_aligned+0x22>
 80066a8:	1a21      	subs	r1, r4, r0
 80066aa:	4628      	mov	r0, r5
 80066ac:	f001 f90e 	bl	80078cc <_sbrk_r>
 80066b0:	3001      	adds	r0, #1
 80066b2:	d1f2      	bne.n	800669a <sbrk_aligned+0x22>
 80066b4:	e7ef      	b.n	8006696 <sbrk_aligned+0x1e>
 80066b6:	bf00      	nop
 80066b8:	200011d0 	.word	0x200011d0

080066bc <_malloc_r>:
 80066bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c0:	1ccd      	adds	r5, r1, #3
 80066c2:	f025 0503 	bic.w	r5, r5, #3
 80066c6:	3508      	adds	r5, #8
 80066c8:	2d0c      	cmp	r5, #12
 80066ca:	bf38      	it	cc
 80066cc:	250c      	movcc	r5, #12
 80066ce:	2d00      	cmp	r5, #0
 80066d0:	4606      	mov	r6, r0
 80066d2:	db01      	blt.n	80066d8 <_malloc_r+0x1c>
 80066d4:	42a9      	cmp	r1, r5
 80066d6:	d904      	bls.n	80066e2 <_malloc_r+0x26>
 80066d8:	230c      	movs	r3, #12
 80066da:	6033      	str	r3, [r6, #0]
 80066dc:	2000      	movs	r0, #0
 80066de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067b8 <_malloc_r+0xfc>
 80066e6:	f000 f87b 	bl	80067e0 <__malloc_lock>
 80066ea:	f8d8 3000 	ldr.w	r3, [r8]
 80066ee:	461c      	mov	r4, r3
 80066f0:	bb44      	cbnz	r4, 8006744 <_malloc_r+0x88>
 80066f2:	4629      	mov	r1, r5
 80066f4:	4630      	mov	r0, r6
 80066f6:	f7ff ffbf 	bl	8006678 <sbrk_aligned>
 80066fa:	1c43      	adds	r3, r0, #1
 80066fc:	4604      	mov	r4, r0
 80066fe:	d158      	bne.n	80067b2 <_malloc_r+0xf6>
 8006700:	f8d8 4000 	ldr.w	r4, [r8]
 8006704:	4627      	mov	r7, r4
 8006706:	2f00      	cmp	r7, #0
 8006708:	d143      	bne.n	8006792 <_malloc_r+0xd6>
 800670a:	2c00      	cmp	r4, #0
 800670c:	d04b      	beq.n	80067a6 <_malloc_r+0xea>
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	4639      	mov	r1, r7
 8006712:	4630      	mov	r0, r6
 8006714:	eb04 0903 	add.w	r9, r4, r3
 8006718:	f001 f8d8 	bl	80078cc <_sbrk_r>
 800671c:	4581      	cmp	r9, r0
 800671e:	d142      	bne.n	80067a6 <_malloc_r+0xea>
 8006720:	6821      	ldr	r1, [r4, #0]
 8006722:	1a6d      	subs	r5, r5, r1
 8006724:	4629      	mov	r1, r5
 8006726:	4630      	mov	r0, r6
 8006728:	f7ff ffa6 	bl	8006678 <sbrk_aligned>
 800672c:	3001      	adds	r0, #1
 800672e:	d03a      	beq.n	80067a6 <_malloc_r+0xea>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	442b      	add	r3, r5
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	f8d8 3000 	ldr.w	r3, [r8]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	bb62      	cbnz	r2, 8006798 <_malloc_r+0xdc>
 800673e:	f8c8 7000 	str.w	r7, [r8]
 8006742:	e00f      	b.n	8006764 <_malloc_r+0xa8>
 8006744:	6822      	ldr	r2, [r4, #0]
 8006746:	1b52      	subs	r2, r2, r5
 8006748:	d420      	bmi.n	800678c <_malloc_r+0xd0>
 800674a:	2a0b      	cmp	r2, #11
 800674c:	d917      	bls.n	800677e <_malloc_r+0xc2>
 800674e:	1961      	adds	r1, r4, r5
 8006750:	42a3      	cmp	r3, r4
 8006752:	6025      	str	r5, [r4, #0]
 8006754:	bf18      	it	ne
 8006756:	6059      	strne	r1, [r3, #4]
 8006758:	6863      	ldr	r3, [r4, #4]
 800675a:	bf08      	it	eq
 800675c:	f8c8 1000 	streq.w	r1, [r8]
 8006760:	5162      	str	r2, [r4, r5]
 8006762:	604b      	str	r3, [r1, #4]
 8006764:	4630      	mov	r0, r6
 8006766:	f000 f841 	bl	80067ec <__malloc_unlock>
 800676a:	f104 000b 	add.w	r0, r4, #11
 800676e:	1d23      	adds	r3, r4, #4
 8006770:	f020 0007 	bic.w	r0, r0, #7
 8006774:	1ac2      	subs	r2, r0, r3
 8006776:	bf1c      	itt	ne
 8006778:	1a1b      	subne	r3, r3, r0
 800677a:	50a3      	strne	r3, [r4, r2]
 800677c:	e7af      	b.n	80066de <_malloc_r+0x22>
 800677e:	6862      	ldr	r2, [r4, #4]
 8006780:	42a3      	cmp	r3, r4
 8006782:	bf0c      	ite	eq
 8006784:	f8c8 2000 	streq.w	r2, [r8]
 8006788:	605a      	strne	r2, [r3, #4]
 800678a:	e7eb      	b.n	8006764 <_malloc_r+0xa8>
 800678c:	4623      	mov	r3, r4
 800678e:	6864      	ldr	r4, [r4, #4]
 8006790:	e7ae      	b.n	80066f0 <_malloc_r+0x34>
 8006792:	463c      	mov	r4, r7
 8006794:	687f      	ldr	r7, [r7, #4]
 8006796:	e7b6      	b.n	8006706 <_malloc_r+0x4a>
 8006798:	461a      	mov	r2, r3
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	42a3      	cmp	r3, r4
 800679e:	d1fb      	bne.n	8006798 <_malloc_r+0xdc>
 80067a0:	2300      	movs	r3, #0
 80067a2:	6053      	str	r3, [r2, #4]
 80067a4:	e7de      	b.n	8006764 <_malloc_r+0xa8>
 80067a6:	230c      	movs	r3, #12
 80067a8:	6033      	str	r3, [r6, #0]
 80067aa:	4630      	mov	r0, r6
 80067ac:	f000 f81e 	bl	80067ec <__malloc_unlock>
 80067b0:	e794      	b.n	80066dc <_malloc_r+0x20>
 80067b2:	6005      	str	r5, [r0, #0]
 80067b4:	e7d6      	b.n	8006764 <_malloc_r+0xa8>
 80067b6:	bf00      	nop
 80067b8:	200011d4 	.word	0x200011d4

080067bc <__ascii_mbtowc>:
 80067bc:	b082      	sub	sp, #8
 80067be:	b901      	cbnz	r1, 80067c2 <__ascii_mbtowc+0x6>
 80067c0:	a901      	add	r1, sp, #4
 80067c2:	b142      	cbz	r2, 80067d6 <__ascii_mbtowc+0x1a>
 80067c4:	b14b      	cbz	r3, 80067da <__ascii_mbtowc+0x1e>
 80067c6:	7813      	ldrb	r3, [r2, #0]
 80067c8:	600b      	str	r3, [r1, #0]
 80067ca:	7812      	ldrb	r2, [r2, #0]
 80067cc:	1e10      	subs	r0, r2, #0
 80067ce:	bf18      	it	ne
 80067d0:	2001      	movne	r0, #1
 80067d2:	b002      	add	sp, #8
 80067d4:	4770      	bx	lr
 80067d6:	4610      	mov	r0, r2
 80067d8:	e7fb      	b.n	80067d2 <__ascii_mbtowc+0x16>
 80067da:	f06f 0001 	mvn.w	r0, #1
 80067de:	e7f8      	b.n	80067d2 <__ascii_mbtowc+0x16>

080067e0 <__malloc_lock>:
 80067e0:	4801      	ldr	r0, [pc, #4]	@ (80067e8 <__malloc_lock+0x8>)
 80067e2:	f7ff bbaa 	b.w	8005f3a <__retarget_lock_acquire_recursive>
 80067e6:	bf00      	nop
 80067e8:	200011cc 	.word	0x200011cc

080067ec <__malloc_unlock>:
 80067ec:	4801      	ldr	r0, [pc, #4]	@ (80067f4 <__malloc_unlock+0x8>)
 80067ee:	f7ff bba5 	b.w	8005f3c <__retarget_lock_release_recursive>
 80067f2:	bf00      	nop
 80067f4:	200011cc 	.word	0x200011cc

080067f8 <_Balloc>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	69c6      	ldr	r6, [r0, #28]
 80067fc:	4604      	mov	r4, r0
 80067fe:	460d      	mov	r5, r1
 8006800:	b976      	cbnz	r6, 8006820 <_Balloc+0x28>
 8006802:	2010      	movs	r0, #16
 8006804:	f001 f8a4 	bl	8007950 <malloc>
 8006808:	4602      	mov	r2, r0
 800680a:	61e0      	str	r0, [r4, #28]
 800680c:	b920      	cbnz	r0, 8006818 <_Balloc+0x20>
 800680e:	4b18      	ldr	r3, [pc, #96]	@ (8006870 <_Balloc+0x78>)
 8006810:	4818      	ldr	r0, [pc, #96]	@ (8006874 <_Balloc+0x7c>)
 8006812:	216b      	movs	r1, #107	@ 0x6b
 8006814:	f001 f86a 	bl	80078ec <__assert_func>
 8006818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800681c:	6006      	str	r6, [r0, #0]
 800681e:	60c6      	str	r6, [r0, #12]
 8006820:	69e6      	ldr	r6, [r4, #28]
 8006822:	68f3      	ldr	r3, [r6, #12]
 8006824:	b183      	cbz	r3, 8006848 <_Balloc+0x50>
 8006826:	69e3      	ldr	r3, [r4, #28]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800682e:	b9b8      	cbnz	r0, 8006860 <_Balloc+0x68>
 8006830:	2101      	movs	r1, #1
 8006832:	fa01 f605 	lsl.w	r6, r1, r5
 8006836:	1d72      	adds	r2, r6, #5
 8006838:	0092      	lsls	r2, r2, #2
 800683a:	4620      	mov	r0, r4
 800683c:	f001 f874 	bl	8007928 <_calloc_r>
 8006840:	b160      	cbz	r0, 800685c <_Balloc+0x64>
 8006842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006846:	e00e      	b.n	8006866 <_Balloc+0x6e>
 8006848:	2221      	movs	r2, #33	@ 0x21
 800684a:	2104      	movs	r1, #4
 800684c:	4620      	mov	r0, r4
 800684e:	f001 f86b 	bl	8007928 <_calloc_r>
 8006852:	69e3      	ldr	r3, [r4, #28]
 8006854:	60f0      	str	r0, [r6, #12]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e4      	bne.n	8006826 <_Balloc+0x2e>
 800685c:	2000      	movs	r0, #0
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	6802      	ldr	r2, [r0, #0]
 8006862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006866:	2300      	movs	r3, #0
 8006868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800686c:	e7f7      	b.n	800685e <_Balloc+0x66>
 800686e:	bf00      	nop
 8006870:	08008407 	.word	0x08008407
 8006874:	0800841e 	.word	0x0800841e

08006878 <_Bfree>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	69c6      	ldr	r6, [r0, #28]
 800687c:	4605      	mov	r5, r0
 800687e:	460c      	mov	r4, r1
 8006880:	b976      	cbnz	r6, 80068a0 <_Bfree+0x28>
 8006882:	2010      	movs	r0, #16
 8006884:	f001 f864 	bl	8007950 <malloc>
 8006888:	4602      	mov	r2, r0
 800688a:	61e8      	str	r0, [r5, #28]
 800688c:	b920      	cbnz	r0, 8006898 <_Bfree+0x20>
 800688e:	4b09      	ldr	r3, [pc, #36]	@ (80068b4 <_Bfree+0x3c>)
 8006890:	4809      	ldr	r0, [pc, #36]	@ (80068b8 <_Bfree+0x40>)
 8006892:	218f      	movs	r1, #143	@ 0x8f
 8006894:	f001 f82a 	bl	80078ec <__assert_func>
 8006898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800689c:	6006      	str	r6, [r0, #0]
 800689e:	60c6      	str	r6, [r0, #12]
 80068a0:	b13c      	cbz	r4, 80068b2 <_Bfree+0x3a>
 80068a2:	69eb      	ldr	r3, [r5, #28]
 80068a4:	6862      	ldr	r2, [r4, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068ac:	6021      	str	r1, [r4, #0]
 80068ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	08008407 	.word	0x08008407
 80068b8:	0800841e 	.word	0x0800841e

080068bc <__multadd>:
 80068bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c0:	690d      	ldr	r5, [r1, #16]
 80068c2:	4607      	mov	r7, r0
 80068c4:	460c      	mov	r4, r1
 80068c6:	461e      	mov	r6, r3
 80068c8:	f101 0c14 	add.w	ip, r1, #20
 80068cc:	2000      	movs	r0, #0
 80068ce:	f8dc 3000 	ldr.w	r3, [ip]
 80068d2:	b299      	uxth	r1, r3
 80068d4:	fb02 6101 	mla	r1, r2, r1, r6
 80068d8:	0c1e      	lsrs	r6, r3, #16
 80068da:	0c0b      	lsrs	r3, r1, #16
 80068dc:	fb02 3306 	mla	r3, r2, r6, r3
 80068e0:	b289      	uxth	r1, r1
 80068e2:	3001      	adds	r0, #1
 80068e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068e8:	4285      	cmp	r5, r0
 80068ea:	f84c 1b04 	str.w	r1, [ip], #4
 80068ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068f2:	dcec      	bgt.n	80068ce <__multadd+0x12>
 80068f4:	b30e      	cbz	r6, 800693a <__multadd+0x7e>
 80068f6:	68a3      	ldr	r3, [r4, #8]
 80068f8:	42ab      	cmp	r3, r5
 80068fa:	dc19      	bgt.n	8006930 <__multadd+0x74>
 80068fc:	6861      	ldr	r1, [r4, #4]
 80068fe:	4638      	mov	r0, r7
 8006900:	3101      	adds	r1, #1
 8006902:	f7ff ff79 	bl	80067f8 <_Balloc>
 8006906:	4680      	mov	r8, r0
 8006908:	b928      	cbnz	r0, 8006916 <__multadd+0x5a>
 800690a:	4602      	mov	r2, r0
 800690c:	4b0c      	ldr	r3, [pc, #48]	@ (8006940 <__multadd+0x84>)
 800690e:	480d      	ldr	r0, [pc, #52]	@ (8006944 <__multadd+0x88>)
 8006910:	21ba      	movs	r1, #186	@ 0xba
 8006912:	f000 ffeb 	bl	80078ec <__assert_func>
 8006916:	6922      	ldr	r2, [r4, #16]
 8006918:	3202      	adds	r2, #2
 800691a:	f104 010c 	add.w	r1, r4, #12
 800691e:	0092      	lsls	r2, r2, #2
 8006920:	300c      	adds	r0, #12
 8006922:	f7ff fb0c 	bl	8005f3e <memcpy>
 8006926:	4621      	mov	r1, r4
 8006928:	4638      	mov	r0, r7
 800692a:	f7ff ffa5 	bl	8006878 <_Bfree>
 800692e:	4644      	mov	r4, r8
 8006930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006934:	3501      	adds	r5, #1
 8006936:	615e      	str	r6, [r3, #20]
 8006938:	6125      	str	r5, [r4, #16]
 800693a:	4620      	mov	r0, r4
 800693c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006940:	08008396 	.word	0x08008396
 8006944:	0800841e 	.word	0x0800841e

08006948 <__s2b>:
 8006948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800694c:	460c      	mov	r4, r1
 800694e:	4615      	mov	r5, r2
 8006950:	461f      	mov	r7, r3
 8006952:	2209      	movs	r2, #9
 8006954:	3308      	adds	r3, #8
 8006956:	4606      	mov	r6, r0
 8006958:	fb93 f3f2 	sdiv	r3, r3, r2
 800695c:	2100      	movs	r1, #0
 800695e:	2201      	movs	r2, #1
 8006960:	429a      	cmp	r2, r3
 8006962:	db09      	blt.n	8006978 <__s2b+0x30>
 8006964:	4630      	mov	r0, r6
 8006966:	f7ff ff47 	bl	80067f8 <_Balloc>
 800696a:	b940      	cbnz	r0, 800697e <__s2b+0x36>
 800696c:	4602      	mov	r2, r0
 800696e:	4b19      	ldr	r3, [pc, #100]	@ (80069d4 <__s2b+0x8c>)
 8006970:	4819      	ldr	r0, [pc, #100]	@ (80069d8 <__s2b+0x90>)
 8006972:	21d3      	movs	r1, #211	@ 0xd3
 8006974:	f000 ffba 	bl	80078ec <__assert_func>
 8006978:	0052      	lsls	r2, r2, #1
 800697a:	3101      	adds	r1, #1
 800697c:	e7f0      	b.n	8006960 <__s2b+0x18>
 800697e:	9b08      	ldr	r3, [sp, #32]
 8006980:	6143      	str	r3, [r0, #20]
 8006982:	2d09      	cmp	r5, #9
 8006984:	f04f 0301 	mov.w	r3, #1
 8006988:	6103      	str	r3, [r0, #16]
 800698a:	dd16      	ble.n	80069ba <__s2b+0x72>
 800698c:	f104 0909 	add.w	r9, r4, #9
 8006990:	46c8      	mov	r8, r9
 8006992:	442c      	add	r4, r5
 8006994:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006998:	4601      	mov	r1, r0
 800699a:	3b30      	subs	r3, #48	@ 0x30
 800699c:	220a      	movs	r2, #10
 800699e:	4630      	mov	r0, r6
 80069a0:	f7ff ff8c 	bl	80068bc <__multadd>
 80069a4:	45a0      	cmp	r8, r4
 80069a6:	d1f5      	bne.n	8006994 <__s2b+0x4c>
 80069a8:	f1a5 0408 	sub.w	r4, r5, #8
 80069ac:	444c      	add	r4, r9
 80069ae:	1b2d      	subs	r5, r5, r4
 80069b0:	1963      	adds	r3, r4, r5
 80069b2:	42bb      	cmp	r3, r7
 80069b4:	db04      	blt.n	80069c0 <__s2b+0x78>
 80069b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ba:	340a      	adds	r4, #10
 80069bc:	2509      	movs	r5, #9
 80069be:	e7f6      	b.n	80069ae <__s2b+0x66>
 80069c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069c4:	4601      	mov	r1, r0
 80069c6:	3b30      	subs	r3, #48	@ 0x30
 80069c8:	220a      	movs	r2, #10
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7ff ff76 	bl	80068bc <__multadd>
 80069d0:	e7ee      	b.n	80069b0 <__s2b+0x68>
 80069d2:	bf00      	nop
 80069d4:	08008396 	.word	0x08008396
 80069d8:	0800841e 	.word	0x0800841e

080069dc <__hi0bits>:
 80069dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80069e0:	4603      	mov	r3, r0
 80069e2:	bf36      	itet	cc
 80069e4:	0403      	lslcc	r3, r0, #16
 80069e6:	2000      	movcs	r0, #0
 80069e8:	2010      	movcc	r0, #16
 80069ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069ee:	bf3c      	itt	cc
 80069f0:	021b      	lslcc	r3, r3, #8
 80069f2:	3008      	addcc	r0, #8
 80069f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069f8:	bf3c      	itt	cc
 80069fa:	011b      	lslcc	r3, r3, #4
 80069fc:	3004      	addcc	r0, #4
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a02:	bf3c      	itt	cc
 8006a04:	009b      	lslcc	r3, r3, #2
 8006a06:	3002      	addcc	r0, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	db05      	blt.n	8006a18 <__hi0bits+0x3c>
 8006a0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006a10:	f100 0001 	add.w	r0, r0, #1
 8006a14:	bf08      	it	eq
 8006a16:	2020      	moveq	r0, #32
 8006a18:	4770      	bx	lr

08006a1a <__lo0bits>:
 8006a1a:	6803      	ldr	r3, [r0, #0]
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	f013 0007 	ands.w	r0, r3, #7
 8006a22:	d00b      	beq.n	8006a3c <__lo0bits+0x22>
 8006a24:	07d9      	lsls	r1, r3, #31
 8006a26:	d421      	bmi.n	8006a6c <__lo0bits+0x52>
 8006a28:	0798      	lsls	r0, r3, #30
 8006a2a:	bf49      	itett	mi
 8006a2c:	085b      	lsrmi	r3, r3, #1
 8006a2e:	089b      	lsrpl	r3, r3, #2
 8006a30:	2001      	movmi	r0, #1
 8006a32:	6013      	strmi	r3, [r2, #0]
 8006a34:	bf5c      	itt	pl
 8006a36:	6013      	strpl	r3, [r2, #0]
 8006a38:	2002      	movpl	r0, #2
 8006a3a:	4770      	bx	lr
 8006a3c:	b299      	uxth	r1, r3
 8006a3e:	b909      	cbnz	r1, 8006a44 <__lo0bits+0x2a>
 8006a40:	0c1b      	lsrs	r3, r3, #16
 8006a42:	2010      	movs	r0, #16
 8006a44:	b2d9      	uxtb	r1, r3
 8006a46:	b909      	cbnz	r1, 8006a4c <__lo0bits+0x32>
 8006a48:	3008      	adds	r0, #8
 8006a4a:	0a1b      	lsrs	r3, r3, #8
 8006a4c:	0719      	lsls	r1, r3, #28
 8006a4e:	bf04      	itt	eq
 8006a50:	091b      	lsreq	r3, r3, #4
 8006a52:	3004      	addeq	r0, #4
 8006a54:	0799      	lsls	r1, r3, #30
 8006a56:	bf04      	itt	eq
 8006a58:	089b      	lsreq	r3, r3, #2
 8006a5a:	3002      	addeq	r0, #2
 8006a5c:	07d9      	lsls	r1, r3, #31
 8006a5e:	d403      	bmi.n	8006a68 <__lo0bits+0x4e>
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	f100 0001 	add.w	r0, r0, #1
 8006a66:	d003      	beq.n	8006a70 <__lo0bits+0x56>
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	4770      	bx	lr
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	4770      	bx	lr
 8006a70:	2020      	movs	r0, #32
 8006a72:	4770      	bx	lr

08006a74 <__i2b>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	460c      	mov	r4, r1
 8006a78:	2101      	movs	r1, #1
 8006a7a:	f7ff febd 	bl	80067f8 <_Balloc>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	b928      	cbnz	r0, 8006a8e <__i2b+0x1a>
 8006a82:	4b05      	ldr	r3, [pc, #20]	@ (8006a98 <__i2b+0x24>)
 8006a84:	4805      	ldr	r0, [pc, #20]	@ (8006a9c <__i2b+0x28>)
 8006a86:	f240 1145 	movw	r1, #325	@ 0x145
 8006a8a:	f000 ff2f 	bl	80078ec <__assert_func>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	6144      	str	r4, [r0, #20]
 8006a92:	6103      	str	r3, [r0, #16]
 8006a94:	bd10      	pop	{r4, pc}
 8006a96:	bf00      	nop
 8006a98:	08008396 	.word	0x08008396
 8006a9c:	0800841e 	.word	0x0800841e

08006aa0 <__multiply>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	4614      	mov	r4, r2
 8006aa6:	690a      	ldr	r2, [r1, #16]
 8006aa8:	6923      	ldr	r3, [r4, #16]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	bfa8      	it	ge
 8006aae:	4623      	movge	r3, r4
 8006ab0:	460f      	mov	r7, r1
 8006ab2:	bfa4      	itt	ge
 8006ab4:	460c      	movge	r4, r1
 8006ab6:	461f      	movge	r7, r3
 8006ab8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006abc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006ac0:	68a3      	ldr	r3, [r4, #8]
 8006ac2:	6861      	ldr	r1, [r4, #4]
 8006ac4:	eb0a 0609 	add.w	r6, sl, r9
 8006ac8:	42b3      	cmp	r3, r6
 8006aca:	b085      	sub	sp, #20
 8006acc:	bfb8      	it	lt
 8006ace:	3101      	addlt	r1, #1
 8006ad0:	f7ff fe92 	bl	80067f8 <_Balloc>
 8006ad4:	b930      	cbnz	r0, 8006ae4 <__multiply+0x44>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	4b44      	ldr	r3, [pc, #272]	@ (8006bec <__multiply+0x14c>)
 8006ada:	4845      	ldr	r0, [pc, #276]	@ (8006bf0 <__multiply+0x150>)
 8006adc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ae0:	f000 ff04 	bl	80078ec <__assert_func>
 8006ae4:	f100 0514 	add.w	r5, r0, #20
 8006ae8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006aec:	462b      	mov	r3, r5
 8006aee:	2200      	movs	r2, #0
 8006af0:	4543      	cmp	r3, r8
 8006af2:	d321      	bcc.n	8006b38 <__multiply+0x98>
 8006af4:	f107 0114 	add.w	r1, r7, #20
 8006af8:	f104 0214 	add.w	r2, r4, #20
 8006afc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006b00:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006b04:	9302      	str	r3, [sp, #8]
 8006b06:	1b13      	subs	r3, r2, r4
 8006b08:	3b15      	subs	r3, #21
 8006b0a:	f023 0303 	bic.w	r3, r3, #3
 8006b0e:	3304      	adds	r3, #4
 8006b10:	f104 0715 	add.w	r7, r4, #21
 8006b14:	42ba      	cmp	r2, r7
 8006b16:	bf38      	it	cc
 8006b18:	2304      	movcc	r3, #4
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	9b02      	ldr	r3, [sp, #8]
 8006b1e:	9103      	str	r1, [sp, #12]
 8006b20:	428b      	cmp	r3, r1
 8006b22:	d80c      	bhi.n	8006b3e <__multiply+0x9e>
 8006b24:	2e00      	cmp	r6, #0
 8006b26:	dd03      	ble.n	8006b30 <__multiply+0x90>
 8006b28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d05b      	beq.n	8006be8 <__multiply+0x148>
 8006b30:	6106      	str	r6, [r0, #16]
 8006b32:	b005      	add	sp, #20
 8006b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b38:	f843 2b04 	str.w	r2, [r3], #4
 8006b3c:	e7d8      	b.n	8006af0 <__multiply+0x50>
 8006b3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006b42:	f1ba 0f00 	cmp.w	sl, #0
 8006b46:	d024      	beq.n	8006b92 <__multiply+0xf2>
 8006b48:	f104 0e14 	add.w	lr, r4, #20
 8006b4c:	46a9      	mov	r9, r5
 8006b4e:	f04f 0c00 	mov.w	ip, #0
 8006b52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b56:	f8d9 3000 	ldr.w	r3, [r9]
 8006b5a:	fa1f fb87 	uxth.w	fp, r7
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	fb0a 330b 	mla	r3, sl, fp, r3
 8006b64:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006b68:	f8d9 7000 	ldr.w	r7, [r9]
 8006b6c:	4463      	add	r3, ip
 8006b6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b72:	fb0a c70b 	mla	r7, sl, fp, ip
 8006b76:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b80:	4572      	cmp	r2, lr
 8006b82:	f849 3b04 	str.w	r3, [r9], #4
 8006b86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b8a:	d8e2      	bhi.n	8006b52 <__multiply+0xb2>
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	f845 c003 	str.w	ip, [r5, r3]
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b98:	3104      	adds	r1, #4
 8006b9a:	f1b9 0f00 	cmp.w	r9, #0
 8006b9e:	d021      	beq.n	8006be4 <__multiply+0x144>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	f104 0c14 	add.w	ip, r4, #20
 8006ba6:	46ae      	mov	lr, r5
 8006ba8:	f04f 0a00 	mov.w	sl, #0
 8006bac:	f8bc b000 	ldrh.w	fp, [ip]
 8006bb0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006bb4:	fb09 770b 	mla	r7, r9, fp, r7
 8006bb8:	4457      	add	r7, sl
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006bc0:	f84e 3b04 	str.w	r3, [lr], #4
 8006bc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bcc:	f8be 3000 	ldrh.w	r3, [lr]
 8006bd0:	fb09 330a 	mla	r3, r9, sl, r3
 8006bd4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006bd8:	4562      	cmp	r2, ip
 8006bda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bde:	d8e5      	bhi.n	8006bac <__multiply+0x10c>
 8006be0:	9f01      	ldr	r7, [sp, #4]
 8006be2:	51eb      	str	r3, [r5, r7]
 8006be4:	3504      	adds	r5, #4
 8006be6:	e799      	b.n	8006b1c <__multiply+0x7c>
 8006be8:	3e01      	subs	r6, #1
 8006bea:	e79b      	b.n	8006b24 <__multiply+0x84>
 8006bec:	08008396 	.word	0x08008396
 8006bf0:	0800841e 	.word	0x0800841e

08006bf4 <__pow5mult>:
 8006bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf8:	4615      	mov	r5, r2
 8006bfa:	f012 0203 	ands.w	r2, r2, #3
 8006bfe:	4607      	mov	r7, r0
 8006c00:	460e      	mov	r6, r1
 8006c02:	d007      	beq.n	8006c14 <__pow5mult+0x20>
 8006c04:	4c25      	ldr	r4, [pc, #148]	@ (8006c9c <__pow5mult+0xa8>)
 8006c06:	3a01      	subs	r2, #1
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c0e:	f7ff fe55 	bl	80068bc <__multadd>
 8006c12:	4606      	mov	r6, r0
 8006c14:	10ad      	asrs	r5, r5, #2
 8006c16:	d03d      	beq.n	8006c94 <__pow5mult+0xa0>
 8006c18:	69fc      	ldr	r4, [r7, #28]
 8006c1a:	b97c      	cbnz	r4, 8006c3c <__pow5mult+0x48>
 8006c1c:	2010      	movs	r0, #16
 8006c1e:	f000 fe97 	bl	8007950 <malloc>
 8006c22:	4602      	mov	r2, r0
 8006c24:	61f8      	str	r0, [r7, #28]
 8006c26:	b928      	cbnz	r0, 8006c34 <__pow5mult+0x40>
 8006c28:	4b1d      	ldr	r3, [pc, #116]	@ (8006ca0 <__pow5mult+0xac>)
 8006c2a:	481e      	ldr	r0, [pc, #120]	@ (8006ca4 <__pow5mult+0xb0>)
 8006c2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006c30:	f000 fe5c 	bl	80078ec <__assert_func>
 8006c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c38:	6004      	str	r4, [r0, #0]
 8006c3a:	60c4      	str	r4, [r0, #12]
 8006c3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c44:	b94c      	cbnz	r4, 8006c5a <__pow5mult+0x66>
 8006c46:	f240 2171 	movw	r1, #625	@ 0x271
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	f7ff ff12 	bl	8006a74 <__i2b>
 8006c50:	2300      	movs	r3, #0
 8006c52:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c56:	4604      	mov	r4, r0
 8006c58:	6003      	str	r3, [r0, #0]
 8006c5a:	f04f 0900 	mov.w	r9, #0
 8006c5e:	07eb      	lsls	r3, r5, #31
 8006c60:	d50a      	bpl.n	8006c78 <__pow5mult+0x84>
 8006c62:	4631      	mov	r1, r6
 8006c64:	4622      	mov	r2, r4
 8006c66:	4638      	mov	r0, r7
 8006c68:	f7ff ff1a 	bl	8006aa0 <__multiply>
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	4680      	mov	r8, r0
 8006c70:	4638      	mov	r0, r7
 8006c72:	f7ff fe01 	bl	8006878 <_Bfree>
 8006c76:	4646      	mov	r6, r8
 8006c78:	106d      	asrs	r5, r5, #1
 8006c7a:	d00b      	beq.n	8006c94 <__pow5mult+0xa0>
 8006c7c:	6820      	ldr	r0, [r4, #0]
 8006c7e:	b938      	cbnz	r0, 8006c90 <__pow5mult+0x9c>
 8006c80:	4622      	mov	r2, r4
 8006c82:	4621      	mov	r1, r4
 8006c84:	4638      	mov	r0, r7
 8006c86:	f7ff ff0b 	bl	8006aa0 <__multiply>
 8006c8a:	6020      	str	r0, [r4, #0]
 8006c8c:	f8c0 9000 	str.w	r9, [r0]
 8006c90:	4604      	mov	r4, r0
 8006c92:	e7e4      	b.n	8006c5e <__pow5mult+0x6a>
 8006c94:	4630      	mov	r0, r6
 8006c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9a:	bf00      	nop
 8006c9c:	08008478 	.word	0x08008478
 8006ca0:	08008407 	.word	0x08008407
 8006ca4:	0800841e 	.word	0x0800841e

08006ca8 <__lshift>:
 8006ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cac:	460c      	mov	r4, r1
 8006cae:	6849      	ldr	r1, [r1, #4]
 8006cb0:	6923      	ldr	r3, [r4, #16]
 8006cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cb6:	68a3      	ldr	r3, [r4, #8]
 8006cb8:	4607      	mov	r7, r0
 8006cba:	4691      	mov	r9, r2
 8006cbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cc0:	f108 0601 	add.w	r6, r8, #1
 8006cc4:	42b3      	cmp	r3, r6
 8006cc6:	db0b      	blt.n	8006ce0 <__lshift+0x38>
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f7ff fd95 	bl	80067f8 <_Balloc>
 8006cce:	4605      	mov	r5, r0
 8006cd0:	b948      	cbnz	r0, 8006ce6 <__lshift+0x3e>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	4b28      	ldr	r3, [pc, #160]	@ (8006d78 <__lshift+0xd0>)
 8006cd6:	4829      	ldr	r0, [pc, #164]	@ (8006d7c <__lshift+0xd4>)
 8006cd8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006cdc:	f000 fe06 	bl	80078ec <__assert_func>
 8006ce0:	3101      	adds	r1, #1
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	e7ee      	b.n	8006cc4 <__lshift+0x1c>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f100 0114 	add.w	r1, r0, #20
 8006cec:	f100 0210 	add.w	r2, r0, #16
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	4553      	cmp	r3, sl
 8006cf4:	db33      	blt.n	8006d5e <__lshift+0xb6>
 8006cf6:	6920      	ldr	r0, [r4, #16]
 8006cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cfc:	f104 0314 	add.w	r3, r4, #20
 8006d00:	f019 091f 	ands.w	r9, r9, #31
 8006d04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d0c:	d02b      	beq.n	8006d66 <__lshift+0xbe>
 8006d0e:	f1c9 0e20 	rsb	lr, r9, #32
 8006d12:	468a      	mov	sl, r1
 8006d14:	2200      	movs	r2, #0
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	fa00 f009 	lsl.w	r0, r0, r9
 8006d1c:	4310      	orrs	r0, r2
 8006d1e:	f84a 0b04 	str.w	r0, [sl], #4
 8006d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d26:	459c      	cmp	ip, r3
 8006d28:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d2c:	d8f3      	bhi.n	8006d16 <__lshift+0x6e>
 8006d2e:	ebac 0304 	sub.w	r3, ip, r4
 8006d32:	3b15      	subs	r3, #21
 8006d34:	f023 0303 	bic.w	r3, r3, #3
 8006d38:	3304      	adds	r3, #4
 8006d3a:	f104 0015 	add.w	r0, r4, #21
 8006d3e:	4584      	cmp	ip, r0
 8006d40:	bf38      	it	cc
 8006d42:	2304      	movcc	r3, #4
 8006d44:	50ca      	str	r2, [r1, r3]
 8006d46:	b10a      	cbz	r2, 8006d4c <__lshift+0xa4>
 8006d48:	f108 0602 	add.w	r6, r8, #2
 8006d4c:	3e01      	subs	r6, #1
 8006d4e:	4638      	mov	r0, r7
 8006d50:	612e      	str	r6, [r5, #16]
 8006d52:	4621      	mov	r1, r4
 8006d54:	f7ff fd90 	bl	8006878 <_Bfree>
 8006d58:	4628      	mov	r0, r5
 8006d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d62:	3301      	adds	r3, #1
 8006d64:	e7c5      	b.n	8006cf2 <__lshift+0x4a>
 8006d66:	3904      	subs	r1, #4
 8006d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d70:	459c      	cmp	ip, r3
 8006d72:	d8f9      	bhi.n	8006d68 <__lshift+0xc0>
 8006d74:	e7ea      	b.n	8006d4c <__lshift+0xa4>
 8006d76:	bf00      	nop
 8006d78:	08008396 	.word	0x08008396
 8006d7c:	0800841e 	.word	0x0800841e

08006d80 <__mcmp>:
 8006d80:	690a      	ldr	r2, [r1, #16]
 8006d82:	4603      	mov	r3, r0
 8006d84:	6900      	ldr	r0, [r0, #16]
 8006d86:	1a80      	subs	r0, r0, r2
 8006d88:	b530      	push	{r4, r5, lr}
 8006d8a:	d10e      	bne.n	8006daa <__mcmp+0x2a>
 8006d8c:	3314      	adds	r3, #20
 8006d8e:	3114      	adds	r1, #20
 8006d90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006da0:	4295      	cmp	r5, r2
 8006da2:	d003      	beq.n	8006dac <__mcmp+0x2c>
 8006da4:	d205      	bcs.n	8006db2 <__mcmp+0x32>
 8006da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006daa:	bd30      	pop	{r4, r5, pc}
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d3f3      	bcc.n	8006d98 <__mcmp+0x18>
 8006db0:	e7fb      	b.n	8006daa <__mcmp+0x2a>
 8006db2:	2001      	movs	r0, #1
 8006db4:	e7f9      	b.n	8006daa <__mcmp+0x2a>
	...

08006db8 <__mdiff>:
 8006db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dbc:	4689      	mov	r9, r1
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	4648      	mov	r0, r9
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	f7ff ffdb 	bl	8006d80 <__mcmp>
 8006dca:	1e05      	subs	r5, r0, #0
 8006dcc:	d112      	bne.n	8006df4 <__mdiff+0x3c>
 8006dce:	4629      	mov	r1, r5
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f7ff fd11 	bl	80067f8 <_Balloc>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	b928      	cbnz	r0, 8006de6 <__mdiff+0x2e>
 8006dda:	4b3f      	ldr	r3, [pc, #252]	@ (8006ed8 <__mdiff+0x120>)
 8006ddc:	f240 2137 	movw	r1, #567	@ 0x237
 8006de0:	483e      	ldr	r0, [pc, #248]	@ (8006edc <__mdiff+0x124>)
 8006de2:	f000 fd83 	bl	80078ec <__assert_func>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006dec:	4610      	mov	r0, r2
 8006dee:	b003      	add	sp, #12
 8006df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df4:	bfbc      	itt	lt
 8006df6:	464b      	movlt	r3, r9
 8006df8:	46a1      	movlt	r9, r4
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006e00:	bfba      	itte	lt
 8006e02:	461c      	movlt	r4, r3
 8006e04:	2501      	movlt	r5, #1
 8006e06:	2500      	movge	r5, #0
 8006e08:	f7ff fcf6 	bl	80067f8 <_Balloc>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	b918      	cbnz	r0, 8006e18 <__mdiff+0x60>
 8006e10:	4b31      	ldr	r3, [pc, #196]	@ (8006ed8 <__mdiff+0x120>)
 8006e12:	f240 2145 	movw	r1, #581	@ 0x245
 8006e16:	e7e3      	b.n	8006de0 <__mdiff+0x28>
 8006e18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006e1c:	6926      	ldr	r6, [r4, #16]
 8006e1e:	60c5      	str	r5, [r0, #12]
 8006e20:	f109 0310 	add.w	r3, r9, #16
 8006e24:	f109 0514 	add.w	r5, r9, #20
 8006e28:	f104 0e14 	add.w	lr, r4, #20
 8006e2c:	f100 0b14 	add.w	fp, r0, #20
 8006e30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006e34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	46d9      	mov	r9, fp
 8006e3c:	f04f 0c00 	mov.w	ip, #0
 8006e40:	9b01      	ldr	r3, [sp, #4]
 8006e42:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006e46:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	fa1f f38a 	uxth.w	r3, sl
 8006e50:	4619      	mov	r1, r3
 8006e52:	b283      	uxth	r3, r0
 8006e54:	1acb      	subs	r3, r1, r3
 8006e56:	0c00      	lsrs	r0, r0, #16
 8006e58:	4463      	add	r3, ip
 8006e5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e68:	4576      	cmp	r6, lr
 8006e6a:	f849 3b04 	str.w	r3, [r9], #4
 8006e6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e72:	d8e5      	bhi.n	8006e40 <__mdiff+0x88>
 8006e74:	1b33      	subs	r3, r6, r4
 8006e76:	3b15      	subs	r3, #21
 8006e78:	f023 0303 	bic.w	r3, r3, #3
 8006e7c:	3415      	adds	r4, #21
 8006e7e:	3304      	adds	r3, #4
 8006e80:	42a6      	cmp	r6, r4
 8006e82:	bf38      	it	cc
 8006e84:	2304      	movcc	r3, #4
 8006e86:	441d      	add	r5, r3
 8006e88:	445b      	add	r3, fp
 8006e8a:	461e      	mov	r6, r3
 8006e8c:	462c      	mov	r4, r5
 8006e8e:	4544      	cmp	r4, r8
 8006e90:	d30e      	bcc.n	8006eb0 <__mdiff+0xf8>
 8006e92:	f108 0103 	add.w	r1, r8, #3
 8006e96:	1b49      	subs	r1, r1, r5
 8006e98:	f021 0103 	bic.w	r1, r1, #3
 8006e9c:	3d03      	subs	r5, #3
 8006e9e:	45a8      	cmp	r8, r5
 8006ea0:	bf38      	it	cc
 8006ea2:	2100      	movcc	r1, #0
 8006ea4:	440b      	add	r3, r1
 8006ea6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006eaa:	b191      	cbz	r1, 8006ed2 <__mdiff+0x11a>
 8006eac:	6117      	str	r7, [r2, #16]
 8006eae:	e79d      	b.n	8006dec <__mdiff+0x34>
 8006eb0:	f854 1b04 	ldr.w	r1, [r4], #4
 8006eb4:	46e6      	mov	lr, ip
 8006eb6:	0c08      	lsrs	r0, r1, #16
 8006eb8:	fa1c fc81 	uxtah	ip, ip, r1
 8006ebc:	4471      	add	r1, lr
 8006ebe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ec2:	b289      	uxth	r1, r1
 8006ec4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ec8:	f846 1b04 	str.w	r1, [r6], #4
 8006ecc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ed0:	e7dd      	b.n	8006e8e <__mdiff+0xd6>
 8006ed2:	3f01      	subs	r7, #1
 8006ed4:	e7e7      	b.n	8006ea6 <__mdiff+0xee>
 8006ed6:	bf00      	nop
 8006ed8:	08008396 	.word	0x08008396
 8006edc:	0800841e 	.word	0x0800841e

08006ee0 <__ulp>:
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	ed8d 0b00 	vstr	d0, [sp]
 8006ee6:	9a01      	ldr	r2, [sp, #4]
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8006f28 <__ulp+0x48>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	dc08      	bgt.n	8006f06 <__ulp+0x26>
 8006ef4:	425b      	negs	r3, r3
 8006ef6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006efa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006efe:	da04      	bge.n	8006f0a <__ulp+0x2a>
 8006f00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006f04:	4113      	asrs	r3, r2
 8006f06:	2200      	movs	r2, #0
 8006f08:	e008      	b.n	8006f1c <__ulp+0x3c>
 8006f0a:	f1a2 0314 	sub.w	r3, r2, #20
 8006f0e:	2b1e      	cmp	r3, #30
 8006f10:	bfda      	itte	le
 8006f12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006f16:	40da      	lsrle	r2, r3
 8006f18:	2201      	movgt	r2, #1
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4610      	mov	r0, r2
 8006f20:	ec41 0b10 	vmov	d0, r0, r1
 8006f24:	b002      	add	sp, #8
 8006f26:	4770      	bx	lr
 8006f28:	7ff00000 	.word	0x7ff00000

08006f2c <__b2d>:
 8006f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f30:	6906      	ldr	r6, [r0, #16]
 8006f32:	f100 0814 	add.w	r8, r0, #20
 8006f36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006f3a:	1f37      	subs	r7, r6, #4
 8006f3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f40:	4610      	mov	r0, r2
 8006f42:	f7ff fd4b 	bl	80069dc <__hi0bits>
 8006f46:	f1c0 0320 	rsb	r3, r0, #32
 8006f4a:	280a      	cmp	r0, #10
 8006f4c:	600b      	str	r3, [r1, #0]
 8006f4e:	491b      	ldr	r1, [pc, #108]	@ (8006fbc <__b2d+0x90>)
 8006f50:	dc15      	bgt.n	8006f7e <__b2d+0x52>
 8006f52:	f1c0 0c0b 	rsb	ip, r0, #11
 8006f56:	fa22 f30c 	lsr.w	r3, r2, ip
 8006f5a:	45b8      	cmp	r8, r7
 8006f5c:	ea43 0501 	orr.w	r5, r3, r1
 8006f60:	bf34      	ite	cc
 8006f62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006f66:	2300      	movcs	r3, #0
 8006f68:	3015      	adds	r0, #21
 8006f6a:	fa02 f000 	lsl.w	r0, r2, r0
 8006f6e:	fa23 f30c 	lsr.w	r3, r3, ip
 8006f72:	4303      	orrs	r3, r0
 8006f74:	461c      	mov	r4, r3
 8006f76:	ec45 4b10 	vmov	d0, r4, r5
 8006f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7e:	45b8      	cmp	r8, r7
 8006f80:	bf3a      	itte	cc
 8006f82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006f86:	f1a6 0708 	subcc.w	r7, r6, #8
 8006f8a:	2300      	movcs	r3, #0
 8006f8c:	380b      	subs	r0, #11
 8006f8e:	d012      	beq.n	8006fb6 <__b2d+0x8a>
 8006f90:	f1c0 0120 	rsb	r1, r0, #32
 8006f94:	fa23 f401 	lsr.w	r4, r3, r1
 8006f98:	4082      	lsls	r2, r0
 8006f9a:	4322      	orrs	r2, r4
 8006f9c:	4547      	cmp	r7, r8
 8006f9e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006fa2:	bf8c      	ite	hi
 8006fa4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006fa8:	2200      	movls	r2, #0
 8006faa:	4083      	lsls	r3, r0
 8006fac:	40ca      	lsrs	r2, r1
 8006fae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	e7de      	b.n	8006f74 <__b2d+0x48>
 8006fb6:	ea42 0501 	orr.w	r5, r2, r1
 8006fba:	e7db      	b.n	8006f74 <__b2d+0x48>
 8006fbc:	3ff00000 	.word	0x3ff00000

08006fc0 <__d2b>:
 8006fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fc4:	460f      	mov	r7, r1
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	ec59 8b10 	vmov	r8, r9, d0
 8006fcc:	4616      	mov	r6, r2
 8006fce:	f7ff fc13 	bl	80067f8 <_Balloc>
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	b930      	cbnz	r0, 8006fe4 <__d2b+0x24>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	4b23      	ldr	r3, [pc, #140]	@ (8007068 <__d2b+0xa8>)
 8006fda:	4824      	ldr	r0, [pc, #144]	@ (800706c <__d2b+0xac>)
 8006fdc:	f240 310f 	movw	r1, #783	@ 0x30f
 8006fe0:	f000 fc84 	bl	80078ec <__assert_func>
 8006fe4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fec:	b10d      	cbz	r5, 8006ff2 <__d2b+0x32>
 8006fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ff2:	9301      	str	r3, [sp, #4]
 8006ff4:	f1b8 0300 	subs.w	r3, r8, #0
 8006ff8:	d023      	beq.n	8007042 <__d2b+0x82>
 8006ffa:	4668      	mov	r0, sp
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	f7ff fd0c 	bl	8006a1a <__lo0bits>
 8007002:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007006:	b1d0      	cbz	r0, 800703e <__d2b+0x7e>
 8007008:	f1c0 0320 	rsb	r3, r0, #32
 800700c:	fa02 f303 	lsl.w	r3, r2, r3
 8007010:	430b      	orrs	r3, r1
 8007012:	40c2      	lsrs	r2, r0
 8007014:	6163      	str	r3, [r4, #20]
 8007016:	9201      	str	r2, [sp, #4]
 8007018:	9b01      	ldr	r3, [sp, #4]
 800701a:	61a3      	str	r3, [r4, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	bf0c      	ite	eq
 8007020:	2201      	moveq	r2, #1
 8007022:	2202      	movne	r2, #2
 8007024:	6122      	str	r2, [r4, #16]
 8007026:	b1a5      	cbz	r5, 8007052 <__d2b+0x92>
 8007028:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800702c:	4405      	add	r5, r0
 800702e:	603d      	str	r5, [r7, #0]
 8007030:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007034:	6030      	str	r0, [r6, #0]
 8007036:	4620      	mov	r0, r4
 8007038:	b003      	add	sp, #12
 800703a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800703e:	6161      	str	r1, [r4, #20]
 8007040:	e7ea      	b.n	8007018 <__d2b+0x58>
 8007042:	a801      	add	r0, sp, #4
 8007044:	f7ff fce9 	bl	8006a1a <__lo0bits>
 8007048:	9b01      	ldr	r3, [sp, #4]
 800704a:	6163      	str	r3, [r4, #20]
 800704c:	3020      	adds	r0, #32
 800704e:	2201      	movs	r2, #1
 8007050:	e7e8      	b.n	8007024 <__d2b+0x64>
 8007052:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007056:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800705a:	6038      	str	r0, [r7, #0]
 800705c:	6918      	ldr	r0, [r3, #16]
 800705e:	f7ff fcbd 	bl	80069dc <__hi0bits>
 8007062:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007066:	e7e5      	b.n	8007034 <__d2b+0x74>
 8007068:	08008396 	.word	0x08008396
 800706c:	0800841e 	.word	0x0800841e

08007070 <__ratio>:
 8007070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	b085      	sub	sp, #20
 8007076:	e9cd 1000 	strd	r1, r0, [sp]
 800707a:	a902      	add	r1, sp, #8
 800707c:	f7ff ff56 	bl	8006f2c <__b2d>
 8007080:	9800      	ldr	r0, [sp, #0]
 8007082:	a903      	add	r1, sp, #12
 8007084:	ec55 4b10 	vmov	r4, r5, d0
 8007088:	f7ff ff50 	bl	8006f2c <__b2d>
 800708c:	9b01      	ldr	r3, [sp, #4]
 800708e:	6919      	ldr	r1, [r3, #16]
 8007090:	9b00      	ldr	r3, [sp, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	1ac9      	subs	r1, r1, r3
 8007096:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	ec5b ab10 	vmov	sl, fp, d0
 80070a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	bfce      	itee	gt
 80070a8:	462a      	movgt	r2, r5
 80070aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80070ae:	465a      	movle	r2, fp
 80070b0:	462f      	mov	r7, r5
 80070b2:	46d9      	mov	r9, fp
 80070b4:	bfcc      	ite	gt
 80070b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80070ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80070be:	464b      	mov	r3, r9
 80070c0:	4652      	mov	r2, sl
 80070c2:	4620      	mov	r0, r4
 80070c4:	4639      	mov	r1, r7
 80070c6:	f7f9 fbd1 	bl	800086c <__aeabi_ddiv>
 80070ca:	ec41 0b10 	vmov	d0, r0, r1
 80070ce:	b005      	add	sp, #20
 80070d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070d4 <__copybits>:
 80070d4:	3901      	subs	r1, #1
 80070d6:	b570      	push	{r4, r5, r6, lr}
 80070d8:	1149      	asrs	r1, r1, #5
 80070da:	6914      	ldr	r4, [r2, #16]
 80070dc:	3101      	adds	r1, #1
 80070de:	f102 0314 	add.w	r3, r2, #20
 80070e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070ea:	1f05      	subs	r5, r0, #4
 80070ec:	42a3      	cmp	r3, r4
 80070ee:	d30c      	bcc.n	800710a <__copybits+0x36>
 80070f0:	1aa3      	subs	r3, r4, r2
 80070f2:	3b11      	subs	r3, #17
 80070f4:	f023 0303 	bic.w	r3, r3, #3
 80070f8:	3211      	adds	r2, #17
 80070fa:	42a2      	cmp	r2, r4
 80070fc:	bf88      	it	hi
 80070fe:	2300      	movhi	r3, #0
 8007100:	4418      	add	r0, r3
 8007102:	2300      	movs	r3, #0
 8007104:	4288      	cmp	r0, r1
 8007106:	d305      	bcc.n	8007114 <__copybits+0x40>
 8007108:	bd70      	pop	{r4, r5, r6, pc}
 800710a:	f853 6b04 	ldr.w	r6, [r3], #4
 800710e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007112:	e7eb      	b.n	80070ec <__copybits+0x18>
 8007114:	f840 3b04 	str.w	r3, [r0], #4
 8007118:	e7f4      	b.n	8007104 <__copybits+0x30>

0800711a <__any_on>:
 800711a:	f100 0214 	add.w	r2, r0, #20
 800711e:	6900      	ldr	r0, [r0, #16]
 8007120:	114b      	asrs	r3, r1, #5
 8007122:	4298      	cmp	r0, r3
 8007124:	b510      	push	{r4, lr}
 8007126:	db11      	blt.n	800714c <__any_on+0x32>
 8007128:	dd0a      	ble.n	8007140 <__any_on+0x26>
 800712a:	f011 011f 	ands.w	r1, r1, #31
 800712e:	d007      	beq.n	8007140 <__any_on+0x26>
 8007130:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007134:	fa24 f001 	lsr.w	r0, r4, r1
 8007138:	fa00 f101 	lsl.w	r1, r0, r1
 800713c:	428c      	cmp	r4, r1
 800713e:	d10b      	bne.n	8007158 <__any_on+0x3e>
 8007140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007144:	4293      	cmp	r3, r2
 8007146:	d803      	bhi.n	8007150 <__any_on+0x36>
 8007148:	2000      	movs	r0, #0
 800714a:	bd10      	pop	{r4, pc}
 800714c:	4603      	mov	r3, r0
 800714e:	e7f7      	b.n	8007140 <__any_on+0x26>
 8007150:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007154:	2900      	cmp	r1, #0
 8007156:	d0f5      	beq.n	8007144 <__any_on+0x2a>
 8007158:	2001      	movs	r0, #1
 800715a:	e7f6      	b.n	800714a <__any_on+0x30>

0800715c <__ascii_wctomb>:
 800715c:	4603      	mov	r3, r0
 800715e:	4608      	mov	r0, r1
 8007160:	b141      	cbz	r1, 8007174 <__ascii_wctomb+0x18>
 8007162:	2aff      	cmp	r2, #255	@ 0xff
 8007164:	d904      	bls.n	8007170 <__ascii_wctomb+0x14>
 8007166:	228a      	movs	r2, #138	@ 0x8a
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800716e:	4770      	bx	lr
 8007170:	700a      	strb	r2, [r1, #0]
 8007172:	2001      	movs	r0, #1
 8007174:	4770      	bx	lr

08007176 <__ssputs_r>:
 8007176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800717a:	688e      	ldr	r6, [r1, #8]
 800717c:	461f      	mov	r7, r3
 800717e:	42be      	cmp	r6, r7
 8007180:	680b      	ldr	r3, [r1, #0]
 8007182:	4682      	mov	sl, r0
 8007184:	460c      	mov	r4, r1
 8007186:	4690      	mov	r8, r2
 8007188:	d82d      	bhi.n	80071e6 <__ssputs_r+0x70>
 800718a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800718e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007192:	d026      	beq.n	80071e2 <__ssputs_r+0x6c>
 8007194:	6965      	ldr	r5, [r4, #20]
 8007196:	6909      	ldr	r1, [r1, #16]
 8007198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800719c:	eba3 0901 	sub.w	r9, r3, r1
 80071a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071a4:	1c7b      	adds	r3, r7, #1
 80071a6:	444b      	add	r3, r9
 80071a8:	106d      	asrs	r5, r5, #1
 80071aa:	429d      	cmp	r5, r3
 80071ac:	bf38      	it	cc
 80071ae:	461d      	movcc	r5, r3
 80071b0:	0553      	lsls	r3, r2, #21
 80071b2:	d527      	bpl.n	8007204 <__ssputs_r+0x8e>
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7ff fa81 	bl	80066bc <_malloc_r>
 80071ba:	4606      	mov	r6, r0
 80071bc:	b360      	cbz	r0, 8007218 <__ssputs_r+0xa2>
 80071be:	6921      	ldr	r1, [r4, #16]
 80071c0:	464a      	mov	r2, r9
 80071c2:	f7fe febc 	bl	8005f3e <memcpy>
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d0:	81a3      	strh	r3, [r4, #12]
 80071d2:	6126      	str	r6, [r4, #16]
 80071d4:	6165      	str	r5, [r4, #20]
 80071d6:	444e      	add	r6, r9
 80071d8:	eba5 0509 	sub.w	r5, r5, r9
 80071dc:	6026      	str	r6, [r4, #0]
 80071de:	60a5      	str	r5, [r4, #8]
 80071e0:	463e      	mov	r6, r7
 80071e2:	42be      	cmp	r6, r7
 80071e4:	d900      	bls.n	80071e8 <__ssputs_r+0x72>
 80071e6:	463e      	mov	r6, r7
 80071e8:	6820      	ldr	r0, [r4, #0]
 80071ea:	4632      	mov	r2, r6
 80071ec:	4641      	mov	r1, r8
 80071ee:	f000 fb53 	bl	8007898 <memmove>
 80071f2:	68a3      	ldr	r3, [r4, #8]
 80071f4:	1b9b      	subs	r3, r3, r6
 80071f6:	60a3      	str	r3, [r4, #8]
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	4433      	add	r3, r6
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	2000      	movs	r0, #0
 8007200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007204:	462a      	mov	r2, r5
 8007206:	f000 fbab 	bl	8007960 <_realloc_r>
 800720a:	4606      	mov	r6, r0
 800720c:	2800      	cmp	r0, #0
 800720e:	d1e0      	bne.n	80071d2 <__ssputs_r+0x5c>
 8007210:	6921      	ldr	r1, [r4, #16]
 8007212:	4650      	mov	r0, sl
 8007214:	f7fe feac 	bl	8005f70 <_free_r>
 8007218:	230c      	movs	r3, #12
 800721a:	f8ca 3000 	str.w	r3, [sl]
 800721e:	89a3      	ldrh	r3, [r4, #12]
 8007220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007224:	81a3      	strh	r3, [r4, #12]
 8007226:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800722a:	e7e9      	b.n	8007200 <__ssputs_r+0x8a>

0800722c <_svfiprintf_r>:
 800722c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007230:	4698      	mov	r8, r3
 8007232:	898b      	ldrh	r3, [r1, #12]
 8007234:	061b      	lsls	r3, r3, #24
 8007236:	b09d      	sub	sp, #116	@ 0x74
 8007238:	4607      	mov	r7, r0
 800723a:	460d      	mov	r5, r1
 800723c:	4614      	mov	r4, r2
 800723e:	d510      	bpl.n	8007262 <_svfiprintf_r+0x36>
 8007240:	690b      	ldr	r3, [r1, #16]
 8007242:	b973      	cbnz	r3, 8007262 <_svfiprintf_r+0x36>
 8007244:	2140      	movs	r1, #64	@ 0x40
 8007246:	f7ff fa39 	bl	80066bc <_malloc_r>
 800724a:	6028      	str	r0, [r5, #0]
 800724c:	6128      	str	r0, [r5, #16]
 800724e:	b930      	cbnz	r0, 800725e <_svfiprintf_r+0x32>
 8007250:	230c      	movs	r3, #12
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007258:	b01d      	add	sp, #116	@ 0x74
 800725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800725e:	2340      	movs	r3, #64	@ 0x40
 8007260:	616b      	str	r3, [r5, #20]
 8007262:	2300      	movs	r3, #0
 8007264:	9309      	str	r3, [sp, #36]	@ 0x24
 8007266:	2320      	movs	r3, #32
 8007268:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800726c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007270:	2330      	movs	r3, #48	@ 0x30
 8007272:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007410 <_svfiprintf_r+0x1e4>
 8007276:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800727a:	f04f 0901 	mov.w	r9, #1
 800727e:	4623      	mov	r3, r4
 8007280:	469a      	mov	sl, r3
 8007282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007286:	b10a      	cbz	r2, 800728c <_svfiprintf_r+0x60>
 8007288:	2a25      	cmp	r2, #37	@ 0x25
 800728a:	d1f9      	bne.n	8007280 <_svfiprintf_r+0x54>
 800728c:	ebba 0b04 	subs.w	fp, sl, r4
 8007290:	d00b      	beq.n	80072aa <_svfiprintf_r+0x7e>
 8007292:	465b      	mov	r3, fp
 8007294:	4622      	mov	r2, r4
 8007296:	4629      	mov	r1, r5
 8007298:	4638      	mov	r0, r7
 800729a:	f7ff ff6c 	bl	8007176 <__ssputs_r>
 800729e:	3001      	adds	r0, #1
 80072a0:	f000 80a7 	beq.w	80073f2 <_svfiprintf_r+0x1c6>
 80072a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072a6:	445a      	add	r2, fp
 80072a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80072aa:	f89a 3000 	ldrb.w	r3, [sl]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 809f 	beq.w	80073f2 <_svfiprintf_r+0x1c6>
 80072b4:	2300      	movs	r3, #0
 80072b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072be:	f10a 0a01 	add.w	sl, sl, #1
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	9307      	str	r3, [sp, #28]
 80072c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80072cc:	4654      	mov	r4, sl
 80072ce:	2205      	movs	r2, #5
 80072d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d4:	484e      	ldr	r0, [pc, #312]	@ (8007410 <_svfiprintf_r+0x1e4>)
 80072d6:	f7f8 ff93 	bl	8000200 <memchr>
 80072da:	9a04      	ldr	r2, [sp, #16]
 80072dc:	b9d8      	cbnz	r0, 8007316 <_svfiprintf_r+0xea>
 80072de:	06d0      	lsls	r0, r2, #27
 80072e0:	bf44      	itt	mi
 80072e2:	2320      	movmi	r3, #32
 80072e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072e8:	0711      	lsls	r1, r2, #28
 80072ea:	bf44      	itt	mi
 80072ec:	232b      	movmi	r3, #43	@ 0x2b
 80072ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072f2:	f89a 3000 	ldrb.w	r3, [sl]
 80072f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80072f8:	d015      	beq.n	8007326 <_svfiprintf_r+0xfa>
 80072fa:	9a07      	ldr	r2, [sp, #28]
 80072fc:	4654      	mov	r4, sl
 80072fe:	2000      	movs	r0, #0
 8007300:	f04f 0c0a 	mov.w	ip, #10
 8007304:	4621      	mov	r1, r4
 8007306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800730a:	3b30      	subs	r3, #48	@ 0x30
 800730c:	2b09      	cmp	r3, #9
 800730e:	d94b      	bls.n	80073a8 <_svfiprintf_r+0x17c>
 8007310:	b1b0      	cbz	r0, 8007340 <_svfiprintf_r+0x114>
 8007312:	9207      	str	r2, [sp, #28]
 8007314:	e014      	b.n	8007340 <_svfiprintf_r+0x114>
 8007316:	eba0 0308 	sub.w	r3, r0, r8
 800731a:	fa09 f303 	lsl.w	r3, r9, r3
 800731e:	4313      	orrs	r3, r2
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	46a2      	mov	sl, r4
 8007324:	e7d2      	b.n	80072cc <_svfiprintf_r+0xa0>
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	1d19      	adds	r1, r3, #4
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	9103      	str	r1, [sp, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	bfbb      	ittet	lt
 8007332:	425b      	neglt	r3, r3
 8007334:	f042 0202 	orrlt.w	r2, r2, #2
 8007338:	9307      	strge	r3, [sp, #28]
 800733a:	9307      	strlt	r3, [sp, #28]
 800733c:	bfb8      	it	lt
 800733e:	9204      	strlt	r2, [sp, #16]
 8007340:	7823      	ldrb	r3, [r4, #0]
 8007342:	2b2e      	cmp	r3, #46	@ 0x2e
 8007344:	d10a      	bne.n	800735c <_svfiprintf_r+0x130>
 8007346:	7863      	ldrb	r3, [r4, #1]
 8007348:	2b2a      	cmp	r3, #42	@ 0x2a
 800734a:	d132      	bne.n	80073b2 <_svfiprintf_r+0x186>
 800734c:	9b03      	ldr	r3, [sp, #12]
 800734e:	1d1a      	adds	r2, r3, #4
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	9203      	str	r2, [sp, #12]
 8007354:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007358:	3402      	adds	r4, #2
 800735a:	9305      	str	r3, [sp, #20]
 800735c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007420 <_svfiprintf_r+0x1f4>
 8007360:	7821      	ldrb	r1, [r4, #0]
 8007362:	2203      	movs	r2, #3
 8007364:	4650      	mov	r0, sl
 8007366:	f7f8 ff4b 	bl	8000200 <memchr>
 800736a:	b138      	cbz	r0, 800737c <_svfiprintf_r+0x150>
 800736c:	9b04      	ldr	r3, [sp, #16]
 800736e:	eba0 000a 	sub.w	r0, r0, sl
 8007372:	2240      	movs	r2, #64	@ 0x40
 8007374:	4082      	lsls	r2, r0
 8007376:	4313      	orrs	r3, r2
 8007378:	3401      	adds	r4, #1
 800737a:	9304      	str	r3, [sp, #16]
 800737c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007380:	4824      	ldr	r0, [pc, #144]	@ (8007414 <_svfiprintf_r+0x1e8>)
 8007382:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007386:	2206      	movs	r2, #6
 8007388:	f7f8 ff3a 	bl	8000200 <memchr>
 800738c:	2800      	cmp	r0, #0
 800738e:	d036      	beq.n	80073fe <_svfiprintf_r+0x1d2>
 8007390:	4b21      	ldr	r3, [pc, #132]	@ (8007418 <_svfiprintf_r+0x1ec>)
 8007392:	bb1b      	cbnz	r3, 80073dc <_svfiprintf_r+0x1b0>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	3307      	adds	r3, #7
 8007398:	f023 0307 	bic.w	r3, r3, #7
 800739c:	3308      	adds	r3, #8
 800739e:	9303      	str	r3, [sp, #12]
 80073a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a2:	4433      	add	r3, r6
 80073a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a6:	e76a      	b.n	800727e <_svfiprintf_r+0x52>
 80073a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ac:	460c      	mov	r4, r1
 80073ae:	2001      	movs	r0, #1
 80073b0:	e7a8      	b.n	8007304 <_svfiprintf_r+0xd8>
 80073b2:	2300      	movs	r3, #0
 80073b4:	3401      	adds	r4, #1
 80073b6:	9305      	str	r3, [sp, #20]
 80073b8:	4619      	mov	r1, r3
 80073ba:	f04f 0c0a 	mov.w	ip, #10
 80073be:	4620      	mov	r0, r4
 80073c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073c4:	3a30      	subs	r2, #48	@ 0x30
 80073c6:	2a09      	cmp	r2, #9
 80073c8:	d903      	bls.n	80073d2 <_svfiprintf_r+0x1a6>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0c6      	beq.n	800735c <_svfiprintf_r+0x130>
 80073ce:	9105      	str	r1, [sp, #20]
 80073d0:	e7c4      	b.n	800735c <_svfiprintf_r+0x130>
 80073d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80073d6:	4604      	mov	r4, r0
 80073d8:	2301      	movs	r3, #1
 80073da:	e7f0      	b.n	80073be <_svfiprintf_r+0x192>
 80073dc:	ab03      	add	r3, sp, #12
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	462a      	mov	r2, r5
 80073e2:	4b0e      	ldr	r3, [pc, #56]	@ (800741c <_svfiprintf_r+0x1f0>)
 80073e4:	a904      	add	r1, sp, #16
 80073e6:	4638      	mov	r0, r7
 80073e8:	f3af 8000 	nop.w
 80073ec:	1c42      	adds	r2, r0, #1
 80073ee:	4606      	mov	r6, r0
 80073f0:	d1d6      	bne.n	80073a0 <_svfiprintf_r+0x174>
 80073f2:	89ab      	ldrh	r3, [r5, #12]
 80073f4:	065b      	lsls	r3, r3, #25
 80073f6:	f53f af2d 	bmi.w	8007254 <_svfiprintf_r+0x28>
 80073fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073fc:	e72c      	b.n	8007258 <_svfiprintf_r+0x2c>
 80073fe:	ab03      	add	r3, sp, #12
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	462a      	mov	r2, r5
 8007404:	4b05      	ldr	r3, [pc, #20]	@ (800741c <_svfiprintf_r+0x1f0>)
 8007406:	a904      	add	r1, sp, #16
 8007408:	4638      	mov	r0, r7
 800740a:	f000 f879 	bl	8007500 <_printf_i>
 800740e:	e7ed      	b.n	80073ec <_svfiprintf_r+0x1c0>
 8007410:	08008578 	.word	0x08008578
 8007414:	08008582 	.word	0x08008582
 8007418:	00000000 	.word	0x00000000
 800741c:	08007177 	.word	0x08007177
 8007420:	0800857e 	.word	0x0800857e

08007424 <_printf_common>:
 8007424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	4616      	mov	r6, r2
 800742a:	4698      	mov	r8, r3
 800742c:	688a      	ldr	r2, [r1, #8]
 800742e:	690b      	ldr	r3, [r1, #16]
 8007430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007434:	4293      	cmp	r3, r2
 8007436:	bfb8      	it	lt
 8007438:	4613      	movlt	r3, r2
 800743a:	6033      	str	r3, [r6, #0]
 800743c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007440:	4607      	mov	r7, r0
 8007442:	460c      	mov	r4, r1
 8007444:	b10a      	cbz	r2, 800744a <_printf_common+0x26>
 8007446:	3301      	adds	r3, #1
 8007448:	6033      	str	r3, [r6, #0]
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	0699      	lsls	r1, r3, #26
 800744e:	bf42      	ittt	mi
 8007450:	6833      	ldrmi	r3, [r6, #0]
 8007452:	3302      	addmi	r3, #2
 8007454:	6033      	strmi	r3, [r6, #0]
 8007456:	6825      	ldr	r5, [r4, #0]
 8007458:	f015 0506 	ands.w	r5, r5, #6
 800745c:	d106      	bne.n	800746c <_printf_common+0x48>
 800745e:	f104 0a19 	add.w	sl, r4, #25
 8007462:	68e3      	ldr	r3, [r4, #12]
 8007464:	6832      	ldr	r2, [r6, #0]
 8007466:	1a9b      	subs	r3, r3, r2
 8007468:	42ab      	cmp	r3, r5
 800746a:	dc26      	bgt.n	80074ba <_printf_common+0x96>
 800746c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007470:	6822      	ldr	r2, [r4, #0]
 8007472:	3b00      	subs	r3, #0
 8007474:	bf18      	it	ne
 8007476:	2301      	movne	r3, #1
 8007478:	0692      	lsls	r2, r2, #26
 800747a:	d42b      	bmi.n	80074d4 <_printf_common+0xb0>
 800747c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007480:	4641      	mov	r1, r8
 8007482:	4638      	mov	r0, r7
 8007484:	47c8      	blx	r9
 8007486:	3001      	adds	r0, #1
 8007488:	d01e      	beq.n	80074c8 <_printf_common+0xa4>
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	6922      	ldr	r2, [r4, #16]
 800748e:	f003 0306 	and.w	r3, r3, #6
 8007492:	2b04      	cmp	r3, #4
 8007494:	bf02      	ittt	eq
 8007496:	68e5      	ldreq	r5, [r4, #12]
 8007498:	6833      	ldreq	r3, [r6, #0]
 800749a:	1aed      	subeq	r5, r5, r3
 800749c:	68a3      	ldr	r3, [r4, #8]
 800749e:	bf0c      	ite	eq
 80074a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074a4:	2500      	movne	r5, #0
 80074a6:	4293      	cmp	r3, r2
 80074a8:	bfc4      	itt	gt
 80074aa:	1a9b      	subgt	r3, r3, r2
 80074ac:	18ed      	addgt	r5, r5, r3
 80074ae:	2600      	movs	r6, #0
 80074b0:	341a      	adds	r4, #26
 80074b2:	42b5      	cmp	r5, r6
 80074b4:	d11a      	bne.n	80074ec <_printf_common+0xc8>
 80074b6:	2000      	movs	r0, #0
 80074b8:	e008      	b.n	80074cc <_printf_common+0xa8>
 80074ba:	2301      	movs	r3, #1
 80074bc:	4652      	mov	r2, sl
 80074be:	4641      	mov	r1, r8
 80074c0:	4638      	mov	r0, r7
 80074c2:	47c8      	blx	r9
 80074c4:	3001      	adds	r0, #1
 80074c6:	d103      	bne.n	80074d0 <_printf_common+0xac>
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d0:	3501      	adds	r5, #1
 80074d2:	e7c6      	b.n	8007462 <_printf_common+0x3e>
 80074d4:	18e1      	adds	r1, r4, r3
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	2030      	movs	r0, #48	@ 0x30
 80074da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074de:	4422      	add	r2, r4
 80074e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074e8:	3302      	adds	r3, #2
 80074ea:	e7c7      	b.n	800747c <_printf_common+0x58>
 80074ec:	2301      	movs	r3, #1
 80074ee:	4622      	mov	r2, r4
 80074f0:	4641      	mov	r1, r8
 80074f2:	4638      	mov	r0, r7
 80074f4:	47c8      	blx	r9
 80074f6:	3001      	adds	r0, #1
 80074f8:	d0e6      	beq.n	80074c8 <_printf_common+0xa4>
 80074fa:	3601      	adds	r6, #1
 80074fc:	e7d9      	b.n	80074b2 <_printf_common+0x8e>
	...

08007500 <_printf_i>:
 8007500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007504:	7e0f      	ldrb	r7, [r1, #24]
 8007506:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007508:	2f78      	cmp	r7, #120	@ 0x78
 800750a:	4691      	mov	r9, r2
 800750c:	4680      	mov	r8, r0
 800750e:	460c      	mov	r4, r1
 8007510:	469a      	mov	sl, r3
 8007512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007516:	d807      	bhi.n	8007528 <_printf_i+0x28>
 8007518:	2f62      	cmp	r7, #98	@ 0x62
 800751a:	d80a      	bhi.n	8007532 <_printf_i+0x32>
 800751c:	2f00      	cmp	r7, #0
 800751e:	f000 80d2 	beq.w	80076c6 <_printf_i+0x1c6>
 8007522:	2f58      	cmp	r7, #88	@ 0x58
 8007524:	f000 80b9 	beq.w	800769a <_printf_i+0x19a>
 8007528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800752c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007530:	e03a      	b.n	80075a8 <_printf_i+0xa8>
 8007532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007536:	2b15      	cmp	r3, #21
 8007538:	d8f6      	bhi.n	8007528 <_printf_i+0x28>
 800753a:	a101      	add	r1, pc, #4	@ (adr r1, 8007540 <_printf_i+0x40>)
 800753c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007540:	08007599 	.word	0x08007599
 8007544:	080075ad 	.word	0x080075ad
 8007548:	08007529 	.word	0x08007529
 800754c:	08007529 	.word	0x08007529
 8007550:	08007529 	.word	0x08007529
 8007554:	08007529 	.word	0x08007529
 8007558:	080075ad 	.word	0x080075ad
 800755c:	08007529 	.word	0x08007529
 8007560:	08007529 	.word	0x08007529
 8007564:	08007529 	.word	0x08007529
 8007568:	08007529 	.word	0x08007529
 800756c:	080076ad 	.word	0x080076ad
 8007570:	080075d7 	.word	0x080075d7
 8007574:	08007667 	.word	0x08007667
 8007578:	08007529 	.word	0x08007529
 800757c:	08007529 	.word	0x08007529
 8007580:	080076cf 	.word	0x080076cf
 8007584:	08007529 	.word	0x08007529
 8007588:	080075d7 	.word	0x080075d7
 800758c:	08007529 	.word	0x08007529
 8007590:	08007529 	.word	0x08007529
 8007594:	0800766f 	.word	0x0800766f
 8007598:	6833      	ldr	r3, [r6, #0]
 800759a:	1d1a      	adds	r2, r3, #4
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6032      	str	r2, [r6, #0]
 80075a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075a8:	2301      	movs	r3, #1
 80075aa:	e09d      	b.n	80076e8 <_printf_i+0x1e8>
 80075ac:	6833      	ldr	r3, [r6, #0]
 80075ae:	6820      	ldr	r0, [r4, #0]
 80075b0:	1d19      	adds	r1, r3, #4
 80075b2:	6031      	str	r1, [r6, #0]
 80075b4:	0606      	lsls	r6, r0, #24
 80075b6:	d501      	bpl.n	80075bc <_printf_i+0xbc>
 80075b8:	681d      	ldr	r5, [r3, #0]
 80075ba:	e003      	b.n	80075c4 <_printf_i+0xc4>
 80075bc:	0645      	lsls	r5, r0, #25
 80075be:	d5fb      	bpl.n	80075b8 <_printf_i+0xb8>
 80075c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075c4:	2d00      	cmp	r5, #0
 80075c6:	da03      	bge.n	80075d0 <_printf_i+0xd0>
 80075c8:	232d      	movs	r3, #45	@ 0x2d
 80075ca:	426d      	negs	r5, r5
 80075cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075d0:	4859      	ldr	r0, [pc, #356]	@ (8007738 <_printf_i+0x238>)
 80075d2:	230a      	movs	r3, #10
 80075d4:	e011      	b.n	80075fa <_printf_i+0xfa>
 80075d6:	6821      	ldr	r1, [r4, #0]
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	0608      	lsls	r0, r1, #24
 80075dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80075e0:	d402      	bmi.n	80075e8 <_printf_i+0xe8>
 80075e2:	0649      	lsls	r1, r1, #25
 80075e4:	bf48      	it	mi
 80075e6:	b2ad      	uxthmi	r5, r5
 80075e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80075ea:	4853      	ldr	r0, [pc, #332]	@ (8007738 <_printf_i+0x238>)
 80075ec:	6033      	str	r3, [r6, #0]
 80075ee:	bf14      	ite	ne
 80075f0:	230a      	movne	r3, #10
 80075f2:	2308      	moveq	r3, #8
 80075f4:	2100      	movs	r1, #0
 80075f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075fa:	6866      	ldr	r6, [r4, #4]
 80075fc:	60a6      	str	r6, [r4, #8]
 80075fe:	2e00      	cmp	r6, #0
 8007600:	bfa2      	ittt	ge
 8007602:	6821      	ldrge	r1, [r4, #0]
 8007604:	f021 0104 	bicge.w	r1, r1, #4
 8007608:	6021      	strge	r1, [r4, #0]
 800760a:	b90d      	cbnz	r5, 8007610 <_printf_i+0x110>
 800760c:	2e00      	cmp	r6, #0
 800760e:	d04b      	beq.n	80076a8 <_printf_i+0x1a8>
 8007610:	4616      	mov	r6, r2
 8007612:	fbb5 f1f3 	udiv	r1, r5, r3
 8007616:	fb03 5711 	mls	r7, r3, r1, r5
 800761a:	5dc7      	ldrb	r7, [r0, r7]
 800761c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007620:	462f      	mov	r7, r5
 8007622:	42bb      	cmp	r3, r7
 8007624:	460d      	mov	r5, r1
 8007626:	d9f4      	bls.n	8007612 <_printf_i+0x112>
 8007628:	2b08      	cmp	r3, #8
 800762a:	d10b      	bne.n	8007644 <_printf_i+0x144>
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	07df      	lsls	r7, r3, #31
 8007630:	d508      	bpl.n	8007644 <_printf_i+0x144>
 8007632:	6923      	ldr	r3, [r4, #16]
 8007634:	6861      	ldr	r1, [r4, #4]
 8007636:	4299      	cmp	r1, r3
 8007638:	bfde      	ittt	le
 800763a:	2330      	movle	r3, #48	@ 0x30
 800763c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007640:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007644:	1b92      	subs	r2, r2, r6
 8007646:	6122      	str	r2, [r4, #16]
 8007648:	f8cd a000 	str.w	sl, [sp]
 800764c:	464b      	mov	r3, r9
 800764e:	aa03      	add	r2, sp, #12
 8007650:	4621      	mov	r1, r4
 8007652:	4640      	mov	r0, r8
 8007654:	f7ff fee6 	bl	8007424 <_printf_common>
 8007658:	3001      	adds	r0, #1
 800765a:	d14a      	bne.n	80076f2 <_printf_i+0x1f2>
 800765c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007660:	b004      	add	sp, #16
 8007662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	f043 0320 	orr.w	r3, r3, #32
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	4833      	ldr	r0, [pc, #204]	@ (800773c <_printf_i+0x23c>)
 8007670:	2778      	movs	r7, #120	@ 0x78
 8007672:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	6831      	ldr	r1, [r6, #0]
 800767a:	061f      	lsls	r7, r3, #24
 800767c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007680:	d402      	bmi.n	8007688 <_printf_i+0x188>
 8007682:	065f      	lsls	r7, r3, #25
 8007684:	bf48      	it	mi
 8007686:	b2ad      	uxthmi	r5, r5
 8007688:	6031      	str	r1, [r6, #0]
 800768a:	07d9      	lsls	r1, r3, #31
 800768c:	bf44      	itt	mi
 800768e:	f043 0320 	orrmi.w	r3, r3, #32
 8007692:	6023      	strmi	r3, [r4, #0]
 8007694:	b11d      	cbz	r5, 800769e <_printf_i+0x19e>
 8007696:	2310      	movs	r3, #16
 8007698:	e7ac      	b.n	80075f4 <_printf_i+0xf4>
 800769a:	4827      	ldr	r0, [pc, #156]	@ (8007738 <_printf_i+0x238>)
 800769c:	e7e9      	b.n	8007672 <_printf_i+0x172>
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	f023 0320 	bic.w	r3, r3, #32
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	e7f6      	b.n	8007696 <_printf_i+0x196>
 80076a8:	4616      	mov	r6, r2
 80076aa:	e7bd      	b.n	8007628 <_printf_i+0x128>
 80076ac:	6833      	ldr	r3, [r6, #0]
 80076ae:	6825      	ldr	r5, [r4, #0]
 80076b0:	6961      	ldr	r1, [r4, #20]
 80076b2:	1d18      	adds	r0, r3, #4
 80076b4:	6030      	str	r0, [r6, #0]
 80076b6:	062e      	lsls	r6, r5, #24
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	d501      	bpl.n	80076c0 <_printf_i+0x1c0>
 80076bc:	6019      	str	r1, [r3, #0]
 80076be:	e002      	b.n	80076c6 <_printf_i+0x1c6>
 80076c0:	0668      	lsls	r0, r5, #25
 80076c2:	d5fb      	bpl.n	80076bc <_printf_i+0x1bc>
 80076c4:	8019      	strh	r1, [r3, #0]
 80076c6:	2300      	movs	r3, #0
 80076c8:	6123      	str	r3, [r4, #16]
 80076ca:	4616      	mov	r6, r2
 80076cc:	e7bc      	b.n	8007648 <_printf_i+0x148>
 80076ce:	6833      	ldr	r3, [r6, #0]
 80076d0:	1d1a      	adds	r2, r3, #4
 80076d2:	6032      	str	r2, [r6, #0]
 80076d4:	681e      	ldr	r6, [r3, #0]
 80076d6:	6862      	ldr	r2, [r4, #4]
 80076d8:	2100      	movs	r1, #0
 80076da:	4630      	mov	r0, r6
 80076dc:	f7f8 fd90 	bl	8000200 <memchr>
 80076e0:	b108      	cbz	r0, 80076e6 <_printf_i+0x1e6>
 80076e2:	1b80      	subs	r0, r0, r6
 80076e4:	6060      	str	r0, [r4, #4]
 80076e6:	6863      	ldr	r3, [r4, #4]
 80076e8:	6123      	str	r3, [r4, #16]
 80076ea:	2300      	movs	r3, #0
 80076ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076f0:	e7aa      	b.n	8007648 <_printf_i+0x148>
 80076f2:	6923      	ldr	r3, [r4, #16]
 80076f4:	4632      	mov	r2, r6
 80076f6:	4649      	mov	r1, r9
 80076f8:	4640      	mov	r0, r8
 80076fa:	47d0      	blx	sl
 80076fc:	3001      	adds	r0, #1
 80076fe:	d0ad      	beq.n	800765c <_printf_i+0x15c>
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	079b      	lsls	r3, r3, #30
 8007704:	d413      	bmi.n	800772e <_printf_i+0x22e>
 8007706:	68e0      	ldr	r0, [r4, #12]
 8007708:	9b03      	ldr	r3, [sp, #12]
 800770a:	4298      	cmp	r0, r3
 800770c:	bfb8      	it	lt
 800770e:	4618      	movlt	r0, r3
 8007710:	e7a6      	b.n	8007660 <_printf_i+0x160>
 8007712:	2301      	movs	r3, #1
 8007714:	4632      	mov	r2, r6
 8007716:	4649      	mov	r1, r9
 8007718:	4640      	mov	r0, r8
 800771a:	47d0      	blx	sl
 800771c:	3001      	adds	r0, #1
 800771e:	d09d      	beq.n	800765c <_printf_i+0x15c>
 8007720:	3501      	adds	r5, #1
 8007722:	68e3      	ldr	r3, [r4, #12]
 8007724:	9903      	ldr	r1, [sp, #12]
 8007726:	1a5b      	subs	r3, r3, r1
 8007728:	42ab      	cmp	r3, r5
 800772a:	dcf2      	bgt.n	8007712 <_printf_i+0x212>
 800772c:	e7eb      	b.n	8007706 <_printf_i+0x206>
 800772e:	2500      	movs	r5, #0
 8007730:	f104 0619 	add.w	r6, r4, #25
 8007734:	e7f5      	b.n	8007722 <_printf_i+0x222>
 8007736:	bf00      	nop
 8007738:	08008589 	.word	0x08008589
 800773c:	0800859a 	.word	0x0800859a

08007740 <__sflush_r>:
 8007740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007748:	0716      	lsls	r6, r2, #28
 800774a:	4605      	mov	r5, r0
 800774c:	460c      	mov	r4, r1
 800774e:	d454      	bmi.n	80077fa <__sflush_r+0xba>
 8007750:	684b      	ldr	r3, [r1, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	dc02      	bgt.n	800775c <__sflush_r+0x1c>
 8007756:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	dd48      	ble.n	80077ee <__sflush_r+0xae>
 800775c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800775e:	2e00      	cmp	r6, #0
 8007760:	d045      	beq.n	80077ee <__sflush_r+0xae>
 8007762:	2300      	movs	r3, #0
 8007764:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007768:	682f      	ldr	r7, [r5, #0]
 800776a:	6a21      	ldr	r1, [r4, #32]
 800776c:	602b      	str	r3, [r5, #0]
 800776e:	d030      	beq.n	80077d2 <__sflush_r+0x92>
 8007770:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	0759      	lsls	r1, r3, #29
 8007776:	d505      	bpl.n	8007784 <__sflush_r+0x44>
 8007778:	6863      	ldr	r3, [r4, #4]
 800777a:	1ad2      	subs	r2, r2, r3
 800777c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800777e:	b10b      	cbz	r3, 8007784 <__sflush_r+0x44>
 8007780:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	2300      	movs	r3, #0
 8007786:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007788:	6a21      	ldr	r1, [r4, #32]
 800778a:	4628      	mov	r0, r5
 800778c:	47b0      	blx	r6
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	d106      	bne.n	80077a2 <__sflush_r+0x62>
 8007794:	6829      	ldr	r1, [r5, #0]
 8007796:	291d      	cmp	r1, #29
 8007798:	d82b      	bhi.n	80077f2 <__sflush_r+0xb2>
 800779a:	4a2a      	ldr	r2, [pc, #168]	@ (8007844 <__sflush_r+0x104>)
 800779c:	410a      	asrs	r2, r1
 800779e:	07d6      	lsls	r6, r2, #31
 80077a0:	d427      	bmi.n	80077f2 <__sflush_r+0xb2>
 80077a2:	2200      	movs	r2, #0
 80077a4:	6062      	str	r2, [r4, #4]
 80077a6:	04d9      	lsls	r1, r3, #19
 80077a8:	6922      	ldr	r2, [r4, #16]
 80077aa:	6022      	str	r2, [r4, #0]
 80077ac:	d504      	bpl.n	80077b8 <__sflush_r+0x78>
 80077ae:	1c42      	adds	r2, r0, #1
 80077b0:	d101      	bne.n	80077b6 <__sflush_r+0x76>
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	b903      	cbnz	r3, 80077b8 <__sflush_r+0x78>
 80077b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80077b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077ba:	602f      	str	r7, [r5, #0]
 80077bc:	b1b9      	cbz	r1, 80077ee <__sflush_r+0xae>
 80077be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077c2:	4299      	cmp	r1, r3
 80077c4:	d002      	beq.n	80077cc <__sflush_r+0x8c>
 80077c6:	4628      	mov	r0, r5
 80077c8:	f7fe fbd2 	bl	8005f70 <_free_r>
 80077cc:	2300      	movs	r3, #0
 80077ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80077d0:	e00d      	b.n	80077ee <__sflush_r+0xae>
 80077d2:	2301      	movs	r3, #1
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b0      	blx	r6
 80077d8:	4602      	mov	r2, r0
 80077da:	1c50      	adds	r0, r2, #1
 80077dc:	d1c9      	bne.n	8007772 <__sflush_r+0x32>
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0c6      	beq.n	8007772 <__sflush_r+0x32>
 80077e4:	2b1d      	cmp	r3, #29
 80077e6:	d001      	beq.n	80077ec <__sflush_r+0xac>
 80077e8:	2b16      	cmp	r3, #22
 80077ea:	d11e      	bne.n	800782a <__sflush_r+0xea>
 80077ec:	602f      	str	r7, [r5, #0]
 80077ee:	2000      	movs	r0, #0
 80077f0:	e022      	b.n	8007838 <__sflush_r+0xf8>
 80077f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077f6:	b21b      	sxth	r3, r3
 80077f8:	e01b      	b.n	8007832 <__sflush_r+0xf2>
 80077fa:	690f      	ldr	r7, [r1, #16]
 80077fc:	2f00      	cmp	r7, #0
 80077fe:	d0f6      	beq.n	80077ee <__sflush_r+0xae>
 8007800:	0793      	lsls	r3, r2, #30
 8007802:	680e      	ldr	r6, [r1, #0]
 8007804:	bf08      	it	eq
 8007806:	694b      	ldreq	r3, [r1, #20]
 8007808:	600f      	str	r7, [r1, #0]
 800780a:	bf18      	it	ne
 800780c:	2300      	movne	r3, #0
 800780e:	eba6 0807 	sub.w	r8, r6, r7
 8007812:	608b      	str	r3, [r1, #8]
 8007814:	f1b8 0f00 	cmp.w	r8, #0
 8007818:	dde9      	ble.n	80077ee <__sflush_r+0xae>
 800781a:	6a21      	ldr	r1, [r4, #32]
 800781c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800781e:	4643      	mov	r3, r8
 8007820:	463a      	mov	r2, r7
 8007822:	4628      	mov	r0, r5
 8007824:	47b0      	blx	r6
 8007826:	2800      	cmp	r0, #0
 8007828:	dc08      	bgt.n	800783c <__sflush_r+0xfc>
 800782a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007832:	81a3      	strh	r3, [r4, #12]
 8007834:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800783c:	4407      	add	r7, r0
 800783e:	eba8 0800 	sub.w	r8, r8, r0
 8007842:	e7e7      	b.n	8007814 <__sflush_r+0xd4>
 8007844:	dfbffffe 	.word	0xdfbffffe

08007848 <_fflush_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	690b      	ldr	r3, [r1, #16]
 800784c:	4605      	mov	r5, r0
 800784e:	460c      	mov	r4, r1
 8007850:	b913      	cbnz	r3, 8007858 <_fflush_r+0x10>
 8007852:	2500      	movs	r5, #0
 8007854:	4628      	mov	r0, r5
 8007856:	bd38      	pop	{r3, r4, r5, pc}
 8007858:	b118      	cbz	r0, 8007862 <_fflush_r+0x1a>
 800785a:	6a03      	ldr	r3, [r0, #32]
 800785c:	b90b      	cbnz	r3, 8007862 <_fflush_r+0x1a>
 800785e:	f7fe fa35 	bl	8005ccc <__sinit>
 8007862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0f3      	beq.n	8007852 <_fflush_r+0xa>
 800786a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800786c:	07d0      	lsls	r0, r2, #31
 800786e:	d404      	bmi.n	800787a <_fflush_r+0x32>
 8007870:	0599      	lsls	r1, r3, #22
 8007872:	d402      	bmi.n	800787a <_fflush_r+0x32>
 8007874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007876:	f7fe fb60 	bl	8005f3a <__retarget_lock_acquire_recursive>
 800787a:	4628      	mov	r0, r5
 800787c:	4621      	mov	r1, r4
 800787e:	f7ff ff5f 	bl	8007740 <__sflush_r>
 8007882:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007884:	07da      	lsls	r2, r3, #31
 8007886:	4605      	mov	r5, r0
 8007888:	d4e4      	bmi.n	8007854 <_fflush_r+0xc>
 800788a:	89a3      	ldrh	r3, [r4, #12]
 800788c:	059b      	lsls	r3, r3, #22
 800788e:	d4e1      	bmi.n	8007854 <_fflush_r+0xc>
 8007890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007892:	f7fe fb53 	bl	8005f3c <__retarget_lock_release_recursive>
 8007896:	e7dd      	b.n	8007854 <_fflush_r+0xc>

08007898 <memmove>:
 8007898:	4288      	cmp	r0, r1
 800789a:	b510      	push	{r4, lr}
 800789c:	eb01 0402 	add.w	r4, r1, r2
 80078a0:	d902      	bls.n	80078a8 <memmove+0x10>
 80078a2:	4284      	cmp	r4, r0
 80078a4:	4623      	mov	r3, r4
 80078a6:	d807      	bhi.n	80078b8 <memmove+0x20>
 80078a8:	1e43      	subs	r3, r0, #1
 80078aa:	42a1      	cmp	r1, r4
 80078ac:	d008      	beq.n	80078c0 <memmove+0x28>
 80078ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078b6:	e7f8      	b.n	80078aa <memmove+0x12>
 80078b8:	4402      	add	r2, r0
 80078ba:	4601      	mov	r1, r0
 80078bc:	428a      	cmp	r2, r1
 80078be:	d100      	bne.n	80078c2 <memmove+0x2a>
 80078c0:	bd10      	pop	{r4, pc}
 80078c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078ca:	e7f7      	b.n	80078bc <memmove+0x24>

080078cc <_sbrk_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4d06      	ldr	r5, [pc, #24]	@ (80078e8 <_sbrk_r+0x1c>)
 80078d0:	2300      	movs	r3, #0
 80078d2:	4604      	mov	r4, r0
 80078d4:	4608      	mov	r0, r1
 80078d6:	602b      	str	r3, [r5, #0]
 80078d8:	f7fa fdc4 	bl	8002464 <_sbrk>
 80078dc:	1c43      	adds	r3, r0, #1
 80078de:	d102      	bne.n	80078e6 <_sbrk_r+0x1a>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	b103      	cbz	r3, 80078e6 <_sbrk_r+0x1a>
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	200011c8 	.word	0x200011c8

080078ec <__assert_func>:
 80078ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ee:	4614      	mov	r4, r2
 80078f0:	461a      	mov	r2, r3
 80078f2:	4b09      	ldr	r3, [pc, #36]	@ (8007918 <__assert_func+0x2c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4605      	mov	r5, r0
 80078f8:	68d8      	ldr	r0, [r3, #12]
 80078fa:	b954      	cbnz	r4, 8007912 <__assert_func+0x26>
 80078fc:	4b07      	ldr	r3, [pc, #28]	@ (800791c <__assert_func+0x30>)
 80078fe:	461c      	mov	r4, r3
 8007900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007904:	9100      	str	r1, [sp, #0]
 8007906:	462b      	mov	r3, r5
 8007908:	4905      	ldr	r1, [pc, #20]	@ (8007920 <__assert_func+0x34>)
 800790a:	f000 f857 	bl	80079bc <fiprintf>
 800790e:	f000 f867 	bl	80079e0 <abort>
 8007912:	4b04      	ldr	r3, [pc, #16]	@ (8007924 <__assert_func+0x38>)
 8007914:	e7f4      	b.n	8007900 <__assert_func+0x14>
 8007916:	bf00      	nop
 8007918:	20000184 	.word	0x20000184
 800791c:	080085e6 	.word	0x080085e6
 8007920:	080085b8 	.word	0x080085b8
 8007924:	080085ab 	.word	0x080085ab

08007928 <_calloc_r>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	fba1 5402 	umull	r5, r4, r1, r2
 800792e:	b93c      	cbnz	r4, 8007940 <_calloc_r+0x18>
 8007930:	4629      	mov	r1, r5
 8007932:	f7fe fec3 	bl	80066bc <_malloc_r>
 8007936:	4606      	mov	r6, r0
 8007938:	b928      	cbnz	r0, 8007946 <_calloc_r+0x1e>
 800793a:	2600      	movs	r6, #0
 800793c:	4630      	mov	r0, r6
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	220c      	movs	r2, #12
 8007942:	6002      	str	r2, [r0, #0]
 8007944:	e7f9      	b.n	800793a <_calloc_r+0x12>
 8007946:	462a      	mov	r2, r5
 8007948:	4621      	mov	r1, r4
 800794a:	f7fe fa58 	bl	8005dfe <memset>
 800794e:	e7f5      	b.n	800793c <_calloc_r+0x14>

08007950 <malloc>:
 8007950:	4b02      	ldr	r3, [pc, #8]	@ (800795c <malloc+0xc>)
 8007952:	4601      	mov	r1, r0
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	f7fe beb1 	b.w	80066bc <_malloc_r>
 800795a:	bf00      	nop
 800795c:	20000184 	.word	0x20000184

08007960 <_realloc_r>:
 8007960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007964:	4680      	mov	r8, r0
 8007966:	4615      	mov	r5, r2
 8007968:	460c      	mov	r4, r1
 800796a:	b921      	cbnz	r1, 8007976 <_realloc_r+0x16>
 800796c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007970:	4611      	mov	r1, r2
 8007972:	f7fe bea3 	b.w	80066bc <_malloc_r>
 8007976:	b92a      	cbnz	r2, 8007984 <_realloc_r+0x24>
 8007978:	f7fe fafa 	bl	8005f70 <_free_r>
 800797c:	2400      	movs	r4, #0
 800797e:	4620      	mov	r0, r4
 8007980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007984:	f000 f833 	bl	80079ee <_malloc_usable_size_r>
 8007988:	4285      	cmp	r5, r0
 800798a:	4606      	mov	r6, r0
 800798c:	d802      	bhi.n	8007994 <_realloc_r+0x34>
 800798e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007992:	d8f4      	bhi.n	800797e <_realloc_r+0x1e>
 8007994:	4629      	mov	r1, r5
 8007996:	4640      	mov	r0, r8
 8007998:	f7fe fe90 	bl	80066bc <_malloc_r>
 800799c:	4607      	mov	r7, r0
 800799e:	2800      	cmp	r0, #0
 80079a0:	d0ec      	beq.n	800797c <_realloc_r+0x1c>
 80079a2:	42b5      	cmp	r5, r6
 80079a4:	462a      	mov	r2, r5
 80079a6:	4621      	mov	r1, r4
 80079a8:	bf28      	it	cs
 80079aa:	4632      	movcs	r2, r6
 80079ac:	f7fe fac7 	bl	8005f3e <memcpy>
 80079b0:	4621      	mov	r1, r4
 80079b2:	4640      	mov	r0, r8
 80079b4:	f7fe fadc 	bl	8005f70 <_free_r>
 80079b8:	463c      	mov	r4, r7
 80079ba:	e7e0      	b.n	800797e <_realloc_r+0x1e>

080079bc <fiprintf>:
 80079bc:	b40e      	push	{r1, r2, r3}
 80079be:	b503      	push	{r0, r1, lr}
 80079c0:	4601      	mov	r1, r0
 80079c2:	ab03      	add	r3, sp, #12
 80079c4:	4805      	ldr	r0, [pc, #20]	@ (80079dc <fiprintf+0x20>)
 80079c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ca:	6800      	ldr	r0, [r0, #0]
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	f000 f83f 	bl	8007a50 <_vfiprintf_r>
 80079d2:	b002      	add	sp, #8
 80079d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079d8:	b003      	add	sp, #12
 80079da:	4770      	bx	lr
 80079dc:	20000184 	.word	0x20000184

080079e0 <abort>:
 80079e0:	b508      	push	{r3, lr}
 80079e2:	2006      	movs	r0, #6
 80079e4:	f000 fa08 	bl	8007df8 <raise>
 80079e8:	2001      	movs	r0, #1
 80079ea:	f7fa fcc3 	bl	8002374 <_exit>

080079ee <_malloc_usable_size_r>:
 80079ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079f2:	1f18      	subs	r0, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bfbc      	itt	lt
 80079f8:	580b      	ldrlt	r3, [r1, r0]
 80079fa:	18c0      	addlt	r0, r0, r3
 80079fc:	4770      	bx	lr

080079fe <__sfputc_r>:
 80079fe:	6893      	ldr	r3, [r2, #8]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	b410      	push	{r4}
 8007a06:	6093      	str	r3, [r2, #8]
 8007a08:	da08      	bge.n	8007a1c <__sfputc_r+0x1e>
 8007a0a:	6994      	ldr	r4, [r2, #24]
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	db01      	blt.n	8007a14 <__sfputc_r+0x16>
 8007a10:	290a      	cmp	r1, #10
 8007a12:	d103      	bne.n	8007a1c <__sfputc_r+0x1e>
 8007a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a18:	f000 b932 	b.w	8007c80 <__swbuf_r>
 8007a1c:	6813      	ldr	r3, [r2, #0]
 8007a1e:	1c58      	adds	r0, r3, #1
 8007a20:	6010      	str	r0, [r2, #0]
 8007a22:	7019      	strb	r1, [r3, #0]
 8007a24:	4608      	mov	r0, r1
 8007a26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <__sfputs_r>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	4606      	mov	r6, r0
 8007a30:	460f      	mov	r7, r1
 8007a32:	4614      	mov	r4, r2
 8007a34:	18d5      	adds	r5, r2, r3
 8007a36:	42ac      	cmp	r4, r5
 8007a38:	d101      	bne.n	8007a3e <__sfputs_r+0x12>
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	e007      	b.n	8007a4e <__sfputs_r+0x22>
 8007a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a42:	463a      	mov	r2, r7
 8007a44:	4630      	mov	r0, r6
 8007a46:	f7ff ffda 	bl	80079fe <__sfputc_r>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	d1f3      	bne.n	8007a36 <__sfputs_r+0xa>
 8007a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a50 <_vfiprintf_r>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	460d      	mov	r5, r1
 8007a56:	b09d      	sub	sp, #116	@ 0x74
 8007a58:	4614      	mov	r4, r2
 8007a5a:	4698      	mov	r8, r3
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	b118      	cbz	r0, 8007a68 <_vfiprintf_r+0x18>
 8007a60:	6a03      	ldr	r3, [r0, #32]
 8007a62:	b90b      	cbnz	r3, 8007a68 <_vfiprintf_r+0x18>
 8007a64:	f7fe f932 	bl	8005ccc <__sinit>
 8007a68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a6a:	07d9      	lsls	r1, r3, #31
 8007a6c:	d405      	bmi.n	8007a7a <_vfiprintf_r+0x2a>
 8007a6e:	89ab      	ldrh	r3, [r5, #12]
 8007a70:	059a      	lsls	r2, r3, #22
 8007a72:	d402      	bmi.n	8007a7a <_vfiprintf_r+0x2a>
 8007a74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a76:	f7fe fa60 	bl	8005f3a <__retarget_lock_acquire_recursive>
 8007a7a:	89ab      	ldrh	r3, [r5, #12]
 8007a7c:	071b      	lsls	r3, r3, #28
 8007a7e:	d501      	bpl.n	8007a84 <_vfiprintf_r+0x34>
 8007a80:	692b      	ldr	r3, [r5, #16]
 8007a82:	b99b      	cbnz	r3, 8007aac <_vfiprintf_r+0x5c>
 8007a84:	4629      	mov	r1, r5
 8007a86:	4630      	mov	r0, r6
 8007a88:	f000 f938 	bl	8007cfc <__swsetup_r>
 8007a8c:	b170      	cbz	r0, 8007aac <_vfiprintf_r+0x5c>
 8007a8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a90:	07dc      	lsls	r4, r3, #31
 8007a92:	d504      	bpl.n	8007a9e <_vfiprintf_r+0x4e>
 8007a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a98:	b01d      	add	sp, #116	@ 0x74
 8007a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9e:	89ab      	ldrh	r3, [r5, #12]
 8007aa0:	0598      	lsls	r0, r3, #22
 8007aa2:	d4f7      	bmi.n	8007a94 <_vfiprintf_r+0x44>
 8007aa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007aa6:	f7fe fa49 	bl	8005f3c <__retarget_lock_release_recursive>
 8007aaa:	e7f3      	b.n	8007a94 <_vfiprintf_r+0x44>
 8007aac:	2300      	movs	r3, #0
 8007aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ab0:	2320      	movs	r3, #32
 8007ab2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aba:	2330      	movs	r3, #48	@ 0x30
 8007abc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c6c <_vfiprintf_r+0x21c>
 8007ac0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ac4:	f04f 0901 	mov.w	r9, #1
 8007ac8:	4623      	mov	r3, r4
 8007aca:	469a      	mov	sl, r3
 8007acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ad0:	b10a      	cbz	r2, 8007ad6 <_vfiprintf_r+0x86>
 8007ad2:	2a25      	cmp	r2, #37	@ 0x25
 8007ad4:	d1f9      	bne.n	8007aca <_vfiprintf_r+0x7a>
 8007ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8007ada:	d00b      	beq.n	8007af4 <_vfiprintf_r+0xa4>
 8007adc:	465b      	mov	r3, fp
 8007ade:	4622      	mov	r2, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f7ff ffa2 	bl	8007a2c <__sfputs_r>
 8007ae8:	3001      	adds	r0, #1
 8007aea:	f000 80a7 	beq.w	8007c3c <_vfiprintf_r+0x1ec>
 8007aee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007af0:	445a      	add	r2, fp
 8007af2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007af4:	f89a 3000 	ldrb.w	r3, [sl]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 809f 	beq.w	8007c3c <_vfiprintf_r+0x1ec>
 8007afe:	2300      	movs	r3, #0
 8007b00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b08:	f10a 0a01 	add.w	sl, sl, #1
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	9307      	str	r3, [sp, #28]
 8007b10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b14:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b16:	4654      	mov	r4, sl
 8007b18:	2205      	movs	r2, #5
 8007b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b1e:	4853      	ldr	r0, [pc, #332]	@ (8007c6c <_vfiprintf_r+0x21c>)
 8007b20:	f7f8 fb6e 	bl	8000200 <memchr>
 8007b24:	9a04      	ldr	r2, [sp, #16]
 8007b26:	b9d8      	cbnz	r0, 8007b60 <_vfiprintf_r+0x110>
 8007b28:	06d1      	lsls	r1, r2, #27
 8007b2a:	bf44      	itt	mi
 8007b2c:	2320      	movmi	r3, #32
 8007b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b32:	0713      	lsls	r3, r2, #28
 8007b34:	bf44      	itt	mi
 8007b36:	232b      	movmi	r3, #43	@ 0x2b
 8007b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b42:	d015      	beq.n	8007b70 <_vfiprintf_r+0x120>
 8007b44:	9a07      	ldr	r2, [sp, #28]
 8007b46:	4654      	mov	r4, sl
 8007b48:	2000      	movs	r0, #0
 8007b4a:	f04f 0c0a 	mov.w	ip, #10
 8007b4e:	4621      	mov	r1, r4
 8007b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b54:	3b30      	subs	r3, #48	@ 0x30
 8007b56:	2b09      	cmp	r3, #9
 8007b58:	d94b      	bls.n	8007bf2 <_vfiprintf_r+0x1a2>
 8007b5a:	b1b0      	cbz	r0, 8007b8a <_vfiprintf_r+0x13a>
 8007b5c:	9207      	str	r2, [sp, #28]
 8007b5e:	e014      	b.n	8007b8a <_vfiprintf_r+0x13a>
 8007b60:	eba0 0308 	sub.w	r3, r0, r8
 8007b64:	fa09 f303 	lsl.w	r3, r9, r3
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	9304      	str	r3, [sp, #16]
 8007b6c:	46a2      	mov	sl, r4
 8007b6e:	e7d2      	b.n	8007b16 <_vfiprintf_r+0xc6>
 8007b70:	9b03      	ldr	r3, [sp, #12]
 8007b72:	1d19      	adds	r1, r3, #4
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	9103      	str	r1, [sp, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bfbb      	ittet	lt
 8007b7c:	425b      	neglt	r3, r3
 8007b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b82:	9307      	strge	r3, [sp, #28]
 8007b84:	9307      	strlt	r3, [sp, #28]
 8007b86:	bfb8      	it	lt
 8007b88:	9204      	strlt	r2, [sp, #16]
 8007b8a:	7823      	ldrb	r3, [r4, #0]
 8007b8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b8e:	d10a      	bne.n	8007ba6 <_vfiprintf_r+0x156>
 8007b90:	7863      	ldrb	r3, [r4, #1]
 8007b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b94:	d132      	bne.n	8007bfc <_vfiprintf_r+0x1ac>
 8007b96:	9b03      	ldr	r3, [sp, #12]
 8007b98:	1d1a      	adds	r2, r3, #4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	9203      	str	r2, [sp, #12]
 8007b9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ba2:	3402      	adds	r4, #2
 8007ba4:	9305      	str	r3, [sp, #20]
 8007ba6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c7c <_vfiprintf_r+0x22c>
 8007baa:	7821      	ldrb	r1, [r4, #0]
 8007bac:	2203      	movs	r2, #3
 8007bae:	4650      	mov	r0, sl
 8007bb0:	f7f8 fb26 	bl	8000200 <memchr>
 8007bb4:	b138      	cbz	r0, 8007bc6 <_vfiprintf_r+0x176>
 8007bb6:	9b04      	ldr	r3, [sp, #16]
 8007bb8:	eba0 000a 	sub.w	r0, r0, sl
 8007bbc:	2240      	movs	r2, #64	@ 0x40
 8007bbe:	4082      	lsls	r2, r0
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	3401      	adds	r4, #1
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bca:	4829      	ldr	r0, [pc, #164]	@ (8007c70 <_vfiprintf_r+0x220>)
 8007bcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bd0:	2206      	movs	r2, #6
 8007bd2:	f7f8 fb15 	bl	8000200 <memchr>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d03f      	beq.n	8007c5a <_vfiprintf_r+0x20a>
 8007bda:	4b26      	ldr	r3, [pc, #152]	@ (8007c74 <_vfiprintf_r+0x224>)
 8007bdc:	bb1b      	cbnz	r3, 8007c26 <_vfiprintf_r+0x1d6>
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	3307      	adds	r3, #7
 8007be2:	f023 0307 	bic.w	r3, r3, #7
 8007be6:	3308      	adds	r3, #8
 8007be8:	9303      	str	r3, [sp, #12]
 8007bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bec:	443b      	add	r3, r7
 8007bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bf0:	e76a      	b.n	8007ac8 <_vfiprintf_r+0x78>
 8007bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	e7a8      	b.n	8007b4e <_vfiprintf_r+0xfe>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	3401      	adds	r4, #1
 8007c00:	9305      	str	r3, [sp, #20]
 8007c02:	4619      	mov	r1, r3
 8007c04:	f04f 0c0a 	mov.w	ip, #10
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c0e:	3a30      	subs	r2, #48	@ 0x30
 8007c10:	2a09      	cmp	r2, #9
 8007c12:	d903      	bls.n	8007c1c <_vfiprintf_r+0x1cc>
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0c6      	beq.n	8007ba6 <_vfiprintf_r+0x156>
 8007c18:	9105      	str	r1, [sp, #20]
 8007c1a:	e7c4      	b.n	8007ba6 <_vfiprintf_r+0x156>
 8007c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c20:	4604      	mov	r4, r0
 8007c22:	2301      	movs	r3, #1
 8007c24:	e7f0      	b.n	8007c08 <_vfiprintf_r+0x1b8>
 8007c26:	ab03      	add	r3, sp, #12
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	462a      	mov	r2, r5
 8007c2c:	4b12      	ldr	r3, [pc, #72]	@ (8007c78 <_vfiprintf_r+0x228>)
 8007c2e:	a904      	add	r1, sp, #16
 8007c30:	4630      	mov	r0, r6
 8007c32:	f3af 8000 	nop.w
 8007c36:	4607      	mov	r7, r0
 8007c38:	1c78      	adds	r0, r7, #1
 8007c3a:	d1d6      	bne.n	8007bea <_vfiprintf_r+0x19a>
 8007c3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c3e:	07d9      	lsls	r1, r3, #31
 8007c40:	d405      	bmi.n	8007c4e <_vfiprintf_r+0x1fe>
 8007c42:	89ab      	ldrh	r3, [r5, #12]
 8007c44:	059a      	lsls	r2, r3, #22
 8007c46:	d402      	bmi.n	8007c4e <_vfiprintf_r+0x1fe>
 8007c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c4a:	f7fe f977 	bl	8005f3c <__retarget_lock_release_recursive>
 8007c4e:	89ab      	ldrh	r3, [r5, #12]
 8007c50:	065b      	lsls	r3, r3, #25
 8007c52:	f53f af1f 	bmi.w	8007a94 <_vfiprintf_r+0x44>
 8007c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c58:	e71e      	b.n	8007a98 <_vfiprintf_r+0x48>
 8007c5a:	ab03      	add	r3, sp, #12
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	462a      	mov	r2, r5
 8007c60:	4b05      	ldr	r3, [pc, #20]	@ (8007c78 <_vfiprintf_r+0x228>)
 8007c62:	a904      	add	r1, sp, #16
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7ff fc4b 	bl	8007500 <_printf_i>
 8007c6a:	e7e4      	b.n	8007c36 <_vfiprintf_r+0x1e6>
 8007c6c:	08008578 	.word	0x08008578
 8007c70:	08008582 	.word	0x08008582
 8007c74:	00000000 	.word	0x00000000
 8007c78:	08007a2d 	.word	0x08007a2d
 8007c7c:	0800857e 	.word	0x0800857e

08007c80 <__swbuf_r>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	460e      	mov	r6, r1
 8007c84:	4614      	mov	r4, r2
 8007c86:	4605      	mov	r5, r0
 8007c88:	b118      	cbz	r0, 8007c92 <__swbuf_r+0x12>
 8007c8a:	6a03      	ldr	r3, [r0, #32]
 8007c8c:	b90b      	cbnz	r3, 8007c92 <__swbuf_r+0x12>
 8007c8e:	f7fe f81d 	bl	8005ccc <__sinit>
 8007c92:	69a3      	ldr	r3, [r4, #24]
 8007c94:	60a3      	str	r3, [r4, #8]
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	071a      	lsls	r2, r3, #28
 8007c9a:	d501      	bpl.n	8007ca0 <__swbuf_r+0x20>
 8007c9c:	6923      	ldr	r3, [r4, #16]
 8007c9e:	b943      	cbnz	r3, 8007cb2 <__swbuf_r+0x32>
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f000 f82a 	bl	8007cfc <__swsetup_r>
 8007ca8:	b118      	cbz	r0, 8007cb2 <__swbuf_r+0x32>
 8007caa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007cae:	4638      	mov	r0, r7
 8007cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	6922      	ldr	r2, [r4, #16]
 8007cb6:	1a98      	subs	r0, r3, r2
 8007cb8:	6963      	ldr	r3, [r4, #20]
 8007cba:	b2f6      	uxtb	r6, r6
 8007cbc:	4283      	cmp	r3, r0
 8007cbe:	4637      	mov	r7, r6
 8007cc0:	dc05      	bgt.n	8007cce <__swbuf_r+0x4e>
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f7ff fdbf 	bl	8007848 <_fflush_r>
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d1ed      	bne.n	8007caa <__swbuf_r+0x2a>
 8007cce:	68a3      	ldr	r3, [r4, #8]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	60a3      	str	r3, [r4, #8]
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	6022      	str	r2, [r4, #0]
 8007cda:	701e      	strb	r6, [r3, #0]
 8007cdc:	6962      	ldr	r2, [r4, #20]
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d004      	beq.n	8007cee <__swbuf_r+0x6e>
 8007ce4:	89a3      	ldrh	r3, [r4, #12]
 8007ce6:	07db      	lsls	r3, r3, #31
 8007ce8:	d5e1      	bpl.n	8007cae <__swbuf_r+0x2e>
 8007cea:	2e0a      	cmp	r6, #10
 8007cec:	d1df      	bne.n	8007cae <__swbuf_r+0x2e>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f7ff fda9 	bl	8007848 <_fflush_r>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d0d9      	beq.n	8007cae <__swbuf_r+0x2e>
 8007cfa:	e7d6      	b.n	8007caa <__swbuf_r+0x2a>

08007cfc <__swsetup_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	4b29      	ldr	r3, [pc, #164]	@ (8007da4 <__swsetup_r+0xa8>)
 8007d00:	4605      	mov	r5, r0
 8007d02:	6818      	ldr	r0, [r3, #0]
 8007d04:	460c      	mov	r4, r1
 8007d06:	b118      	cbz	r0, 8007d10 <__swsetup_r+0x14>
 8007d08:	6a03      	ldr	r3, [r0, #32]
 8007d0a:	b90b      	cbnz	r3, 8007d10 <__swsetup_r+0x14>
 8007d0c:	f7fd ffde 	bl	8005ccc <__sinit>
 8007d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d14:	0719      	lsls	r1, r3, #28
 8007d16:	d422      	bmi.n	8007d5e <__swsetup_r+0x62>
 8007d18:	06da      	lsls	r2, r3, #27
 8007d1a:	d407      	bmi.n	8007d2c <__swsetup_r+0x30>
 8007d1c:	2209      	movs	r2, #9
 8007d1e:	602a      	str	r2, [r5, #0]
 8007d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d2a:	e033      	b.n	8007d94 <__swsetup_r+0x98>
 8007d2c:	0758      	lsls	r0, r3, #29
 8007d2e:	d512      	bpl.n	8007d56 <__swsetup_r+0x5a>
 8007d30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d32:	b141      	cbz	r1, 8007d46 <__swsetup_r+0x4a>
 8007d34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d38:	4299      	cmp	r1, r3
 8007d3a:	d002      	beq.n	8007d42 <__swsetup_r+0x46>
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f7fe f917 	bl	8005f70 <_free_r>
 8007d42:	2300      	movs	r3, #0
 8007d44:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d46:	89a3      	ldrh	r3, [r4, #12]
 8007d48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d4c:	81a3      	strh	r3, [r4, #12]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	6063      	str	r3, [r4, #4]
 8007d52:	6923      	ldr	r3, [r4, #16]
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	f043 0308 	orr.w	r3, r3, #8
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	6923      	ldr	r3, [r4, #16]
 8007d60:	b94b      	cbnz	r3, 8007d76 <__swsetup_r+0x7a>
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d6c:	d003      	beq.n	8007d76 <__swsetup_r+0x7a>
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 f883 	bl	8007e7c <__smakebuf_r>
 8007d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d7a:	f013 0201 	ands.w	r2, r3, #1
 8007d7e:	d00a      	beq.n	8007d96 <__swsetup_r+0x9a>
 8007d80:	2200      	movs	r2, #0
 8007d82:	60a2      	str	r2, [r4, #8]
 8007d84:	6962      	ldr	r2, [r4, #20]
 8007d86:	4252      	negs	r2, r2
 8007d88:	61a2      	str	r2, [r4, #24]
 8007d8a:	6922      	ldr	r2, [r4, #16]
 8007d8c:	b942      	cbnz	r2, 8007da0 <__swsetup_r+0xa4>
 8007d8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d92:	d1c5      	bne.n	8007d20 <__swsetup_r+0x24>
 8007d94:	bd38      	pop	{r3, r4, r5, pc}
 8007d96:	0799      	lsls	r1, r3, #30
 8007d98:	bf58      	it	pl
 8007d9a:	6962      	ldrpl	r2, [r4, #20]
 8007d9c:	60a2      	str	r2, [r4, #8]
 8007d9e:	e7f4      	b.n	8007d8a <__swsetup_r+0x8e>
 8007da0:	2000      	movs	r0, #0
 8007da2:	e7f7      	b.n	8007d94 <__swsetup_r+0x98>
 8007da4:	20000184 	.word	0x20000184

08007da8 <_raise_r>:
 8007da8:	291f      	cmp	r1, #31
 8007daa:	b538      	push	{r3, r4, r5, lr}
 8007dac:	4605      	mov	r5, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	d904      	bls.n	8007dbc <_raise_r+0x14>
 8007db2:	2316      	movs	r3, #22
 8007db4:	6003      	str	r3, [r0, #0]
 8007db6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007dbe:	b112      	cbz	r2, 8007dc6 <_raise_r+0x1e>
 8007dc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dc4:	b94b      	cbnz	r3, 8007dda <_raise_r+0x32>
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 f830 	bl	8007e2c <_getpid_r>
 8007dcc:	4622      	mov	r2, r4
 8007dce:	4601      	mov	r1, r0
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dd6:	f000 b817 	b.w	8007e08 <_kill_r>
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d00a      	beq.n	8007df4 <_raise_r+0x4c>
 8007dde:	1c59      	adds	r1, r3, #1
 8007de0:	d103      	bne.n	8007dea <_raise_r+0x42>
 8007de2:	2316      	movs	r3, #22
 8007de4:	6003      	str	r3, [r0, #0]
 8007de6:	2001      	movs	r0, #1
 8007de8:	e7e7      	b.n	8007dba <_raise_r+0x12>
 8007dea:	2100      	movs	r1, #0
 8007dec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007df0:	4620      	mov	r0, r4
 8007df2:	4798      	blx	r3
 8007df4:	2000      	movs	r0, #0
 8007df6:	e7e0      	b.n	8007dba <_raise_r+0x12>

08007df8 <raise>:
 8007df8:	4b02      	ldr	r3, [pc, #8]	@ (8007e04 <raise+0xc>)
 8007dfa:	4601      	mov	r1, r0
 8007dfc:	6818      	ldr	r0, [r3, #0]
 8007dfe:	f7ff bfd3 	b.w	8007da8 <_raise_r>
 8007e02:	bf00      	nop
 8007e04:	20000184 	.word	0x20000184

08007e08 <_kill_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4d07      	ldr	r5, [pc, #28]	@ (8007e28 <_kill_r+0x20>)
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	4611      	mov	r1, r2
 8007e14:	602b      	str	r3, [r5, #0]
 8007e16:	f7fa fa9d 	bl	8002354 <_kill>
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	d102      	bne.n	8007e24 <_kill_r+0x1c>
 8007e1e:	682b      	ldr	r3, [r5, #0]
 8007e20:	b103      	cbz	r3, 8007e24 <_kill_r+0x1c>
 8007e22:	6023      	str	r3, [r4, #0]
 8007e24:	bd38      	pop	{r3, r4, r5, pc}
 8007e26:	bf00      	nop
 8007e28:	200011c8 	.word	0x200011c8

08007e2c <_getpid_r>:
 8007e2c:	f7fa ba8a 	b.w	8002344 <_getpid>

08007e30 <__swhatbuf_r>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	460c      	mov	r4, r1
 8007e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e38:	2900      	cmp	r1, #0
 8007e3a:	b096      	sub	sp, #88	@ 0x58
 8007e3c:	4615      	mov	r5, r2
 8007e3e:	461e      	mov	r6, r3
 8007e40:	da0d      	bge.n	8007e5e <__swhatbuf_r+0x2e>
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e48:	f04f 0100 	mov.w	r1, #0
 8007e4c:	bf14      	ite	ne
 8007e4e:	2340      	movne	r3, #64	@ 0x40
 8007e50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e54:	2000      	movs	r0, #0
 8007e56:	6031      	str	r1, [r6, #0]
 8007e58:	602b      	str	r3, [r5, #0]
 8007e5a:	b016      	add	sp, #88	@ 0x58
 8007e5c:	bd70      	pop	{r4, r5, r6, pc}
 8007e5e:	466a      	mov	r2, sp
 8007e60:	f000 f848 	bl	8007ef4 <_fstat_r>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	dbec      	blt.n	8007e42 <__swhatbuf_r+0x12>
 8007e68:	9901      	ldr	r1, [sp, #4]
 8007e6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e72:	4259      	negs	r1, r3
 8007e74:	4159      	adcs	r1, r3
 8007e76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e7a:	e7eb      	b.n	8007e54 <__swhatbuf_r+0x24>

08007e7c <__smakebuf_r>:
 8007e7c:	898b      	ldrh	r3, [r1, #12]
 8007e7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e80:	079d      	lsls	r5, r3, #30
 8007e82:	4606      	mov	r6, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	d507      	bpl.n	8007e98 <__smakebuf_r+0x1c>
 8007e88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	6123      	str	r3, [r4, #16]
 8007e90:	2301      	movs	r3, #1
 8007e92:	6163      	str	r3, [r4, #20]
 8007e94:	b003      	add	sp, #12
 8007e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e98:	ab01      	add	r3, sp, #4
 8007e9a:	466a      	mov	r2, sp
 8007e9c:	f7ff ffc8 	bl	8007e30 <__swhatbuf_r>
 8007ea0:	9f00      	ldr	r7, [sp, #0]
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f7fe fc08 	bl	80066bc <_malloc_r>
 8007eac:	b948      	cbnz	r0, 8007ec2 <__smakebuf_r+0x46>
 8007eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb2:	059a      	lsls	r2, r3, #22
 8007eb4:	d4ee      	bmi.n	8007e94 <__smakebuf_r+0x18>
 8007eb6:	f023 0303 	bic.w	r3, r3, #3
 8007eba:	f043 0302 	orr.w	r3, r3, #2
 8007ebe:	81a3      	strh	r3, [r4, #12]
 8007ec0:	e7e2      	b.n	8007e88 <__smakebuf_r+0xc>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	6020      	str	r0, [r4, #0]
 8007ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eca:	81a3      	strh	r3, [r4, #12]
 8007ecc:	9b01      	ldr	r3, [sp, #4]
 8007ece:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ed2:	b15b      	cbz	r3, 8007eec <__smakebuf_r+0x70>
 8007ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f000 f81d 	bl	8007f18 <_isatty_r>
 8007ede:	b128      	cbz	r0, 8007eec <__smakebuf_r+0x70>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	f023 0303 	bic.w	r3, r3, #3
 8007ee6:	f043 0301 	orr.w	r3, r3, #1
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	431d      	orrs	r5, r3
 8007ef0:	81a5      	strh	r5, [r4, #12]
 8007ef2:	e7cf      	b.n	8007e94 <__smakebuf_r+0x18>

08007ef4 <_fstat_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4d07      	ldr	r5, [pc, #28]	@ (8007f14 <_fstat_r+0x20>)
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4604      	mov	r4, r0
 8007efc:	4608      	mov	r0, r1
 8007efe:	4611      	mov	r1, r2
 8007f00:	602b      	str	r3, [r5, #0]
 8007f02:	f7fa fa87 	bl	8002414 <_fstat>
 8007f06:	1c43      	adds	r3, r0, #1
 8007f08:	d102      	bne.n	8007f10 <_fstat_r+0x1c>
 8007f0a:	682b      	ldr	r3, [r5, #0]
 8007f0c:	b103      	cbz	r3, 8007f10 <_fstat_r+0x1c>
 8007f0e:	6023      	str	r3, [r4, #0]
 8007f10:	bd38      	pop	{r3, r4, r5, pc}
 8007f12:	bf00      	nop
 8007f14:	200011c8 	.word	0x200011c8

08007f18 <_isatty_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4d06      	ldr	r5, [pc, #24]	@ (8007f34 <_isatty_r+0x1c>)
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	4604      	mov	r4, r0
 8007f20:	4608      	mov	r0, r1
 8007f22:	602b      	str	r3, [r5, #0]
 8007f24:	f7fa fa86 	bl	8002434 <_isatty>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d102      	bne.n	8007f32 <_isatty_r+0x1a>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b103      	cbz	r3, 8007f32 <_isatty_r+0x1a>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	200011c8 	.word	0x200011c8

08007f38 <_init>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	bf00      	nop
 8007f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3e:	bc08      	pop	{r3}
 8007f40:	469e      	mov	lr, r3
 8007f42:	4770      	bx	lr

08007f44 <_fini>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr
