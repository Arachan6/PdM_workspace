
TP Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019d4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001b80  08001b80  00002b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bc4  08001bc4  00003028  2**0
                  CONTENTS
  4 .ARM          00000000  08001bc4  08001bc4  00003028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bc4  08001bc4  00003028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bc4  08001bc4  00002bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001bc8  08001bc8  00002bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08001bcc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003028  2**0
                  CONTENTS
 10 .bss          0000007c  20000028  20000028  00003028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000a4  200000a4  00003028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY
 13 .debug_info   000072fd  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001599  00000000  00000000  0000a355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0000b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000642  00000000  00000000  0000c120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f44  00000000  00000000  0000c762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aac6  00000000  00000000  000316a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1c67  00000000  00000000  0003c16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ddd3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fec  00000000  00000000  0011de18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0011fe04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001b68 	.word	0x08001b68

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08001b68 	.word	0x08001b68

080001ec <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a07      	ldr	r2, [pc, #28]	@ (8000218 <BSP_LED_On+0x2c>)
 80001fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	4a06      	ldr	r2, [pc, #24]	@ (800021c <BSP_LED_On+0x30>)
 8000202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000206:	2201      	movs	r2, #1
 8000208:	4619      	mov	r1, r3
 800020a:	f000 fb93 	bl	8000934 <HAL_GPIO_WritePin>
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000000 	.word	0x20000000
 800021c:	08001bb4 	.word	0x08001bb4

08000220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000224:	4b16      	ldr	r3, [pc, #88]	@ (8000280 <SystemInit+0x60>)
 8000226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800022a:	4a15      	ldr	r2, [pc, #84]	@ (8000280 <SystemInit+0x60>)
 800022c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000234:	4b13      	ldr	r3, [pc, #76]	@ (8000284 <SystemInit+0x64>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a12      	ldr	r2, [pc, #72]	@ (8000284 <SystemInit+0x64>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000240:	4b10      	ldr	r3, [pc, #64]	@ (8000284 <SystemInit+0x64>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000246:	4b0f      	ldr	r3, [pc, #60]	@ (8000284 <SystemInit+0x64>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a0e      	ldr	r2, [pc, #56]	@ (8000284 <SystemInit+0x64>)
 800024c:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000254:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000256:	4b0b      	ldr	r3, [pc, #44]	@ (8000284 <SystemInit+0x64>)
 8000258:	4a0b      	ldr	r2, [pc, #44]	@ (8000288 <SystemInit+0x68>)
 800025a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800025c:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <SystemInit+0x64>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a08      	ldr	r2, [pc, #32]	@ (8000284 <SystemInit+0x64>)
 8000262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000266:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000268:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <SystemInit+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800026e:	4b04      	ldr	r3, [pc, #16]	@ (8000280 <SystemInit+0x60>)
 8000270:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000274:	609a      	str	r2, [r3, #8]
#endif
}
 8000276:	bf00      	nop
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	e000ed00 	.word	0xe000ed00
 8000284:	40023800 	.word	0x40023800
 8000288:	24003010 	.word	0x24003010

0800028c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr

0800029a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800029e:	bf00      	nop
 80002a0:	e7fd      	b.n	800029e <HardFault_Handler+0x4>

080002a2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80002a2:	b480      	push	{r7}
 80002a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80002a6:	bf00      	nop
 80002a8:	e7fd      	b.n	80002a6 <MemManage_Handler+0x4>

080002aa <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80002ae:	bf00      	nop
 80002b0:	e7fd      	b.n	80002ae <BusFault_Handler+0x4>

080002b2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80002b6:	bf00      	nop
 80002b8:	e7fd      	b.n	80002b6 <UsageFault_Handler+0x4>

080002ba <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002ba:	b480      	push	{r7}
 80002bc:	af00      	add	r7, sp, #0
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr

080002d6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80002e8:	f000 f84e 	bl	8000388 <HAL_IncTick>
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80002f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <HAL_Init+0x34>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <HAL_Init+0x34>)
 80002fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002fe:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000300:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <HAL_Init+0x34>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a07      	ldr	r2, [pc, #28]	@ (8000324 <HAL_Init+0x34>)
 8000306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800030a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800030c:	2003      	movs	r0, #3
 800030e:	f000 f931 	bl	8000574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000312:	200f      	movs	r0, #15
 8000314:	f000 f808 	bl	8000328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000318:	f001 f8a9 	bl	800146e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800031c:	2300      	movs	r3, #0
}
 800031e:	4618      	mov	r0, r3
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40023c00 	.word	0x40023c00

08000328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000330:	4b12      	ldr	r3, [pc, #72]	@ (800037c <HAL_InitTick+0x54>)
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	4b12      	ldr	r3, [pc, #72]	@ (8000380 <HAL_InitTick+0x58>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	4619      	mov	r1, r3
 800033a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800033e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000342:	fbb2 f3f3 	udiv	r3, r2, r3
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f93b 	bl	80005c2 <HAL_SYSTICK_Config>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000352:	2301      	movs	r3, #1
 8000354:	e00e      	b.n	8000374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2b0f      	cmp	r3, #15
 800035a:	d80a      	bhi.n	8000372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800035c:	2200      	movs	r2, #0
 800035e:	6879      	ldr	r1, [r7, #4]
 8000360:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000364:	f000 f911 	bl	800058a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000368:	4a06      	ldr	r2, [pc, #24]	@ (8000384 <HAL_InitTick+0x5c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800036e:	2300      	movs	r3, #0
 8000370:	e000      	b.n	8000374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000372:	2301      	movs	r3, #1
}
 8000374:	4618      	mov	r0, r3
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	2000000c 	.word	0x2000000c
 8000380:	20000014 	.word	0x20000014
 8000384:	20000010 	.word	0x20000010

08000388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800038c:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <HAL_IncTick+0x20>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	461a      	mov	r2, r3
 8000392:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <HAL_IncTick+0x24>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4413      	add	r3, r2
 8000398:	4a04      	ldr	r2, [pc, #16]	@ (80003ac <HAL_IncTick+0x24>)
 800039a:	6013      	str	r3, [r2, #0]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20000014 	.word	0x20000014
 80003ac:	20000044 	.word	0x20000044

080003b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  return uwTick;
 80003b4:	4b03      	ldr	r3, [pc, #12]	@ (80003c4 <HAL_GetTick+0x14>)
 80003b6:	681b      	ldr	r3, [r3, #0]
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	20000044 	.word	0x20000044

080003c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80003d0:	f7ff ffee 	bl	80003b0 <HAL_GetTick>
 80003d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80003e0:	d005      	beq.n	80003ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80003e2:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <HAL_Delay+0x44>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	461a      	mov	r2, r3
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4413      	add	r3, r2
 80003ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80003ee:	bf00      	nop
 80003f0:	f7ff ffde 	bl	80003b0 <HAL_GetTick>
 80003f4:	4602      	mov	r2, r0
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	68fa      	ldr	r2, [r7, #12]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d8f7      	bhi.n	80003f0 <HAL_Delay+0x28>
  {
  }
}
 8000400:	bf00      	nop
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000014 	.word	0x20000014

08000410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f003 0307 	and.w	r3, r3, #7
 800041e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000420:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <__NVIC_SetPriorityGrouping+0x44>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000426:	68ba      	ldr	r2, [r7, #8]
 8000428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800042c:	4013      	ands	r3, r2
 800042e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000438:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800043c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000442:	4a04      	ldr	r2, [pc, #16]	@ (8000454 <__NVIC_SetPriorityGrouping+0x44>)
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	60d3      	str	r3, [r2, #12]
}
 8000448:	bf00      	nop
 800044a:	3714      	adds	r7, #20
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	e000ed00 	.word	0xe000ed00

08000458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800045c:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <__NVIC_GetPriorityGrouping+0x18>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	0a1b      	lsrs	r3, r3, #8
 8000462:	f003 0307 	and.w	r3, r3, #7
}
 8000466:	4618      	mov	r0, r3
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	e000ed00 	.word	0xe000ed00

08000474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	6039      	str	r1, [r7, #0]
 800047e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000484:	2b00      	cmp	r3, #0
 8000486:	db0a      	blt.n	800049e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	b2da      	uxtb	r2, r3
 800048c:	490c      	ldr	r1, [pc, #48]	@ (80004c0 <__NVIC_SetPriority+0x4c>)
 800048e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000492:	0112      	lsls	r2, r2, #4
 8000494:	b2d2      	uxtb	r2, r2
 8000496:	440b      	add	r3, r1
 8000498:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800049c:	e00a      	b.n	80004b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	4908      	ldr	r1, [pc, #32]	@ (80004c4 <__NVIC_SetPriority+0x50>)
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	f003 030f 	and.w	r3, r3, #15
 80004aa:	3b04      	subs	r3, #4
 80004ac:	0112      	lsls	r2, r2, #4
 80004ae:	b2d2      	uxtb	r2, r2
 80004b0:	440b      	add	r3, r1
 80004b2:	761a      	strb	r2, [r3, #24]
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	e000e100 	.word	0xe000e100
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b089      	sub	sp, #36	@ 0x24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f003 0307 	and.w	r3, r3, #7
 80004da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004dc:	69fb      	ldr	r3, [r7, #28]
 80004de:	f1c3 0307 	rsb	r3, r3, #7
 80004e2:	2b04      	cmp	r3, #4
 80004e4:	bf28      	it	cs
 80004e6:	2304      	movcs	r3, #4
 80004e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	3304      	adds	r3, #4
 80004ee:	2b06      	cmp	r3, #6
 80004f0:	d902      	bls.n	80004f8 <NVIC_EncodePriority+0x30>
 80004f2:	69fb      	ldr	r3, [r7, #28]
 80004f4:	3b03      	subs	r3, #3
 80004f6:	e000      	b.n	80004fa <NVIC_EncodePriority+0x32>
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000500:	69bb      	ldr	r3, [r7, #24]
 8000502:	fa02 f303 	lsl.w	r3, r2, r3
 8000506:	43da      	mvns	r2, r3
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	401a      	ands	r2, r3
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000510:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	43d9      	mvns	r1, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000520:	4313      	orrs	r3, r2
         );
}
 8000522:	4618      	mov	r0, r3
 8000524:	3724      	adds	r7, #36	@ 0x24
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3b01      	subs	r3, #1
 800053c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000540:	d301      	bcc.n	8000546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000542:	2301      	movs	r3, #1
 8000544:	e00f      	b.n	8000566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000546:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <SysTick_Config+0x40>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3b01      	subs	r3, #1
 800054c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800054e:	210f      	movs	r1, #15
 8000550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000554:	f7ff ff8e 	bl	8000474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000558:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <SysTick_Config+0x40>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800055e:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <SysTick_Config+0x40>)
 8000560:	2207      	movs	r2, #7
 8000562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	e000e010 	.word	0xe000e010

08000574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f7ff ff47 	bl	8000410 <__NVIC_SetPriorityGrouping>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800058a:	b580      	push	{r7, lr}
 800058c:	b086      	sub	sp, #24
 800058e:	af00      	add	r7, sp, #0
 8000590:	4603      	mov	r3, r0
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
 8000596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800059c:	f7ff ff5c 	bl	8000458 <__NVIC_GetPriorityGrouping>
 80005a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	68b9      	ldr	r1, [r7, #8]
 80005a6:	6978      	ldr	r0, [r7, #20]
 80005a8:	f7ff ff8e 	bl	80004c8 <NVIC_EncodePriority>
 80005ac:	4602      	mov	r2, r0
 80005ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff5d 	bl	8000474 <__NVIC_SetPriority>
}
 80005ba:	bf00      	nop
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff ffb0 	bl	8000530 <SysTick_Config>
 80005d0:	4603      	mov	r3, r0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005dc:	b480      	push	{r7}
 80005de:	b089      	sub	sp, #36	@ 0x24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	e177      	b.n	80008e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80005f8:	2201      	movs	r2, #1
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	4013      	ands	r3, r2
 800060a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	429a      	cmp	r2, r3
 8000612:	f040 8166 	bne.w	80008e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	f003 0303 	and.w	r3, r3, #3
 800061e:	2b01      	cmp	r3, #1
 8000620:	d005      	beq.n	800062e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800062a:	2b02      	cmp	r3, #2
 800062c:	d130      	bne.n	8000690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	2203      	movs	r2, #3
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	43db      	mvns	r3, r3
 8000640:	69ba      	ldr	r2, [r7, #24]
 8000642:	4013      	ands	r3, r2
 8000644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	68da      	ldr	r2, [r3, #12]
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	69ba      	ldr	r2, [r7, #24]
 8000654:	4313      	orrs	r3, r2
 8000656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	69ba      	ldr	r2, [r7, #24]
 800065c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000664:	2201      	movs	r2, #1
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	43db      	mvns	r3, r3
 800066e:	69ba      	ldr	r2, [r7, #24]
 8000670:	4013      	ands	r3, r2
 8000672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	091b      	lsrs	r3, r3, #4
 800067a:	f003 0201 	and.w	r2, r3, #1
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	fa02 f303 	lsl.w	r3, r2, r3
 8000684:	69ba      	ldr	r2, [r7, #24]
 8000686:	4313      	orrs	r3, r2
 8000688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	69ba      	ldr	r2, [r7, #24]
 800068e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	f003 0303 	and.w	r3, r3, #3
 8000698:	2b03      	cmp	r3, #3
 800069a:	d017      	beq.n	80006cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	2203      	movs	r2, #3
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	43db      	mvns	r3, r3
 80006ae:	69ba      	ldr	r2, [r7, #24]
 80006b0:	4013      	ands	r3, r2
 80006b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	69ba      	ldr	r2, [r7, #24]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	69ba      	ldr	r2, [r7, #24]
 80006ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	f003 0303 	and.w	r3, r3, #3
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d123      	bne.n	8000720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	08da      	lsrs	r2, r3, #3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3208      	adds	r2, #8
 80006e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	f003 0307 	and.w	r3, r3, #7
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	220f      	movs	r2, #15
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	43db      	mvns	r3, r3
 80006f6:	69ba      	ldr	r2, [r7, #24]
 80006f8:	4013      	ands	r3, r2
 80006fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	691a      	ldr	r2, [r3, #16]
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	4313      	orrs	r3, r2
 8000710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	08da      	lsrs	r2, r3, #3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	3208      	adds	r2, #8
 800071a:	69b9      	ldr	r1, [r7, #24]
 800071c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	2203      	movs	r2, #3
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	43db      	mvns	r3, r3
 8000732:	69ba      	ldr	r2, [r7, #24]
 8000734:	4013      	ands	r3, r2
 8000736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	f003 0203 	and.w	r2, r3, #3
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	69ba      	ldr	r2, [r7, #24]
 800074a:	4313      	orrs	r3, r2
 800074c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	69ba      	ldr	r2, [r7, #24]
 8000752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800075c:	2b00      	cmp	r3, #0
 800075e:	f000 80c0 	beq.w	80008e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b66      	ldr	r3, [pc, #408]	@ (8000900 <HAL_GPIO_Init+0x324>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	4a65      	ldr	r2, [pc, #404]	@ (8000900 <HAL_GPIO_Init+0x324>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000770:	6453      	str	r3, [r2, #68]	@ 0x44
 8000772:	4b63      	ldr	r3, [pc, #396]	@ (8000900 <HAL_GPIO_Init+0x324>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800077e:	4a61      	ldr	r2, [pc, #388]	@ (8000904 <HAL_GPIO_Init+0x328>)
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	089b      	lsrs	r3, r3, #2
 8000784:	3302      	adds	r3, #2
 8000786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f003 0303 	and.w	r3, r3, #3
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	220f      	movs	r2, #15
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	69ba      	ldr	r2, [r7, #24]
 800079e:	4013      	ands	r3, r2
 80007a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a58      	ldr	r2, [pc, #352]	@ (8000908 <HAL_GPIO_Init+0x32c>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d037      	beq.n	800081a <HAL_GPIO_Init+0x23e>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a57      	ldr	r2, [pc, #348]	@ (800090c <HAL_GPIO_Init+0x330>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d031      	beq.n	8000816 <HAL_GPIO_Init+0x23a>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a56      	ldr	r2, [pc, #344]	@ (8000910 <HAL_GPIO_Init+0x334>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d02b      	beq.n	8000812 <HAL_GPIO_Init+0x236>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a55      	ldr	r2, [pc, #340]	@ (8000914 <HAL_GPIO_Init+0x338>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d025      	beq.n	800080e <HAL_GPIO_Init+0x232>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a54      	ldr	r2, [pc, #336]	@ (8000918 <HAL_GPIO_Init+0x33c>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d01f      	beq.n	800080a <HAL_GPIO_Init+0x22e>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a53      	ldr	r2, [pc, #332]	@ (800091c <HAL_GPIO_Init+0x340>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d019      	beq.n	8000806 <HAL_GPIO_Init+0x22a>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a52      	ldr	r2, [pc, #328]	@ (8000920 <HAL_GPIO_Init+0x344>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d013      	beq.n	8000802 <HAL_GPIO_Init+0x226>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a51      	ldr	r2, [pc, #324]	@ (8000924 <HAL_GPIO_Init+0x348>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d00d      	beq.n	80007fe <HAL_GPIO_Init+0x222>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a50      	ldr	r2, [pc, #320]	@ (8000928 <HAL_GPIO_Init+0x34c>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d007      	beq.n	80007fa <HAL_GPIO_Init+0x21e>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a4f      	ldr	r2, [pc, #316]	@ (800092c <HAL_GPIO_Init+0x350>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d101      	bne.n	80007f6 <HAL_GPIO_Init+0x21a>
 80007f2:	2309      	movs	r3, #9
 80007f4:	e012      	b.n	800081c <HAL_GPIO_Init+0x240>
 80007f6:	230a      	movs	r3, #10
 80007f8:	e010      	b.n	800081c <HAL_GPIO_Init+0x240>
 80007fa:	2308      	movs	r3, #8
 80007fc:	e00e      	b.n	800081c <HAL_GPIO_Init+0x240>
 80007fe:	2307      	movs	r3, #7
 8000800:	e00c      	b.n	800081c <HAL_GPIO_Init+0x240>
 8000802:	2306      	movs	r3, #6
 8000804:	e00a      	b.n	800081c <HAL_GPIO_Init+0x240>
 8000806:	2305      	movs	r3, #5
 8000808:	e008      	b.n	800081c <HAL_GPIO_Init+0x240>
 800080a:	2304      	movs	r3, #4
 800080c:	e006      	b.n	800081c <HAL_GPIO_Init+0x240>
 800080e:	2303      	movs	r3, #3
 8000810:	e004      	b.n	800081c <HAL_GPIO_Init+0x240>
 8000812:	2302      	movs	r3, #2
 8000814:	e002      	b.n	800081c <HAL_GPIO_Init+0x240>
 8000816:	2301      	movs	r3, #1
 8000818:	e000      	b.n	800081c <HAL_GPIO_Init+0x240>
 800081a:	2300      	movs	r3, #0
 800081c:	69fa      	ldr	r2, [r7, #28]
 800081e:	f002 0203 	and.w	r2, r2, #3
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	4093      	lsls	r3, r2
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	4313      	orrs	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800082c:	4935      	ldr	r1, [pc, #212]	@ (8000904 <HAL_GPIO_Init+0x328>)
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	089b      	lsrs	r3, r3, #2
 8000832:	3302      	adds	r3, #2
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800083a:	4b3d      	ldr	r3, [pc, #244]	@ (8000930 <HAL_GPIO_Init+0x354>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	43db      	mvns	r3, r3
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	4013      	ands	r3, r2
 8000848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000852:	2b00      	cmp	r3, #0
 8000854:	d003      	beq.n	800085e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000856:	69ba      	ldr	r2, [r7, #24]
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	4313      	orrs	r3, r2
 800085c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800085e:	4a34      	ldr	r2, [pc, #208]	@ (8000930 <HAL_GPIO_Init+0x354>)
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000864:	4b32      	ldr	r3, [pc, #200]	@ (8000930 <HAL_GPIO_Init+0x354>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	43db      	mvns	r3, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087c:	2b00      	cmp	r3, #0
 800087e:	d003      	beq.n	8000888 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	4313      	orrs	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000888:	4a29      	ldr	r2, [pc, #164]	@ (8000930 <HAL_GPIO_Init+0x354>)
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800088e:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <HAL_GPIO_Init+0x354>)
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	43db      	mvns	r3, r3
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	4013      	ands	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d003      	beq.n	80008b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80008b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000930 <HAL_GPIO_Init+0x354>)
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <HAL_GPIO_Init+0x354>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	43db      	mvns	r3, r3
 80008c2:	69ba      	ldr	r2, [r7, #24]
 80008c4:	4013      	ands	r3, r2
 80008c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d003      	beq.n	80008dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80008dc:	4a14      	ldr	r2, [pc, #80]	@ (8000930 <HAL_GPIO_Init+0x354>)
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3301      	adds	r3, #1
 80008e6:	61fb      	str	r3, [r7, #28]
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	2b0f      	cmp	r3, #15
 80008ec:	f67f ae84 	bls.w	80005f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3724      	adds	r7, #36	@ 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40013800 	.word	0x40013800
 8000908:	40020000 	.word	0x40020000
 800090c:	40020400 	.word	0x40020400
 8000910:	40020800 	.word	0x40020800
 8000914:	40020c00 	.word	0x40020c00
 8000918:	40021000 	.word	0x40021000
 800091c:	40021400 	.word	0x40021400
 8000920:	40021800 	.word	0x40021800
 8000924:	40021c00 	.word	0x40021c00
 8000928:	40022000 	.word	0x40022000
 800092c:	40022400 	.word	0x40022400
 8000930:	40013c00 	.word	0x40013c00

08000934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	807b      	strh	r3, [r7, #2]
 8000940:	4613      	mov	r3, r2
 8000942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000944:	787b      	ldrb	r3, [r7, #1]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800094a:	887a      	ldrh	r2, [r7, #2]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000950:	e003      	b.n	800095a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	041a      	lsls	r2, r3, #16
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	619a      	str	r2, [r3, #24]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d101      	bne.n	800097a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e12b      	b.n	8000bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d106      	bne.n	8000994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f92e 	bl	8000bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2224      	movs	r2, #36	@ 0x24
 8000998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f022 0201 	bic.w	r2, r2, #1
 80009aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80009ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80009ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80009cc:	f000 fd62 	bl	8001494 <HAL_RCC_GetPCLK1Freq>
 80009d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4a81      	ldr	r2, [pc, #516]	@ (8000bdc <HAL_I2C_Init+0x274>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d807      	bhi.n	80009ec <HAL_I2C_Init+0x84>
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4a80      	ldr	r2, [pc, #512]	@ (8000be0 <HAL_I2C_Init+0x278>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	bf94      	ite	ls
 80009e4:	2301      	movls	r3, #1
 80009e6:	2300      	movhi	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	e006      	b.n	80009fa <HAL_I2C_Init+0x92>
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4a7d      	ldr	r2, [pc, #500]	@ (8000be4 <HAL_I2C_Init+0x27c>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	bf94      	ite	ls
 80009f4:	2301      	movls	r3, #1
 80009f6:	2300      	movhi	r3, #0
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e0e7      	b.n	8000bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4a78      	ldr	r2, [pc, #480]	@ (8000be8 <HAL_I2C_Init+0x280>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0c9b      	lsrs	r3, r3, #18
 8000a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6a1b      	ldr	r3, [r3, #32]
 8000a28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a6a      	ldr	r2, [pc, #424]	@ (8000bdc <HAL_I2C_Init+0x274>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d802      	bhi.n	8000a3c <HAL_I2C_Init+0xd4>
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	e009      	b.n	8000a50 <HAL_I2C_Init+0xe8>
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000a42:	fb02 f303 	mul.w	r3, r2, r3
 8000a46:	4a69      	ldr	r2, [pc, #420]	@ (8000bec <HAL_I2C_Init+0x284>)
 8000a48:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4c:	099b      	lsrs	r3, r3, #6
 8000a4e:	3301      	adds	r3, #1
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	6812      	ldr	r2, [r2, #0]
 8000a54:	430b      	orrs	r3, r1
 8000a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000a62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	495c      	ldr	r1, [pc, #368]	@ (8000bdc <HAL_I2C_Init+0x274>)
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d819      	bhi.n	8000aa4 <HAL_I2C_Init+0x13c>
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	1e59      	subs	r1, r3, #1
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a7e:	1c59      	adds	r1, r3, #1
 8000a80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000a84:	400b      	ands	r3, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d00a      	beq.n	8000aa0 <HAL_I2C_Init+0x138>
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	1e59      	subs	r1, r3, #1
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a98:	3301      	adds	r3, #1
 8000a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a9e:	e051      	b.n	8000b44 <HAL_I2C_Init+0x1dc>
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	e04f      	b.n	8000b44 <HAL_I2C_Init+0x1dc>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d111      	bne.n	8000ad0 <HAL_I2C_Init+0x168>
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	1e58      	subs	r0, r3, #1
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6859      	ldr	r1, [r3, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	440b      	add	r3, r1
 8000aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8000abe:	3301      	adds	r3, #1
 8000ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf0c      	ite	eq
 8000ac8:	2301      	moveq	r3, #1
 8000aca:	2300      	movne	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	e012      	b.n	8000af6 <HAL_I2C_Init+0x18e>
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	1e58      	subs	r0, r3, #1
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6859      	ldr	r1, [r3, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	440b      	add	r3, r1
 8000ade:	0099      	lsls	r1, r3, #2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf0c      	ite	eq
 8000af0:	2301      	moveq	r3, #1
 8000af2:	2300      	movne	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_I2C_Init+0x196>
 8000afa:	2301      	movs	r3, #1
 8000afc:	e022      	b.n	8000b44 <HAL_I2C_Init+0x1dc>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d10e      	bne.n	8000b24 <HAL_I2C_Init+0x1bc>
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	1e58      	subs	r0, r3, #1
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6859      	ldr	r1, [r3, #4]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	440b      	add	r3, r1
 8000b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b18:	3301      	adds	r3, #1
 8000b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b22:	e00f      	b.n	8000b44 <HAL_I2C_Init+0x1dc>
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	1e58      	subs	r0, r3, #1
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6859      	ldr	r1, [r3, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	440b      	add	r3, r1
 8000b32:	0099      	lsls	r1, r3, #2
 8000b34:	440b      	add	r3, r1
 8000b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	6809      	ldr	r1, [r1, #0]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	69da      	ldr	r2, [r3, #28]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000b72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	6911      	ldr	r1, [r2, #16]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68d2      	ldr	r2, [r2, #12]
 8000b7e:	4311      	orrs	r1, r2
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	6812      	ldr	r2, [r2, #0]
 8000b84:	430b      	orrs	r3, r1
 8000b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	695a      	ldr	r2, [r3, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f042 0201 	orr.w	r2, r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	000186a0 	.word	0x000186a0
 8000be0:	001e847f 	.word	0x001e847f
 8000be4:	003d08ff 	.word	0x003d08ff
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	10624dd3 	.word	0x10624dd3

08000bf0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af02      	add	r7, sp, #8
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	460b      	mov	r3, r1
 8000c12:	817b      	strh	r3, [r7, #10]
 8000c14:	4613      	mov	r3, r2
 8000c16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff fbca 	bl	80003b0 <HAL_GetTick>
 8000c1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b20      	cmp	r3, #32
 8000c28:	f040 80e0 	bne.w	8000dec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2319      	movs	r3, #25
 8000c32:	2201      	movs	r2, #1
 8000c34:	4970      	ldr	r1, [pc, #448]	@ (8000df8 <HAL_I2C_Master_Transmit+0x1f4>)
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f000 fa92 	bl	8001160 <I2C_WaitOnFlagUntilTimeout>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000c42:	2302      	movs	r3, #2
 8000c44:	e0d3      	b.n	8000dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d101      	bne.n	8000c54 <HAL_I2C_Master_Transmit+0x50>
 8000c50:	2302      	movs	r3, #2
 8000c52:	e0cc      	b.n	8000dee <HAL_I2C_Master_Transmit+0x1ea>
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2201      	movs	r2, #1
 8000c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d007      	beq.n	8000c7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f042 0201 	orr.w	r2, r2, #1
 8000c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000c88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2221      	movs	r2, #33	@ 0x21
 8000c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2210      	movs	r2, #16
 8000c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	893a      	ldrh	r2, [r7, #8]
 8000caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4a50      	ldr	r2, [pc, #320]	@ (8000dfc <HAL_I2C_Master_Transmit+0x1f8>)
 8000cba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000cbc:	8979      	ldrh	r1, [r7, #10]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	6a3a      	ldr	r2, [r7, #32]
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f000 f9ca 	bl	800105c <I2C_MasterRequestWrite>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e08d      	b.n	8000dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000ce8:	e066      	b.n	8000db8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	6a39      	ldr	r1, [r7, #32]
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f000 fb0c 	bl	800130c <I2C_WaitOnTXEFlagUntilTimeout>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00d      	beq.n	8000d16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d107      	bne.n	8000d12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e06b      	b.n	8000dee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	3b01      	subs	r3, #1
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d11b      	bne.n	8000d8c <HAL_I2C_Master_Transmit+0x188>
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d017      	beq.n	8000d8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d60:	781a      	ldrb	r2, [r3, #0]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d84:	3b01      	subs	r3, #1
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	6a39      	ldr	r1, [r7, #32]
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f000 fafc 	bl	800138e <I2C_WaitOnBTFFlagUntilTimeout>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00d      	beq.n	8000db8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d107      	bne.n	8000db4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000db2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e01a      	b.n	8000dee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d194      	bne.n	8000cea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	e000      	b.n	8000dee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000dec:	2302      	movs	r3, #2
  }
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	00100002 	.word	0x00100002
 8000dfc:	ffff0000 	.word	0xffff0000

08000e00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff face 	bl	80003b0 <HAL_GetTick>
 8000e14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b20      	cmp	r3, #32
 8000e24:	f040 8111 	bne.w	800104a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2319      	movs	r3, #25
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4988      	ldr	r1, [pc, #544]	@ (8001054 <HAL_I2C_IsDeviceReady+0x254>)
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f000 f994 	bl	8001160 <I2C_WaitOnFlagUntilTimeout>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e104      	b.n	800104c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d101      	bne.n	8000e50 <HAL_I2C_IsDeviceReady+0x50>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e0fd      	b.n	800104c <HAL_I2C_IsDeviceReady+0x24c>
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d007      	beq.n	8000e76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f042 0201 	orr.w	r2, r2, #1
 8000e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2224      	movs	r2, #36	@ 0x24
 8000e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2200      	movs	r2, #0
 8000e92:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4a70      	ldr	r2, [pc, #448]	@ (8001058 <HAL_I2C_IsDeviceReady+0x258>)
 8000e98:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ea8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f000 f952 	bl	8001160 <I2C_WaitOnFlagUntilTimeout>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00d      	beq.n	8000ede <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ed0:	d103      	bne.n	8000eda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ed8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e0b6      	b.n	800104c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ede:	897b      	ldrh	r3, [r7, #10]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8000eec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8000eee:	f7ff fa5f 	bl	80003b0 <HAL_GetTick>
 8000ef2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	bf0c      	ite	eq
 8000f02:	2301      	moveq	r3, #1
 8000f04:	2300      	movne	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f18:	bf0c      	ite	eq
 8000f1a:	2301      	moveq	r3, #1
 8000f1c:	2300      	movne	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000f22:	e025      	b.n	8000f70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000f24:	f7ff fa44 	bl	80003b0 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d302      	bcc.n	8000f3a <HAL_I2C_IsDeviceReady+0x13a>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d103      	bne.n	8000f42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	22a0      	movs	r2, #160	@ 0xa0
 8000f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	bf0c      	ite	eq
 8000f50:	2301      	moveq	r3, #1
 8000f52:	2300      	movne	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f66:	bf0c      	ite	eq
 8000f68:	2301      	moveq	r3, #1
 8000f6a:	2300      	movne	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f7a:	d005      	beq.n	8000f88 <HAL_I2C_IsDeviceReady+0x188>
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d102      	bne.n	8000f88 <HAL_I2C_IsDeviceReady+0x188>
 8000f82:	7dbb      	ldrb	r3, [r7, #22]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0cd      	beq.n	8000f24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d129      	bne.n	8000ff2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000fac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2319      	movs	r3, #25
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4921      	ldr	r1, [pc, #132]	@ (8001054 <HAL_I2C_IsDeviceReady+0x254>)
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f8c6 	bl	8001160 <I2C_WaitOnFlagUntilTimeout>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e036      	b.n	800104c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e02c      	b.n	800104c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001000:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800100a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2319      	movs	r3, #25
 8001012:	2201      	movs	r2, #1
 8001014:	490f      	ldr	r1, [pc, #60]	@ (8001054 <HAL_I2C_IsDeviceReady+0x254>)
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 f8a2 	bl	8001160 <I2C_WaitOnFlagUntilTimeout>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e012      	b.n	800104c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	3301      	adds	r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	429a      	cmp	r2, r3
 8001032:	f4ff af32 	bcc.w	8000e9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2220      	movs	r2, #32
 800103a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800104a:	2302      	movs	r3, #2
  }
}
 800104c:	4618      	mov	r0, r3
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	00100002 	.word	0x00100002
 8001058:	ffff0000 	.word	0xffff0000

0800105c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af02      	add	r7, sp, #8
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	460b      	mov	r3, r1
 800106a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001070:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2b08      	cmp	r3, #8
 8001076:	d006      	beq.n	8001086 <I2C_MasterRequestWrite+0x2a>
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d003      	beq.n	8001086 <I2C_MasterRequestWrite+0x2a>
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001084:	d108      	bne.n	8001098 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e00b      	b.n	80010b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	2b12      	cmp	r3, #18
 800109e:	d107      	bne.n	80010b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 f84f 	bl	8001160 <I2C_WaitOnFlagUntilTimeout>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00d      	beq.n	80010e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010d6:	d103      	bne.n	80010e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e035      	b.n	8001150 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80010ec:	d108      	bne.n	8001100 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80010ee:	897b      	ldrh	r3, [r7, #10]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	e01b      	b.n	8001138 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001100:	897b      	ldrh	r3, [r7, #10]
 8001102:	11db      	asrs	r3, r3, #7
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f003 0306 	and.w	r3, r3, #6
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f063 030f 	orn	r3, r3, #15
 8001110:	b2da      	uxtb	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	490e      	ldr	r1, [pc, #56]	@ (8001158 <I2C_MasterRequestWrite+0xfc>)
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f000 f875 	bl	800120e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e010      	b.n	8001150 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800112e:	897b      	ldrh	r3, [r7, #10]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4907      	ldr	r1, [pc, #28]	@ (800115c <I2C_MasterRequestWrite+0x100>)
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f865 	bl	800120e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	00010008 	.word	0x00010008
 800115c:	00010002 	.word	0x00010002

08001160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001170:	e025      	b.n	80011be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001178:	d021      	beq.n	80011be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800117a:	f7ff f919 	bl	80003b0 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d302      	bcc.n	8001190 <I2C_WaitOnFlagUntilTimeout+0x30>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d116      	bne.n	80011be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2220      	movs	r2, #32
 800119a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f043 0220 	orr.w	r2, r3, #32
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e023      	b.n	8001206 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	0c1b      	lsrs	r3, r3, #16
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d10d      	bne.n	80011e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4013      	ands	r3, r2
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	e00c      	b.n	80011fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4013      	ands	r3, r2
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf0c      	ite	eq
 80011f6:	2301      	moveq	r3, #1
 80011f8:	2300      	movne	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	429a      	cmp	r2, r3
 8001202:	d0b6      	beq.n	8001172 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800121c:	e051      	b.n	80012c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800122c:	d123      	bne.n	8001276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800123c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001246:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2220      	movs	r2, #32
 8001252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f043 0204 	orr.w	r2, r3, #4
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e046      	b.n	8001304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800127c:	d021      	beq.n	80012c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800127e:	f7ff f897 	bl	80003b0 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d302      	bcc.n	8001294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d116      	bne.n	80012c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2220      	movs	r2, #32
 800129e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	f043 0220 	orr.w	r2, r3, #32
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e020      	b.n	8001304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	0c1b      	lsrs	r3, r3, #16
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d10c      	bne.n	80012e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4013      	ands	r3, r2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf14      	ite	ne
 80012de:	2301      	movne	r3, #1
 80012e0:	2300      	moveq	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	e00b      	b.n	80012fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	43da      	mvns	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	4013      	ands	r3, r2
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf14      	ite	ne
 80012f8:	2301      	movne	r3, #1
 80012fa:	2300      	moveq	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d18d      	bne.n	800121e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001318:	e02d      	b.n	8001376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f878 	bl	8001410 <I2C_IsAcknowledgeFailed>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e02d      	b.n	8001386 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001330:	d021      	beq.n	8001376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001332:	f7ff f83d 	bl	80003b0 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	429a      	cmp	r2, r3
 8001340:	d302      	bcc.n	8001348 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d116      	bne.n	8001376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2220      	movs	r2, #32
 8001352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f043 0220 	orr.w	r2, r3, #32
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e007      	b.n	8001386 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001380:	2b80      	cmp	r3, #128	@ 0x80
 8001382:	d1ca      	bne.n	800131a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800139a:	e02d      	b.n	80013f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f000 f837 	bl	8001410 <I2C_IsAcknowledgeFailed>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e02d      	b.n	8001408 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013b2:	d021      	beq.n	80013f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013b4:	f7fe fffc 	bl	80003b0 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d302      	bcc.n	80013ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2220      	movs	r2, #32
 80013d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	f043 0220 	orr.w	r2, r3, #32
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e007      	b.n	8001408 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b04      	cmp	r3, #4
 8001404:	d1ca      	bne.n	800139c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001426:	d11b      	bne.n	8001460 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001430:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2220      	movs	r2, #32
 800143c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	f043 0204 	orr.w	r2, r3, #4
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <HAL_RCC_GetHCLKFreq+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000000c 	.word	0x2000000c

08001494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001498:	f7ff fff0 	bl	800147c <HAL_RCC_GetHCLKFreq>
 800149c:	4602      	mov	r2, r0
 800149e:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	0a9b      	lsrs	r3, r3, #10
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	4903      	ldr	r1, [pc, #12]	@ (80014b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014aa:	5ccb      	ldrb	r3, [r1, r3]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	08001bbc 	.word	0x08001bbc

080014bc <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80014c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001584 <HD44780_Init+0xc8>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	7013      	strb	r3, [r2, #0]
  dpBacklight = LCD_BACKLIGHT;
 80014cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <HD44780_Init+0xcc>)
 80014ce:	2208      	movs	r2, #8
 80014d0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 80014d2:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <HD44780_Init+0xd0>)
 80014d4:	2208      	movs	r2, #8
 80014d6:	701a      	strb	r2, [r3, #0]


  /* Wait for initialization */
  DelayInit();
 80014d8:	f000 f9c0 	bl	800185c <DelayInit>
  HAL_Delay(50);
 80014dc:	2032      	movs	r0, #50	@ 0x32
 80014de:	f7fe ff73 	bl	80003c8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80014e2:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <HD44780_Init+0xcc>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f97e 	bl	80017e8 <ExpanderWrite>
  HAL_Delay(1000);
 80014ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014f0:	f7fe ff6a 	bl	80003c8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80014f4:	2030      	movs	r0, #48	@ 0x30
 80014f6:	f000 f965 	bl	80017c4 <Write4Bits>
  DelayUS(4500);
 80014fa:	f241 1094 	movw	r0, #4500	@ 0x1194
 80014fe:	f000 f9d7 	bl	80018b0 <DelayUS>

  Write4Bits(0x03 << 4);
 8001502:	2030      	movs	r0, #48	@ 0x30
 8001504:	f000 f95e 	bl	80017c4 <Write4Bits>
  DelayUS(4500);
 8001508:	f241 1094 	movw	r0, #4500	@ 0x1194
 800150c:	f000 f9d0 	bl	80018b0 <DelayUS>

  Write4Bits(0x03 << 4);
 8001510:	2030      	movs	r0, #48	@ 0x30
 8001512:	f000 f957 	bl	80017c4 <Write4Bits>
  DelayUS(4500);
 8001516:	f241 1094 	movw	r0, #4500	@ 0x1194
 800151a:	f000 f9c9 	bl	80018b0 <DelayUS>

  Write4Bits(0x02 << 4);
 800151e:	2020      	movs	r0, #32
 8001520:	f000 f950 	bl	80017c4 <Write4Bits>
  DelayUS(100);
 8001524:	2064      	movs	r0, #100	@ 0x64
 8001526:	f000 f9c3 	bl	80018b0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <HD44780_Init+0xd0>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	f043 0320 	orr.w	r3, r3, #32
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f908 	bl	800174a <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <HD44780_Init+0xd4>)
 800153c:	2204      	movs	r2, #4
 800153e:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001540:	f000 f876 	bl	8001630 <HD44780_Display>
  HD44780_Clear();
 8001544:	f000 f82c 	bl	80015a0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <HD44780_Init+0xd8>)
 800154a:	2202      	movs	r2, #2
 800154c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <HD44780_Init+0xd8>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f8f6 	bl	800174a <SendCommand>
  DelayUS(4500);
 800155e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001562:	f000 f9a5 	bl	80018b0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001566:	490c      	ldr	r1, [pc, #48]	@ (8001598 <HD44780_Init+0xdc>)
 8001568:	2000      	movs	r0, #0
 800156a:	f000 f8a3 	bl	80016b4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800156e:	490b      	ldr	r1, [pc, #44]	@ (800159c <HD44780_Init+0xe0>)
 8001570:	2001      	movs	r0, #1
 8001572:	f000 f89f 	bl	80016b4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001576:	f000 f81e 	bl	80015b6 <HD44780_Home>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000004b 	.word	0x2000004b
 8001588:	2000004c 	.word	0x2000004c
 800158c:	20000048 	.word	0x20000048
 8001590:	20000049 	.word	0x20000049
 8001594:	2000004a 	.word	0x2000004a
 8001598:	20000018 	.word	0x20000018
 800159c:	20000020 	.word	0x20000020

080015a0 <HD44780_Clear>:

void HD44780_Clear()
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f000 f8d0 	bl	800174a <SendCommand>
  DelayUS(2000);
 80015aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015ae:	f000 f97f 	bl	80018b0 <DelayUS>
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HD44780_Home>:

void HD44780_Home()
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80015ba:	2002      	movs	r0, #2
 80015bc:	f000 f8c5 	bl	800174a <SendCommand>
  DelayUS(2000);
 80015c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015c4:	f000 f974 	bl	80018b0 <DelayUS>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	460a      	mov	r2, r1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HD44780_SetCursor+0x5c>)
 80015de:	f107 0408 	add.w	r4, r7, #8
 80015e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <HD44780_SetCursor+0x60>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	79ba      	ldrb	r2, [r7, #6]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d303      	bcc.n	80015fa <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HD44780_SetCursor+0x60>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80015fa:	79bb      	ldrb	r3, [r7, #6]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	3318      	adds	r3, #24
 8001600:	443b      	add	r3, r7
 8001602:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	4413      	add	r3, r2
 800160c:	b2db      	uxtb	r3, r3
 800160e:	b25b      	sxtb	r3, r3
 8001610:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001614:	b25b      	sxtb	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f896 	bl	800174a <SendCommand>
}
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd90      	pop	{r4, r7, pc}
 8001626:	bf00      	nop
 8001628:	08001b80 	.word	0x08001b80
 800162c:	2000004b 	.word	0x2000004b

08001630 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <HD44780_Display+0x28>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HD44780_Display+0x28>)
 8001640:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001642:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <HD44780_Display+0x28>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f87c 	bl	800174a <SendCommand>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000049 	.word	0x20000049

0800165c <HD44780_Cursor>:
  dpControl &= ~LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Cursor()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <HD44780_Cursor+0x28>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HD44780_Cursor+0x28>)
 800166c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800166e:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <HD44780_Cursor+0x28>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f866 	bl	800174a <SendCommand>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000049 	.word	0x20000049

08001688 <HD44780_Blink>:
  dpControl &= ~LCD_BLINKON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Blink()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <HD44780_Blink+0x28>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <HD44780_Blink+0x28>)
 8001698:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800169a:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <HD44780_Blink+0x28>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	f043 0308 	orr.w	r3, r3, #8
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f850 	bl	800174a <SendCommand>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000049 	.word	0x20000049

080016b4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f837 	bl	800174a <SendCommand>
  for (int i=0; i<8; i++)
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e009      	b.n	80016f6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f83b 	bl	8001766 <SendChar>
  for (int i=0; i<8; i++)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3301      	adds	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b07      	cmp	r3, #7
 80016fa:	ddf2      	ble.n	80016e2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f827 	bl	8001766 <SendChar>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001728:	e006      	b.n	8001738 <HD44780_PrintStr+0x18>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f817 	bl	8001766 <SendChar>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f4      	bne.n	800172a <HD44780_PrintStr+0xa>
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f000 f812 	bl	8001782 <Send>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	2101      	movs	r1, #1
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f804 	bl	8001782 <Send>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	460a      	mov	r2, r1
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	4613      	mov	r3, r2
 8001790:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f023 030f 	bic.w	r3, r3, #15
 8001798:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	79bb      	ldrb	r3, [r7, #6]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f80b 	bl	80017c4 <Write4Bits>
  Write4Bits((lownib)|mode);
 80017ae:	7bba      	ldrb	r2, [r7, #14]
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f804 	bl	80017c4 <Write4Bits>
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f809 	bl	80017e8 <ExpanderWrite>
  PulseEnable(value);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 f821 	bl	8001820 <PulseEnable>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80017f2:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <ExpanderWrite+0x30>)
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80017fe:	f107 020f 	add.w	r2, r7, #15
 8001802:	230a      	movs	r3, #10
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	214e      	movs	r1, #78	@ 0x4e
 800180a:	4804      	ldr	r0, [pc, #16]	@ (800181c <ExpanderWrite+0x34>)
 800180c:	f7ff f9fa 	bl	8000c04 <HAL_I2C_Master_Transmit>
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2000004c 	.word	0x2000004c
 800181c:	20000050 	.word	0x20000050

08001820 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ffd8 	bl	80017e8 <ExpanderWrite>
  DelayUS(20);
 8001838:	2014      	movs	r0, #20
 800183a:	f000 f839 	bl	80018b0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f023 0304 	bic.w	r3, r3, #4
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ffce 	bl	80017e8 <ExpanderWrite>
  DelayUS(20);
 800184c:	2014      	movs	r0, #20
 800184e:	f000 f82f 	bl	80018b0 <DelayUS>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <DelayInit>:

static void DelayInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <DelayInit+0x4c>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4a10      	ldr	r2, [pc, #64]	@ (80018a8 <DelayInit+0x4c>)
 8001866:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800186a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800186c:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <DelayInit+0x4c>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4a0d      	ldr	r2, [pc, #52]	@ (80018a8 <DelayInit+0x4c>)
 8001872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001876:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <DelayInit+0x50>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0b      	ldr	r2, [pc, #44]	@ (80018ac <DelayInit+0x50>)
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001884:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <DelayInit+0x50>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a08      	ldr	r2, [pc, #32]	@ (80018ac <DelayInit+0x50>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <DelayInit+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001896:	bf00      	nop
  __ASM volatile ("NOP");
 8001898:	bf00      	nop
  __ASM volatile ("NOP");
 800189a:	bf00      	nop
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000edf0 	.word	0xe000edf0
 80018ac:	e0001000 	.word	0xe0001000

080018b0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80018b8:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <DelayUS+0x44>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0e      	ldr	r2, [pc, #56]	@ (80018f8 <DelayUS+0x48>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0c9a      	lsrs	r2, r3, #18
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <DelayUS+0x4c>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <DelayUS+0x4c>)
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f6      	bhi.n	80018d2 <DelayUS+0x22>
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	431bde83 	.word	0x431bde83
 80018fc:	e0001000 	.word	0xe0001000

08001900 <main>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);


int main(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	HAL_Init();
 8001904:	f7fe fcf4 	bl	80002f0 <HAL_Init>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001908:	f000 f884 	bl	8001a14 <MX_GPIO_Init>
	MX_I2C1_Init();
 800190c:	f000 f854 	bl	80019b8 <MX_I2C1_Init>

	if (HAL_I2C_IsDeviceReady(&hi2c1, DEVICE_ADDR, 10, HAL_MAX_DELAY) != HAL_OK)
 8001910:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001914:	220a      	movs	r2, #10
 8001916:	214e      	movs	r1, #78	@ 0x4e
 8001918:	4823      	ldr	r0, [pc, #140]	@ (80019a8 <main+0xa8>)
 800191a:	f7ff fa71 	bl	8000e00 <HAL_I2C_IsDeviceReady>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <main+0x28>
	{
		// Device is not ready
		Error_Handler();
 8001924:	f000 f8ca 	bl	8001abc <Error_Handler>
	}


	/* Initialize */
	HD44780_Init(2);
 8001928:	2002      	movs	r0, #2
 800192a:	f7ff fdc7 	bl	80014bc <HD44780_Init>
	/* Clear buffer */
	//HD44780_Clear();

	/* Hide characters */
	//HD44780_NoDisplay();
	HD44780_Cursor();
 800192e:	f7ff fe95 	bl	800165c <HD44780_Cursor>
	HD44780_SetCursor(0,0);
 8001932:	2100      	movs	r1, #0
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff fe49 	bl	80015cc <HD44780_SetCursor>
	HD44780_PrintStr("HEaaa STM32!!!");
 800193a:	481c      	ldr	r0, [pc, #112]	@ (80019ac <main+0xac>)
 800193c:	f7ff fef0 	bl	8001720 <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0);
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fee0 	bl	8001706 <HD44780_PrintSpecialChar>

	/* Show characters */
	HD44780_Display();
 8001946:	f7ff fe73 	bl	8001630 <HD44780_Display>

	/* Move position */
	HD44780_SetCursor(0, 1);
 800194a:	2101      	movs	r1, #1
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff fe3d 	bl	80015cc <HD44780_SetCursor>
	HD44780_PrintStr("BYE STM32!!!");
 8001952:	4817      	ldr	r0, [pc, #92]	@ (80019b0 <main+0xb0>)
 8001954:	f7ff fee4 	bl	8001720 <HD44780_PrintStr>
	HD44780_PrintSpecialChar(1);
 8001958:	2001      	movs	r0, #1
 800195a:	f7ff fed4 	bl	8001706 <HD44780_PrintSpecialChar>

	/* Blink cursor */
	HD44780_Blink();
 800195e:	f7ff fe93 	bl	8001688 <HD44780_Blink>

	HAL_Delay(2000);
 8001962:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001966:	f7fe fd2f 	bl	80003c8 <HAL_Delay>
	HD44780_Clear();
 800196a:	f7ff fe19 	bl	80015a0 <HD44780_Clear>
	HAL_Delay(2000);
 800196e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001972:	f7fe fd29 	bl	80003c8 <HAL_Delay>
	HD44780_SetCursor(0, 2);
 8001976:	2102      	movs	r1, #2
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff fe27 	bl	80015cc <HD44780_SetCursor>
	HAL_Delay(2000);
 800197e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001982:	f7fe fd21 	bl	80003c8 <HAL_Delay>
	HD44780_SetCursor(5, 2);
 8001986:	2102      	movs	r1, #2
 8001988:	2005      	movs	r0, #5
 800198a:	f7ff fe1f 	bl	80015cc <HD44780_SetCursor>
	HAL_Delay(2000);
 800198e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001992:	f7fe fd19 	bl	80003c8 <HAL_Delay>
	HD44780_SetCursor(5, 1);
 8001996:	2101      	movs	r1, #1
 8001998:	2005      	movs	r0, #5
 800199a:	f7ff fe17 	bl	80015cc <HD44780_SetCursor>
	HD44780_PrintStr("B");
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <main+0xb4>)
 80019a0:	f7ff febe 	bl	8001720 <HD44780_PrintStr>

	/* Infinite loop */
	while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <main+0xa4>
 80019a8:	20000050 	.word	0x20000050
 80019ac:	08001b90 	.word	0x08001b90
 80019b0:	08001ba0 	.word	0x08001ba0
 80019b4:	08001bb0 	.word	0x08001bb0

080019b8 <MX_I2C1_Init>:
	}
}


static void MX_I2C1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019be:	4a13      	ldr	r2, [pc, #76]	@ (8001a0c <MX_I2C1_Init+0x54>)
 80019c0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019c4:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <MX_I2C1_Init+0x58>)
 80019c6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019da:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019f6:	f7fe ffb7 	bl	8000968 <HAL_I2C_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8001a00:	f000 f85c 	bl	8001abc <Error_Handler>
    }
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000050 	.word	0x20000050
 8001a0c:	40005400 	.word	0x40005400
 8001a10:	000186a0 	.word	0x000186a0

08001a14 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a24      	ldr	r2, [pc, #144]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a16      	ldr	r2, [pc, #88]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001a8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a90:	2312      	movs	r3, #18
 8001a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4804      	ldr	r0, [pc, #16]	@ (8001ab8 <MX_GPIO_Init+0xa4>)
 8001aa8:	f7fe fd98 	bl	80005dc <HAL_GPIO_Init>
}
 8001aac:	bf00      	nop
 8001aae:	3728      	adds	r7, #40	@ 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020400 	.word	0x40020400

08001abc <Error_Handler>:


static void Error_Handler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7fe fb93 	bl	80001ec <BSP_LED_On>
	while (1)
 8001ac6:	bf00      	nop
 8001ac8:	e7fd      	b.n	8001ac6 <Error_Handler+0xa>
	...

08001acc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001acc:	480d      	ldr	r0, [pc, #52]	@ (8001b04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ace:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ad0:	f7fe fba6 	bl	8000220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad4:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ad6:	490d      	ldr	r1, [pc, #52]	@ (8001b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b10 <LoopForever+0xe>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aec:	4c0a      	ldr	r4, [pc, #40]	@ (8001b18 <LoopForever+0x16>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001afa:	f000 f811 	bl	8001b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001afe:	f7ff feff 	bl	8001900 <main>

08001b02 <LoopForever>:

LoopForever:
  b LoopForever
 8001b02:	e7fe      	b.n	8001b02 <LoopForever>
  ldr   r0, =_estack
 8001b04:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001b10:	08001bcc 	.word	0x08001bcc
  ldr r2, =_sbss
 8001b14:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001b18:	200000a4 	.word	0x200000a4

08001b1c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC_IRQHandler>
	...

08001b20 <__libc_init_array>:
 8001b20:	b570      	push	{r4, r5, r6, lr}
 8001b22:	4d0d      	ldr	r5, [pc, #52]	@ (8001b58 <__libc_init_array+0x38>)
 8001b24:	4c0d      	ldr	r4, [pc, #52]	@ (8001b5c <__libc_init_array+0x3c>)
 8001b26:	1b64      	subs	r4, r4, r5
 8001b28:	10a4      	asrs	r4, r4, #2
 8001b2a:	2600      	movs	r6, #0
 8001b2c:	42a6      	cmp	r6, r4
 8001b2e:	d109      	bne.n	8001b44 <__libc_init_array+0x24>
 8001b30:	4d0b      	ldr	r5, [pc, #44]	@ (8001b60 <__libc_init_array+0x40>)
 8001b32:	4c0c      	ldr	r4, [pc, #48]	@ (8001b64 <__libc_init_array+0x44>)
 8001b34:	f000 f818 	bl	8001b68 <_init>
 8001b38:	1b64      	subs	r4, r4, r5
 8001b3a:	10a4      	asrs	r4, r4, #2
 8001b3c:	2600      	movs	r6, #0
 8001b3e:	42a6      	cmp	r6, r4
 8001b40:	d105      	bne.n	8001b4e <__libc_init_array+0x2e>
 8001b42:	bd70      	pop	{r4, r5, r6, pc}
 8001b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b48:	4798      	blx	r3
 8001b4a:	3601      	adds	r6, #1
 8001b4c:	e7ee      	b.n	8001b2c <__libc_init_array+0xc>
 8001b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b52:	4798      	blx	r3
 8001b54:	3601      	adds	r6, #1
 8001b56:	e7f2      	b.n	8001b3e <__libc_init_array+0x1e>
 8001b58:	08001bc4 	.word	0x08001bc4
 8001b5c:	08001bc4 	.word	0x08001bc4
 8001b60:	08001bc4 	.word	0x08001bc4
 8001b64:	08001bc8 	.word	0x08001bc8

08001b68 <_init>:
 8001b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6a:	bf00      	nop
 8001b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b6e:	bc08      	pop	{r3}
 8001b70:	469e      	mov	lr, r3
 8001b72:	4770      	bx	lr

08001b74 <_fini>:
 8001b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b76:	bf00      	nop
 8001b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b7a:	bc08      	pop	{r3}
 8001b7c:	469e      	mov	lr, r3
 8001b7e:	4770      	bx	lr
