
TP Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cbc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001e68  08001e68  00002e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ea8  08001ea8  00003030  2**0
                  CONTENTS
  4 .ARM          00000000  08001ea8  08001ea8  00003030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ea8  08001ea8  00003030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ea8  08001ea8  00002ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001eac  08001eac  00002eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08001eb0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003030  2**0
                  CONTENTS
 10 .bss          0000007c  20000030  20000030  00003030  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  00003030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY
 13 .debug_info   000076b2  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001619  00000000  00000000  0000a712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  0000bd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000064e  00000000  00000000  0000c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f50  00000000  00000000  0000cbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab56  00000000  00000000  00031b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1e73  00000000  00000000  0003c664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e4d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002034  00000000  00000000  0011e51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00120550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000030 	.word	0x20000030
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001e50 	.word	0x08001e50

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000034 	.word	0x20000034
 80001e8:	08001e50 	.word	0x08001e50

080001ec <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b08a      	sub	sp, #40	@ 0x28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d10e      	bne.n	800021a <BSP_LED_Init+0x2e>
 80001fc:	2300      	movs	r3, #0
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	4b1f      	ldr	r3, [pc, #124]	@ (8000280 <BSP_LED_Init+0x94>)
 8000202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000204:	4a1e      	ldr	r2, [pc, #120]	@ (8000280 <BSP_LED_Init+0x94>)
 8000206:	f043 0302 	orr.w	r3, r3, #2
 800020a:	6313      	str	r3, [r2, #48]	@ 0x30
 800020c:	4b1c      	ldr	r3, [pc, #112]	@ (8000280 <BSP_LED_Init+0x94>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000210:	f003 0302 	and.w	r3, r3, #2
 8000214:	613b      	str	r3, [r7, #16]
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	e00d      	b.n	8000236 <BSP_LED_Init+0x4a>
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	4b18      	ldr	r3, [pc, #96]	@ (8000280 <BSP_LED_Init+0x94>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000222:	4a17      	ldr	r2, [pc, #92]	@ (8000280 <BSP_LED_Init+0x94>)
 8000224:	f043 0302 	orr.w	r3, r3, #2
 8000228:	6313      	str	r3, [r2, #48]	@ 0x30
 800022a:	4b15      	ldr	r3, [pc, #84]	@ (8000280 <BSP_LED_Init+0x94>)
 800022c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022e:	f003 0302 	and.w	r3, r3, #2
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4a12      	ldr	r2, [pc, #72]	@ (8000284 <BSP_LED_Init+0x98>)
 800023a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800023e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000240:	2301      	movs	r3, #1
 8000242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000244:	2300      	movs	r3, #0
 8000246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000248:	2302      	movs	r3, #2
 800024a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	4a0e      	ldr	r2, [pc, #56]	@ (8000288 <BSP_LED_Init+0x9c>)
 8000250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000254:	f107 0214 	add.w	r2, r7, #20
 8000258:	4611      	mov	r1, r2
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fac0 	bl	80007e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	4a09      	ldr	r2, [pc, #36]	@ (8000288 <BSP_LED_Init+0x9c>)
 8000264:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	4a06      	ldr	r2, [pc, #24]	@ (8000284 <BSP_LED_Init+0x98>)
 800026c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000270:	2200      	movs	r2, #0
 8000272:	4619      	mov	r1, r3
 8000274:	f000 fc78 	bl	8000b68 <HAL_GPIO_WritePin>
}
 8000278:	bf00      	nop
 800027a:	3728      	adds	r7, #40	@ 0x28
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40023800 	.word	0x40023800
 8000284:	08001e98 	.word	0x08001e98
 8000288:	20000000 	.word	0x20000000

0800028c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	4a07      	ldr	r2, [pc, #28]	@ (80002b8 <BSP_LED_On+0x2c>)
 800029a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4a06      	ldr	r2, [pc, #24]	@ (80002bc <BSP_LED_On+0x30>)
 80002a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a6:	2201      	movs	r2, #1
 80002a8:	4619      	mov	r1, r3
 80002aa:	f000 fc5d 	bl	8000b68 <HAL_GPIO_WritePin>
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000000 	.word	0x20000000
 80002bc:	08001e98 	.word	0x08001e98

080002c0 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	4a07      	ldr	r2, [pc, #28]	@ (80002ec <BSP_LED_Off+0x2c>)
 80002ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	4a06      	ldr	r2, [pc, #24]	@ (80002f0 <BSP_LED_Off+0x30>)
 80002d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002da:	2200      	movs	r2, #0
 80002dc:	4619      	mov	r1, r3
 80002de:	f000 fc43 	bl	8000b68 <HAL_GPIO_WritePin>
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000000 	.word	0x20000000
 80002f0:	08001e98 	.word	0x08001e98

080002f4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	460a      	mov	r2, r1
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	4613      	mov	r3, r2
 8000302:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000304:	2300      	movs	r3, #0
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	4b23      	ldr	r3, [pc, #140]	@ (8000398 <BSP_PB_Init+0xa4>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030c:	4a22      	ldr	r2, [pc, #136]	@ (8000398 <BSP_PB_Init+0xa4>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6313      	str	r3, [r2, #48]	@ 0x30
 8000314:	4b20      	ldr	r3, [pc, #128]	@ (8000398 <BSP_PB_Init+0xa4>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000318:	f003 0304 	and.w	r3, r3, #4
 800031c:	60bb      	str	r3, [r7, #8]
 800031e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d112      	bne.n	800034c <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800032a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800032c:	2300      	movs	r3, #0
 800032e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000330:	2302      	movs	r3, #2
 8000332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000334:	2302      	movs	r3, #2
 8000336:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	4a18      	ldr	r2, [pc, #96]	@ (800039c <BSP_PB_Init+0xa8>)
 800033c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000340:	f107 020c 	add.w	r2, r7, #12
 8000344:	4611      	mov	r1, r2
 8000346:	4618      	mov	r0, r3
 8000348:	f000 fa4a 	bl	80007e0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d11d      	bne.n	800038e <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000352:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000356:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 800035c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000360:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	4a0d      	ldr	r2, [pc, #52]	@ (800039c <BSP_PB_Init+0xa8>)
 8000366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036a:	f107 020c 	add.w	r2, r7, #12
 800036e:	4611      	mov	r1, r2
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fa35 	bl	80007e0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000376:	2328      	movs	r3, #40	@ 0x28
 8000378:	b25b      	sxtb	r3, r3
 800037a:	2200      	movs	r2, #0
 800037c:	210f      	movs	r1, #15
 800037e:	4618      	mov	r0, r3
 8000380:	f000 f9f7 	bl	8000772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000384:	2328      	movs	r3, #40	@ 0x28
 8000386:	b25b      	sxtb	r3, r3
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fa0e 	bl	80007aa <HAL_NVIC_EnableIRQ>
  }
}
 800038e:	bf00      	nop
 8000390:	3720      	adds	r7, #32
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40023800 	.word	0x40023800
 800039c:	2000000c 	.word	0x2000000c

080003a0 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	4a06      	ldr	r2, [pc, #24]	@ (80003c8 <BSP_PB_GetState+0x28>)
 80003ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003b6:	4611      	mov	r1, r2
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fbbd 	bl	8000b38 <HAL_GPIO_ReadPin>
 80003be:	4603      	mov	r3, r0
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	2000000c 	.word	0x2000000c

080003cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003d0:	4b16      	ldr	r3, [pc, #88]	@ (800042c <SystemInit+0x60>)
 80003d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003d6:	4a15      	ldr	r2, [pc, #84]	@ (800042c <SystemInit+0x60>)
 80003d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x64>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a12      	ldr	r2, [pc, #72]	@ (8000430 <SystemInit+0x64>)
 80003e6:	f043 0301 	orr.w	r3, r3, #1
 80003ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003ec:	4b10      	ldr	r3, [pc, #64]	@ (8000430 <SystemInit+0x64>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <SystemInit+0x64>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000430 <SystemInit+0x64>)
 80003f8:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80003fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000400:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000402:	4b0b      	ldr	r3, [pc, #44]	@ (8000430 <SystemInit+0x64>)
 8000404:	4a0b      	ldr	r2, [pc, #44]	@ (8000434 <SystemInit+0x68>)
 8000406:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000408:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <SystemInit+0x64>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a08      	ldr	r2, [pc, #32]	@ (8000430 <SystemInit+0x64>)
 800040e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000412:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <SystemInit+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800041a:	4b04      	ldr	r3, [pc, #16]	@ (800042c <SystemInit+0x60>)
 800041c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000420:	609a      	str	r2, [r3, #8]
#endif
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	e000ed00 	.word	0xe000ed00
 8000430:	40023800 	.word	0x40023800
 8000434:	24003010 	.word	0x24003010

08000438 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800044a:	bf00      	nop
 800044c:	e7fd      	b.n	800044a <HardFault_Handler+0x4>

0800044e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000452:	bf00      	nop
 8000454:	e7fd      	b.n	8000452 <MemManage_Handler+0x4>

08000456 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800045a:	bf00      	nop
 800045c:	e7fd      	b.n	800045a <BusFault_Handler+0x4>

0800045e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000462:	bf00      	nop
 8000464:	e7fd      	b.n	8000462 <UsageFault_Handler+0x4>

08000466 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000494:	f000 f84e 	bl	8000534 <HAL_IncTick>
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004a0:	4b0b      	ldr	r3, [pc, #44]	@ (80004d0 <HAL_Init+0x34>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0a      	ldr	r2, [pc, #40]	@ (80004d0 <HAL_Init+0x34>)
 80004a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004aa:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ac:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <HAL_Init+0x34>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a07      	ldr	r2, [pc, #28]	@ (80004d0 <HAL_Init+0x34>)
 80004b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b8:	2003      	movs	r0, #3
 80004ba:	f000 f94f 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004be:	200f      	movs	r0, #15
 80004c0:	f000 f808 	bl	80004d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004c4:	f001 f8ed 	bl	80016a2 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40023c00 	.word	0x40023c00

080004d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004dc:	4b12      	ldr	r3, [pc, #72]	@ (8000528 <HAL_InitTick+0x54>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b12      	ldr	r3, [pc, #72]	@ (800052c <HAL_InitTick+0x58>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	4619      	mov	r1, r3
 80004e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80004ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f967 	bl	80007c6 <HAL_SYSTICK_Config>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004fe:	2301      	movs	r3, #1
 8000500:	e00e      	b.n	8000520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b0f      	cmp	r3, #15
 8000506:	d80a      	bhi.n	800051e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000508:	2200      	movs	r2, #0
 800050a:	6879      	ldr	r1, [r7, #4]
 800050c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000510:	f000 f92f 	bl	8000772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000514:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <HAL_InitTick+0x5c>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800051a:	2300      	movs	r3, #0
 800051c:	e000      	b.n	8000520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800051e:	2301      	movs	r3, #1
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000010 	.word	0x20000010
 800052c:	20000018 	.word	0x20000018
 8000530:	20000014 	.word	0x20000014

08000534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <HAL_IncTick+0x20>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <HAL_IncTick+0x24>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4413      	add	r3, r2
 8000544:	4a04      	ldr	r2, [pc, #16]	@ (8000558 <HAL_IncTick+0x24>)
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000018 	.word	0x20000018
 8000558:	2000004c 	.word	0x2000004c

0800055c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return uwTick;
 8000560:	4b03      	ldr	r3, [pc, #12]	@ (8000570 <HAL_GetTick+0x14>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	2000004c 	.word	0x2000004c

08000574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff ffee 	bl	800055c <HAL_GetTick>
 8000580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800058c:	d005      	beq.n	800059a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800058e:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <HAL_Delay+0x44>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4413      	add	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059a:	bf00      	nop
 800059c:	f7ff ffde 	bl	800055c <HAL_GetTick>
 80005a0:	4602      	mov	r2, r0
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d8f7      	bhi.n	800059c <HAL_Delay+0x28>
  {
  }
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000018 	.word	0x20000018

080005bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ee:	4a04      	ldr	r2, [pc, #16]	@ (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	60d3      	str	r3, [r2, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000608:	4b04      	ldr	r3, [pc, #16]	@ (800061c <__NVIC_GetPriorityGrouping+0x18>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	f003 0307 	and.w	r3, r3, #7
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db0b      	blt.n	800064a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 021f 	and.w	r2, r3, #31
 8000638:	4907      	ldr	r1, [pc, #28]	@ (8000658 <__NVIC_EnableIRQ+0x38>)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	095b      	lsrs	r3, r3, #5
 8000640:	2001      	movs	r0, #1
 8000642:	fa00 f202 	lsl.w	r2, r0, r2
 8000646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000e100 	.word	0xe000e100

0800065c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	db0a      	blt.n	8000686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	b2da      	uxtb	r2, r3
 8000674:	490c      	ldr	r1, [pc, #48]	@ (80006a8 <__NVIC_SetPriority+0x4c>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	0112      	lsls	r2, r2, #4
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	440b      	add	r3, r1
 8000680:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000684:	e00a      	b.n	800069c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4908      	ldr	r1, [pc, #32]	@ (80006ac <__NVIC_SetPriority+0x50>)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	f003 030f 	and.w	r3, r3, #15
 8000692:	3b04      	subs	r3, #4
 8000694:	0112      	lsls	r2, r2, #4
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	440b      	add	r3, r1
 800069a:	761a      	strb	r2, [r3, #24]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000e100 	.word	0xe000e100
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b089      	sub	sp, #36	@ 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	f1c3 0307 	rsb	r3, r3, #7
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	bf28      	it	cs
 80006ce:	2304      	movcs	r3, #4
 80006d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3304      	adds	r3, #4
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d902      	bls.n	80006e0 <NVIC_EncodePriority+0x30>
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3b03      	subs	r3, #3
 80006de:	e000      	b.n	80006e2 <NVIC_EncodePriority+0x32>
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	43da      	mvns	r2, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	401a      	ands	r2, r3
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	43d9      	mvns	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	4313      	orrs	r3, r2
         );
}
 800070a:	4618      	mov	r0, r3
 800070c:	3724      	adds	r7, #36	@ 0x24
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000728:	d301      	bcc.n	800072e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072a:	2301      	movs	r3, #1
 800072c:	e00f      	b.n	800074e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072e:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <SysTick_Config+0x40>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000736:	210f      	movs	r1, #15
 8000738:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800073c:	f7ff ff8e 	bl	800065c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <SysTick_Config+0x40>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000746:	4b04      	ldr	r3, [pc, #16]	@ (8000758 <SysTick_Config+0x40>)
 8000748:	2207      	movs	r2, #7
 800074a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010

0800075c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ff29 	bl	80005bc <__NVIC_SetPriorityGrouping>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000772:	b580      	push	{r7, lr}
 8000774:	b086      	sub	sp, #24
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000784:	f7ff ff3e 	bl	8000604 <__NVIC_GetPriorityGrouping>
 8000788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	6978      	ldr	r0, [r7, #20]
 8000790:	f7ff ff8e 	bl	80006b0 <NVIC_EncodePriority>
 8000794:	4602      	mov	r2, r0
 8000796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff5d 	bl	800065c <__NVIC_SetPriority>
}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff31 	bl	8000620 <__NVIC_EnableIRQ>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ffa2 	bl	8000718 <SysTick_Config>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b089      	sub	sp, #36	@ 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
 80007fa:	e177      	b.n	8000aec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007fc:	2201      	movs	r2, #1
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	429a      	cmp	r2, r3
 8000816:	f040 8166 	bne.w	8000ae6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f003 0303 	and.w	r3, r3, #3
 8000822:	2b01      	cmp	r3, #1
 8000824:	d005      	beq.n	8000832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800082e:	2b02      	cmp	r3, #2
 8000830:	d130      	bne.n	8000894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	2203      	movs	r2, #3
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	4013      	ands	r3, r2
 8000848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	68da      	ldr	r2, [r3, #12]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	69ba      	ldr	r2, [r7, #24]
 8000858:	4313      	orrs	r3, r2
 800085a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000868:	2201      	movs	r2, #1
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	69ba      	ldr	r2, [r7, #24]
 8000874:	4013      	ands	r3, r2
 8000876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	091b      	lsrs	r3, r3, #4
 800087e:	f003 0201 	and.w	r2, r3, #1
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	4313      	orrs	r3, r2
 800088c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 0303 	and.w	r3, r3, #3
 800089c:	2b03      	cmp	r3, #3
 800089e:	d017      	beq.n	80008d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	2203      	movs	r2, #3
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4013      	ands	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0303 	and.w	r3, r3, #3
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d123      	bne.n	8000924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3208      	adds	r2, #8
 80008e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	f003 0307 	and.w	r3, r3, #7
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	220f      	movs	r2, #15
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	691a      	ldr	r2, [r3, #16]
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4313      	orrs	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	08da      	lsrs	r2, r3, #3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3208      	adds	r2, #8
 800091e:	69b9      	ldr	r1, [r7, #24]
 8000920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 0203 	and.w	r2, r3, #3
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4313      	orrs	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000960:	2b00      	cmp	r3, #0
 8000962:	f000 80c0 	beq.w	8000ae6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b66      	ldr	r3, [pc, #408]	@ (8000b04 <HAL_GPIO_Init+0x324>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	4a65      	ldr	r2, [pc, #404]	@ (8000b04 <HAL_GPIO_Init+0x324>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000974:	6453      	str	r3, [r2, #68]	@ 0x44
 8000976:	4b63      	ldr	r3, [pc, #396]	@ (8000b04 <HAL_GPIO_Init+0x324>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000982:	4a61      	ldr	r2, [pc, #388]	@ (8000b08 <HAL_GPIO_Init+0x328>)
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	3302      	adds	r3, #2
 800098a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	220f      	movs	r2, #15
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4013      	ands	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a58      	ldr	r2, [pc, #352]	@ (8000b0c <HAL_GPIO_Init+0x32c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d037      	beq.n	8000a1e <HAL_GPIO_Init+0x23e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a57      	ldr	r2, [pc, #348]	@ (8000b10 <HAL_GPIO_Init+0x330>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d031      	beq.n	8000a1a <HAL_GPIO_Init+0x23a>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a56      	ldr	r2, [pc, #344]	@ (8000b14 <HAL_GPIO_Init+0x334>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d02b      	beq.n	8000a16 <HAL_GPIO_Init+0x236>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a55      	ldr	r2, [pc, #340]	@ (8000b18 <HAL_GPIO_Init+0x338>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d025      	beq.n	8000a12 <HAL_GPIO_Init+0x232>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a54      	ldr	r2, [pc, #336]	@ (8000b1c <HAL_GPIO_Init+0x33c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d01f      	beq.n	8000a0e <HAL_GPIO_Init+0x22e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a53      	ldr	r2, [pc, #332]	@ (8000b20 <HAL_GPIO_Init+0x340>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d019      	beq.n	8000a0a <HAL_GPIO_Init+0x22a>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a52      	ldr	r2, [pc, #328]	@ (8000b24 <HAL_GPIO_Init+0x344>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d013      	beq.n	8000a06 <HAL_GPIO_Init+0x226>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a51      	ldr	r2, [pc, #324]	@ (8000b28 <HAL_GPIO_Init+0x348>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d00d      	beq.n	8000a02 <HAL_GPIO_Init+0x222>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a50      	ldr	r2, [pc, #320]	@ (8000b2c <HAL_GPIO_Init+0x34c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d007      	beq.n	80009fe <HAL_GPIO_Init+0x21e>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4f      	ldr	r2, [pc, #316]	@ (8000b30 <HAL_GPIO_Init+0x350>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_GPIO_Init+0x21a>
 80009f6:	2309      	movs	r3, #9
 80009f8:	e012      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 80009fa:	230a      	movs	r3, #10
 80009fc:	e010      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 80009fe:	2308      	movs	r3, #8
 8000a00:	e00e      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a02:	2307      	movs	r3, #7
 8000a04:	e00c      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a06:	2306      	movs	r3, #6
 8000a08:	e00a      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	e008      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a0e:	2304      	movs	r3, #4
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a12:	2303      	movs	r3, #3
 8000a14:	e004      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e002      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	f002 0203 	and.w	r2, r2, #3
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a30:	4935      	ldr	r1, [pc, #212]	@ (8000b08 <HAL_GPIO_Init+0x328>)
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3302      	adds	r3, #2
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b34 <HAL_GPIO_Init+0x354>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	43db      	mvns	r3, r3
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a62:	4a34      	ldr	r2, [pc, #208]	@ (8000b34 <HAL_GPIO_Init+0x354>)
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a68:	4b32      	ldr	r3, [pc, #200]	@ (8000b34 <HAL_GPIO_Init+0x354>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a8c:	4a29      	ldr	r2, [pc, #164]	@ (8000b34 <HAL_GPIO_Init+0x354>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a92:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <HAL_GPIO_Init+0x354>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b34 <HAL_GPIO_Init+0x354>)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <HAL_GPIO_Init+0x354>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae0:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <HAL_GPIO_Init+0x354>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	f67f ae84 	bls.w	80007fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3724      	adds	r7, #36	@ 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40013800 	.word	0x40013800
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	40020400 	.word	0x40020400
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020c00 	.word	0x40020c00
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40021400 	.word	0x40021400
 8000b24:	40021800 	.word	0x40021800
 8000b28:	40021c00 	.word	0x40021c00
 8000b2c:	40022000 	.word	0x40022000
 8000b30:	40022400 	.word	0x40022400
 8000b34:	40013c00 	.word	0x40013c00

08000b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	691a      	ldr	r2, [r3, #16]
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	e001      	b.n	8000b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b78:	787b      	ldrb	r3, [r7, #1]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b84:	e003      	b.n	8000b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b86:	887b      	ldrh	r3, [r7, #2]
 8000b88:	041a      	lsls	r2, r3, #16
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	619a      	str	r2, [r3, #24]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e12b      	b.n	8000e06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d106      	bne.n	8000bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f000 f92e 	bl	8000e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2224      	movs	r2, #36	@ 0x24
 8000bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f022 0201 	bic.w	r2, r2, #1
 8000bde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000bee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000bfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c00:	f000 fd62 	bl	80016c8 <HAL_RCC_GetPCLK1Freq>
 8000c04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	4a81      	ldr	r2, [pc, #516]	@ (8000e10 <HAL_I2C_Init+0x274>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d807      	bhi.n	8000c20 <HAL_I2C_Init+0x84>
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4a80      	ldr	r2, [pc, #512]	@ (8000e14 <HAL_I2C_Init+0x278>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	bf94      	ite	ls
 8000c18:	2301      	movls	r3, #1
 8000c1a:	2300      	movhi	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	e006      	b.n	8000c2e <HAL_I2C_Init+0x92>
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4a7d      	ldr	r2, [pc, #500]	@ (8000e18 <HAL_I2C_Init+0x27c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	bf94      	ite	ls
 8000c28:	2301      	movls	r3, #1
 8000c2a:	2300      	movhi	r3, #0
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e0e7      	b.n	8000e06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4a78      	ldr	r2, [pc, #480]	@ (8000e1c <HAL_I2C_Init+0x280>)
 8000c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3e:	0c9b      	lsrs	r3, r3, #18
 8000c40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68ba      	ldr	r2, [r7, #8]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	4a6a      	ldr	r2, [pc, #424]	@ (8000e10 <HAL_I2C_Init+0x274>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d802      	bhi.n	8000c70 <HAL_I2C_Init+0xd4>
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	e009      	b.n	8000c84 <HAL_I2C_Init+0xe8>
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000c76:	fb02 f303 	mul.w	r3, r2, r3
 8000c7a:	4a69      	ldr	r2, [pc, #420]	@ (8000e20 <HAL_I2C_Init+0x284>)
 8000c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c80:	099b      	lsrs	r3, r3, #6
 8000c82:	3301      	adds	r3, #1
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	6812      	ldr	r2, [r2, #0]
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000c96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	495c      	ldr	r1, [pc, #368]	@ (8000e10 <HAL_I2C_Init+0x274>)
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d819      	bhi.n	8000cd8 <HAL_I2C_Init+0x13c>
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	1e59      	subs	r1, r3, #1
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cb2:	1c59      	adds	r1, r3, #1
 8000cb4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000cb8:	400b      	ands	r3, r1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00a      	beq.n	8000cd4 <HAL_I2C_Init+0x138>
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	1e59      	subs	r1, r3, #1
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ccc:	3301      	adds	r3, #1
 8000cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd2:	e051      	b.n	8000d78 <HAL_I2C_Init+0x1dc>
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	e04f      	b.n	8000d78 <HAL_I2C_Init+0x1dc>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d111      	bne.n	8000d04 <HAL_I2C_Init+0x168>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	1e58      	subs	r0, r3, #1
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6859      	ldr	r1, [r3, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	440b      	add	r3, r1
 8000cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf0c      	ite	eq
 8000cfc:	2301      	moveq	r3, #1
 8000cfe:	2300      	movne	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	e012      	b.n	8000d2a <HAL_I2C_Init+0x18e>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	1e58      	subs	r0, r3, #1
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6859      	ldr	r1, [r3, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	0099      	lsls	r1, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf0c      	ite	eq
 8000d24:	2301      	moveq	r3, #1
 8000d26:	2300      	movne	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_I2C_Init+0x196>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e022      	b.n	8000d78 <HAL_I2C_Init+0x1dc>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10e      	bne.n	8000d58 <HAL_I2C_Init+0x1bc>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	1e58      	subs	r0, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6859      	ldr	r1, [r3, #4]
 8000d42:	460b      	mov	r3, r1
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	440b      	add	r3, r1
 8000d48:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d56:	e00f      	b.n	8000d78 <HAL_I2C_Init+0x1dc>
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	1e58      	subs	r0, r3, #1
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6859      	ldr	r1, [r3, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	0099      	lsls	r1, r3, #2
 8000d68:	440b      	add	r3, r1
 8000d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	6809      	ldr	r1, [r1, #0]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69da      	ldr	r2, [r3, #28]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a1b      	ldr	r3, [r3, #32]
 8000d92:	431a      	orrs	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000da6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6911      	ldr	r1, [r2, #16]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68d2      	ldr	r2, [r2, #12]
 8000db2:	4311      	orrs	r1, r2
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	430b      	orrs	r3, r1
 8000dba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695a      	ldr	r2, [r3, #20]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0201 	orr.w	r2, r2, #1
 8000de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2220      	movs	r2, #32
 8000df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	000186a0 	.word	0x000186a0
 8000e14:	001e847f 	.word	0x001e847f
 8000e18:	003d08ff 	.word	0x003d08ff
 8000e1c:	431bde83 	.word	0x431bde83
 8000e20:	10624dd3 	.word	0x10624dd3

08000e24 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	461a      	mov	r2, r3
 8000e44:	460b      	mov	r3, r1
 8000e46:	817b      	strh	r3, [r7, #10]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff fb86 	bl	800055c <HAL_GetTick>
 8000e50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b20      	cmp	r3, #32
 8000e5c:	f040 80e0 	bne.w	8001020 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2319      	movs	r3, #25
 8000e66:	2201      	movs	r2, #1
 8000e68:	4970      	ldr	r1, [pc, #448]	@ (800102c <HAL_I2C_Master_Transmit+0x1f4>)
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f000 fa92 	bl	8001394 <I2C_WaitOnFlagUntilTimeout>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000e76:	2302      	movs	r3, #2
 8000e78:	e0d3      	b.n	8001022 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d101      	bne.n	8000e88 <HAL_I2C_Master_Transmit+0x50>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e0cc      	b.n	8001022 <HAL_I2C_Master_Transmit+0x1ea>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d007      	beq.n	8000eae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 0201 	orr.w	r2, r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000ebc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2221      	movs	r2, #33	@ 0x21
 8000ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2210      	movs	r2, #16
 8000eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	893a      	ldrh	r2, [r7, #8]
 8000ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4a50      	ldr	r2, [pc, #320]	@ (8001030 <HAL_I2C_Master_Transmit+0x1f8>)
 8000eee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000ef0:	8979      	ldrh	r1, [r7, #10]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	6a3a      	ldr	r2, [r7, #32]
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f000 f9ca 	bl	8001290 <I2C_MasterRequestWrite>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e08d      	b.n	8001022 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000f1c:	e066      	b.n	8000fec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	6a39      	ldr	r1, [r7, #32]
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 fb0c 	bl	8001540 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00d      	beq.n	8000f4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d107      	bne.n	8000f46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e06b      	b.n	8001022 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	3b01      	subs	r3, #1
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f72:	3b01      	subs	r3, #1
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d11b      	bne.n	8000fc0 <HAL_I2C_Master_Transmit+0x188>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d017      	beq.n	8000fc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	3b01      	subs	r3, #1
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	6a39      	ldr	r1, [r7, #32]
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f000 fafc 	bl	80015c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00d      	beq.n	8000fec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d107      	bne.n	8000fe8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000fe6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e01a      	b.n	8001022 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d194      	bne.n	8000f1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2220      	movs	r2, #32
 8001008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	e000      	b.n	8001022 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001020:	2302      	movs	r3, #2
  }
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	00100002 	.word	0x00100002
 8001030:	ffff0000 	.word	0xffff0000

08001034 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af02      	add	r7, sp, #8
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	460b      	mov	r3, r1
 8001042:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff fa8a 	bl	800055c <HAL_GetTick>
 8001048:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800104a:	2301      	movs	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b20      	cmp	r3, #32
 8001058:	f040 8111 	bne.w	800127e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2319      	movs	r3, #25
 8001062:	2201      	movs	r2, #1
 8001064:	4988      	ldr	r1, [pc, #544]	@ (8001288 <HAL_I2C_IsDeviceReady+0x254>)
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 f994 	bl	8001394 <I2C_WaitOnFlagUntilTimeout>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001072:	2302      	movs	r3, #2
 8001074:	e104      	b.n	8001280 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <HAL_I2C_IsDeviceReady+0x50>
 8001080:	2302      	movs	r3, #2
 8001082:	e0fd      	b.n	8001280 <HAL_I2C_IsDeviceReady+0x24c>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b01      	cmp	r3, #1
 8001098:	d007      	beq.n	80010aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0201 	orr.w	r2, r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2224      	movs	r2, #36	@ 0x24
 80010be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4a70      	ldr	r2, [pc, #448]	@ (800128c <HAL_I2C_IsDeviceReady+0x258>)
 80010cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f000 f952 	bl	8001394 <I2C_WaitOnFlagUntilTimeout>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00d      	beq.n	8001112 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001104:	d103      	bne.n	800110e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800110c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e0b6      	b.n	8001280 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001112:	897b      	ldrh	r3, [r7, #10]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001120:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001122:	f7ff fa1b 	bl	800055c <HAL_GetTick>
 8001126:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b02      	cmp	r3, #2
 8001134:	bf0c      	ite	eq
 8001136:	2301      	moveq	r3, #1
 8001138:	2300      	movne	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114c:	bf0c      	ite	eq
 800114e:	2301      	moveq	r3, #1
 8001150:	2300      	movne	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001156:	e025      	b.n	80011a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001158:	f7ff fa00 	bl	800055c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d302      	bcc.n	800116e <HAL_I2C_IsDeviceReady+0x13a>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d103      	bne.n	8001176 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	22a0      	movs	r2, #160	@ 0xa0
 8001172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b02      	cmp	r3, #2
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80011ae:	d005      	beq.n	80011bc <HAL_I2C_IsDeviceReady+0x188>
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <HAL_I2C_IsDeviceReady+0x188>
 80011b6:	7dbb      	ldrb	r3, [r7, #22]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0cd      	beq.n	8001158 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2220      	movs	r2, #32
 80011c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d129      	bne.n	8001226 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2319      	movs	r3, #25
 80011fe:	2201      	movs	r2, #1
 8001200:	4921      	ldr	r1, [pc, #132]	@ (8001288 <HAL_I2C_IsDeviceReady+0x254>)
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f000 f8c6 	bl	8001394 <I2C_WaitOnFlagUntilTimeout>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e036      	b.n	8001280 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2220      	movs	r2, #32
 8001216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e02c      	b.n	8001280 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001234:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800123e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2319      	movs	r3, #25
 8001246:	2201      	movs	r2, #1
 8001248:	490f      	ldr	r1, [pc, #60]	@ (8001288 <HAL_I2C_IsDeviceReady+0x254>)
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 f8a2 	bl	8001394 <I2C_WaitOnFlagUntilTimeout>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e012      	b.n	8001280 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	3301      	adds	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	f4ff af32 	bcc.w	80010ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2220      	movs	r2, #32
 800126e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800127e:	2302      	movs	r3, #2
  }
}
 8001280:	4618      	mov	r0, r3
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	00100002 	.word	0x00100002
 800128c:	ffff0000 	.word	0xffff0000

08001290 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af02      	add	r7, sp, #8
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	460b      	mov	r3, r1
 800129e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d006      	beq.n	80012ba <I2C_MasterRequestWrite+0x2a>
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d003      	beq.n	80012ba <I2C_MasterRequestWrite+0x2a>
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80012b8:	d108      	bne.n	80012cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e00b      	b.n	80012e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	2b12      	cmp	r3, #18
 80012d2:	d107      	bne.n	80012e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 f84f 	bl	8001394 <I2C_WaitOnFlagUntilTimeout>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00d      	beq.n	8001318 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800130a:	d103      	bne.n	8001314 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001312:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e035      	b.n	8001384 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001320:	d108      	bne.n	8001334 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001322:	897b      	ldrh	r3, [r7, #10]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	e01b      	b.n	800136c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001334:	897b      	ldrh	r3, [r7, #10]
 8001336:	11db      	asrs	r3, r3, #7
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f003 0306 	and.w	r3, r3, #6
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f063 030f 	orn	r3, r3, #15
 8001344:	b2da      	uxtb	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	490e      	ldr	r1, [pc, #56]	@ (800138c <I2C_MasterRequestWrite+0xfc>)
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f875 	bl	8001442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e010      	b.n	8001384 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001362:	897b      	ldrh	r3, [r7, #10]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4907      	ldr	r1, [pc, #28]	@ (8001390 <I2C_MasterRequestWrite+0x100>)
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f000 f865 	bl	8001442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	00010008 	.word	0x00010008
 8001390:	00010002 	.word	0x00010002

08001394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013a4:	e025      	b.n	80013f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013ac:	d021      	beq.n	80013f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ae:	f7ff f8d5 	bl	800055c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d302      	bcc.n	80013c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d116      	bne.n	80013f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2220      	movs	r2, #32
 80013ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f043 0220 	orr.w	r2, r3, #32
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e023      	b.n	800143a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	0c1b      	lsrs	r3, r3, #16
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10d      	bne.n	8001418 <I2C_WaitOnFlagUntilTimeout+0x84>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4013      	ands	r3, r2
 8001408:	b29b      	uxth	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf0c      	ite	eq
 800140e:	2301      	moveq	r3, #1
 8001410:	2300      	movne	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	e00c      	b.n	8001432 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4013      	ands	r3, r2
 8001424:	b29b      	uxth	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	429a      	cmp	r2, r3
 8001436:	d0b6      	beq.n	80013a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001450:	e051      	b.n	80014f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800145c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001460:	d123      	bne.n	80014aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001470:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800147a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2220      	movs	r2, #32
 8001486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f043 0204 	orr.w	r2, r3, #4
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e046      	b.n	8001538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014b0:	d021      	beq.n	80014f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014b2:	f7ff f853 	bl	800055c <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d302      	bcc.n	80014c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d116      	bne.n	80014f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2220      	movs	r2, #32
 80014d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f043 0220 	orr.w	r2, r3, #32
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e020      	b.n	8001538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	0c1b      	lsrs	r3, r3, #16
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d10c      	bne.n	800151a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4013      	ands	r3, r2
 800150c:	b29b      	uxth	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	bf14      	ite	ne
 8001512:	2301      	movne	r3, #1
 8001514:	2300      	moveq	r3, #0
 8001516:	b2db      	uxtb	r3, r3
 8001518:	e00b      	b.n	8001532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	43da      	mvns	r2, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	4013      	ands	r3, r2
 8001526:	b29b      	uxth	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf14      	ite	ne
 800152c:	2301      	movne	r3, #1
 800152e:	2300      	moveq	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d18d      	bne.n	8001452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800154c:	e02d      	b.n	80015aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 f878 	bl	8001644 <I2C_IsAcknowledgeFailed>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e02d      	b.n	80015ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001564:	d021      	beq.n	80015aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001566:	f7fe fff9 	bl	800055c <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	429a      	cmp	r2, r3
 8001574:	d302      	bcc.n	800157c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d116      	bne.n	80015aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2220      	movs	r2, #32
 8001586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f043 0220 	orr.w	r2, r3, #32
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e007      	b.n	80015ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015b4:	2b80      	cmp	r3, #128	@ 0x80
 80015b6:	d1ca      	bne.n	800154e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80015ce:	e02d      	b.n	800162c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 f837 	bl	8001644 <I2C_IsAcknowledgeFailed>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e02d      	b.n	800163c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015e6:	d021      	beq.n	800162c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015e8:	f7fe ffb8 	bl	800055c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d302      	bcc.n	80015fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d116      	bne.n	800162c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2220      	movs	r2, #32
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	f043 0220 	orr.w	r2, r3, #32
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e007      	b.n	800163c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	2b04      	cmp	r3, #4
 8001638:	d1ca      	bne.n	80015d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800165a:	d11b      	bne.n	8001694 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001664:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	f043 0204 	orr.w	r2, r3, #4
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000010 	.word	0x20000010

080016c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016cc:	f7ff fff0 	bl	80016b0 <HAL_RCC_GetHCLKFreq>
 80016d0:	4602      	mov	r2, r0
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	0a9b      	lsrs	r3, r3, #10
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	4903      	ldr	r1, [pc, #12]	@ (80016ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80016de:	5ccb      	ldrb	r3, [r1, r3]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	08001ea0 	.word	0x08001ea0

080016f0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80016fa:	4a2f      	ldr	r2, [pc, #188]	@ (80017b8 <HD44780_Init+0xc8>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	7013      	strb	r3, [r2, #0]
  dpBacklight = LCD_BACKLIGHT;
 8001700:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <HD44780_Init+0xcc>)
 8001702:	2208      	movs	r2, #8
 8001704:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8001706:	4b2e      	ldr	r3, [pc, #184]	@ (80017c0 <HD44780_Init+0xd0>)
 8001708:	2208      	movs	r2, #8
 800170a:	701a      	strb	r2, [r3, #0]


  /* Wait for initialization */
  DelayInit();
 800170c:	f000 f9c0 	bl	8001a90 <DelayInit>
  HAL_Delay(50);
 8001710:	2032      	movs	r0, #50	@ 0x32
 8001712:	f7fe ff2f 	bl	8000574 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001716:	4b29      	ldr	r3, [pc, #164]	@ (80017bc <HD44780_Init+0xcc>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f97e 	bl	8001a1c <ExpanderWrite>
  HAL_Delay(1000);
 8001720:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001724:	f7fe ff26 	bl	8000574 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001728:	2030      	movs	r0, #48	@ 0x30
 800172a:	f000 f965 	bl	80019f8 <Write4Bits>
  DelayUS(4500);
 800172e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001732:	f000 f9d7 	bl	8001ae4 <DelayUS>

  Write4Bits(0x03 << 4);
 8001736:	2030      	movs	r0, #48	@ 0x30
 8001738:	f000 f95e 	bl	80019f8 <Write4Bits>
  DelayUS(4500);
 800173c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001740:	f000 f9d0 	bl	8001ae4 <DelayUS>

  Write4Bits(0x03 << 4);
 8001744:	2030      	movs	r0, #48	@ 0x30
 8001746:	f000 f957 	bl	80019f8 <Write4Bits>
  DelayUS(4500);
 800174a:	f241 1094 	movw	r0, #4500	@ 0x1194
 800174e:	f000 f9c9 	bl	8001ae4 <DelayUS>

  Write4Bits(0x02 << 4);
 8001752:	2020      	movs	r0, #32
 8001754:	f000 f950 	bl	80019f8 <Write4Bits>
  DelayUS(100);
 8001758:	2064      	movs	r0, #100	@ 0x64
 800175a:	f000 f9c3 	bl	8001ae4 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800175e:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <HD44780_Init+0xd0>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	f043 0320 	orr.w	r3, r3, #32
 8001766:	b2db      	uxtb	r3, r3
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f908 	bl	800197e <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <HD44780_Init+0xd4>)
 8001770:	2204      	movs	r2, #4
 8001772:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001774:	f000 f876 	bl	8001864 <HD44780_Display>
  HD44780_Clear();
 8001778:	f000 f82c 	bl	80017d4 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HD44780_Init+0xd8>)
 800177e:	2202      	movs	r2, #2
 8001780:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <HD44780_Init+0xd8>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f8f6 	bl	800197e <SendCommand>
  DelayUS(4500);
 8001792:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001796:	f000 f9a5 	bl	8001ae4 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800179a:	490c      	ldr	r1, [pc, #48]	@ (80017cc <HD44780_Init+0xdc>)
 800179c:	2000      	movs	r0, #0
 800179e:	f000 f8a3 	bl	80018e8 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80017a2:	490b      	ldr	r1, [pc, #44]	@ (80017d0 <HD44780_Init+0xe0>)
 80017a4:	2001      	movs	r0, #1
 80017a6:	f000 f89f 	bl	80018e8 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80017aa:	f000 f81e 	bl	80017ea <HD44780_Home>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000053 	.word	0x20000053
 80017bc:	20000054 	.word	0x20000054
 80017c0:	20000050 	.word	0x20000050
 80017c4:	20000051 	.word	0x20000051
 80017c8:	20000052 	.word	0x20000052
 80017cc:	2000001c 	.word	0x2000001c
 80017d0:	20000024 	.word	0x20000024

080017d4 <HD44780_Clear>:

void HD44780_Clear()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80017d8:	2001      	movs	r0, #1
 80017da:	f000 f8d0 	bl	800197e <SendCommand>
  DelayUS(2000);
 80017de:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017e2:	f000 f97f 	bl	8001ae4 <DelayUS>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HD44780_Home>:

void HD44780_Home()
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80017ee:	2002      	movs	r0, #2
 80017f0:	f000 f8c5 	bl	800197e <SendCommand>
  DelayUS(2000);
 80017f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017f8:	f000 f974 	bl	8001ae4 <DelayUS>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	460a      	mov	r2, r1
 800180a:	71fb      	strb	r3, [r7, #7]
 800180c:	4613      	mov	r3, r2
 800180e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HD44780_SetCursor+0x5c>)
 8001812:	f107 0408 	add.w	r4, r7, #8
 8001816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800181c:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <HD44780_SetCursor+0x60>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	79ba      	ldrb	r2, [r7, #6]
 8001822:	429a      	cmp	r2, r3
 8001824:	d303      	bcc.n	800182e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HD44780_SetCursor+0x60>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	3b01      	subs	r3, #1
 800182c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800182e:	79bb      	ldrb	r3, [r7, #6]
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	3318      	adds	r3, #24
 8001834:	443b      	add	r3, r7
 8001836:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4413      	add	r3, r2
 8001840:	b2db      	uxtb	r3, r3
 8001842:	b25b      	sxtb	r3, r3
 8001844:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001848:	b25b      	sxtb	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f896 	bl	800197e <SendCommand>
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd90      	pop	{r4, r7, pc}
 800185a:	bf00      	nop
 800185c:	08001e68 	.word	0x08001e68
 8001860:	20000053 	.word	0x20000053

08001864 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <HD44780_Display+0x28>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HD44780_Display+0x28>)
 8001874:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HD44780_Display+0x28>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	f043 0308 	orr.w	r3, r3, #8
 800187e:	b2db      	uxtb	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f87c 	bl	800197e <SendCommand>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000051 	.word	0x20000051

08001890 <HD44780_Cursor>:
  dpControl &= ~LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Cursor()
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <HD44780_Cursor+0x28>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HD44780_Cursor+0x28>)
 80018a0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HD44780_Cursor+0x28>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f866 	bl	800197e <SendCommand>
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000051 	.word	0x20000051

080018bc <HD44780_Blink>:
  dpControl &= ~LCD_BLINKON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Blink()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HD44780_Blink+0x28>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HD44780_Blink+0x28>)
 80018cc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HD44780_Blink+0x28>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f850 	bl	800197e <SendCommand>
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000051 	.word	0x20000051

080018e8 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	b25b      	sxtb	r3, r3
 8001902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001906:	b25b      	sxtb	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f837 	bl	800197e <SendCommand>
  for (int i=0; i<8; i++)
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e009      	b.n	800192a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	4413      	add	r3, r2
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f83b 	bl	800199a <SendChar>
  for (int i=0; i<8; i++)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3301      	adds	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b07      	cmp	r3, #7
 800192e:	ddf2      	ble.n	8001916 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f827 	bl	800199a <SendChar>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800195c:	e006      	b.n	800196c <HD44780_PrintStr+0x18>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f817 	bl	800199a <SendChar>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f4      	bne.n	800195e <HD44780_PrintStr+0xa>
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f812 	bl	80019b6 <Send>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <SendChar>:

static void SendChar(uint8_t ch)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f804 	bl	80019b6 <Send>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	460a      	mov	r2, r1
 80019c0:	71fb      	strb	r3, [r7, #7]
 80019c2:	4613      	mov	r3, r2
 80019c4:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f023 030f 	bic.w	r3, r3, #15
 80019cc:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	79bb      	ldrb	r3, [r7, #6]
 80019d8:	4313      	orrs	r3, r2
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 f80b 	bl	80019f8 <Write4Bits>
  Write4Bits((lownib)|mode);
 80019e2:	7bba      	ldrb	r2, [r7, #14]
 80019e4:	79bb      	ldrb	r3, [r7, #6]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f804 	bl	80019f8 <Write4Bits>
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 f809 	bl	8001a1c <ExpanderWrite>
  PulseEnable(value);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f821 	bl	8001a54 <PulseEnable>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <ExpanderWrite+0x30>)
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001a32:	f107 020f 	add.w	r2, r7, #15
 8001a36:	230a      	movs	r3, #10
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	214e      	movs	r1, #78	@ 0x4e
 8001a3e:	4804      	ldr	r0, [pc, #16]	@ (8001a50 <ExpanderWrite+0x34>)
 8001a40:	f7ff f9fa 	bl	8000e38 <HAL_I2C_Master_Transmit>
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000054 	.word	0x20000054
 8001a50:	20000058 	.word	0x20000058

08001a54 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ffd8 	bl	8001a1c <ExpanderWrite>
  DelayUS(20);
 8001a6c:	2014      	movs	r0, #20
 8001a6e:	f000 f839 	bl	8001ae4 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f023 0304 	bic.w	r3, r3, #4
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ffce 	bl	8001a1c <ExpanderWrite>
  DelayUS(20);
 8001a80:	2014      	movs	r0, #20
 8001a82:	f000 f82f 	bl	8001ae4 <DelayUS>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <DelayInit>:

static void DelayInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001a94:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <DelayInit+0x4c>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4a10      	ldr	r2, [pc, #64]	@ (8001adc <DelayInit+0x4c>)
 8001a9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a9e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <DelayInit+0x4c>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001adc <DelayInit+0x4c>)
 8001aa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aaa:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <DelayInit+0x50>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae0 <DelayInit+0x50>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <DelayInit+0x50>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a08      	ldr	r2, [pc, #32]	@ (8001ae0 <DelayInit+0x50>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <DelayInit+0x50>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001aca:	bf00      	nop
  __ASM volatile ("NOP");
 8001acc:	bf00      	nop
  __ASM volatile ("NOP");
 8001ace:	bf00      	nop
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000edf0 	.word	0xe000edf0
 8001ae0:	e0001000 	.word	0xe0001000

08001ae4 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001aec:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <DelayUS+0x44>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0e      	ldr	r2, [pc, #56]	@ (8001b2c <DelayUS+0x48>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0c9a      	lsrs	r2, r3, #18
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001b00:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <DelayUS+0x4c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <DelayUS+0x4c>)
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f6      	bhi.n	8001b06 <DelayUS+0x22>
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000010 	.word	0x20000010
 8001b2c:	431bde83 	.word	0x431bde83
 8001b30:	e0001000 	.word	0xe0001000

08001b34 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 8001b3a:	f7fe fcaf 	bl	800049c <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8001b3e:	f000 f8a8 	bl	8001c92 <SystemClock_Config>

	/* Initialize all configured peripherals */

	MX_GPIO_Init();
 8001b42:	f000 f8db 	bl	8001cfc <MX_GPIO_Init>
	MX_I2C1_Init();
 8001b46:	f000 f8ab 	bl	8001ca0 <MX_I2C1_Init>

	if (HAL_I2C_IsDeviceReady(&hi2c1, DEVICE_ADDR, 10, HAL_MAX_DELAY) != HAL_OK)
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b4e:	220a      	movs	r2, #10
 8001b50:	214e      	movs	r1, #78	@ 0x4e
 8001b52:	483f      	ldr	r0, [pc, #252]	@ (8001c50 <main+0x11c>)
 8001b54:	f7ff fa6e 	bl	8001034 <HAL_I2C_IsDeviceReady>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <main+0x2e>
	{
		// Device is not ready
		Error_Handler();
 8001b5e:	f000 f921 	bl	8001da4 <Error_Handler>
	}


	/* Initialize */
	HD44780_Init(2);
 8001b62:	2002      	movs	r0, #2
 8001b64:	f7ff fdc4 	bl	80016f0 <HD44780_Init>
	/* Clear buffer */
	//HD44780_Clear();

	/* Hide characters */
	//HD44780_NoDisplay();
	HD44780_Cursor();
 8001b68:	f7ff fe92 	bl	8001890 <HD44780_Cursor>
	HD44780_SetCursor(0,0);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff fe46 	bl	8001800 <HD44780_SetCursor>
	HD44780_PrintStr("HEaaa STM32!!!");
 8001b74:	4837      	ldr	r0, [pc, #220]	@ (8001c54 <main+0x120>)
 8001b76:	f7ff feed 	bl	8001954 <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0);
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff fedd 	bl	800193a <HD44780_PrintSpecialChar>

	/* Show characters */
	HD44780_Display();
 8001b80:	f7ff fe70 	bl	8001864 <HD44780_Display>

	/* Move position */
	HD44780_SetCursor(0, 1);
 8001b84:	2101      	movs	r1, #1
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff fe3a 	bl	8001800 <HD44780_SetCursor>
	HD44780_PrintStr("BYE STM32!!!");
 8001b8c:	4832      	ldr	r0, [pc, #200]	@ (8001c58 <main+0x124>)
 8001b8e:	f7ff fee1 	bl	8001954 <HD44780_PrintStr>
	HD44780_PrintSpecialChar(1);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff fed1 	bl	800193a <HD44780_PrintSpecialChar>

	/* Blink cursor */
	HD44780_Blink();
 8001b98:	f7ff fe90 	bl	80018bc <HD44780_Blink>

	/* Initialize BSP Leds */
	BSP_LED_Init(LED1);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7fe fb25 	bl	80001ec <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7fe fb22 	bl	80001ec <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f7fe fb1f 	bl	80001ec <BSP_LED_Init>

	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7fe fb9f 	bl	80002f4 <BSP_PB_Init>

	const uint8_t MAXLED = sizeof(LED_secuence)/sizeof(Led_TypeDef);
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	717b      	strb	r3, [r7, #5]

	bool aux = true;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	71fb      	strb	r3, [r7, #7]

	/* Infinite loop */
	while (1)
	{
		if (BSP_PB_GetState(BUTTON_USER)){aux = !aux;}
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7fe fbee 	bl	80003a0 <BSP_PB_GetState>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00d      	beq.n	8001be6 <main+0xb2>
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f083 0301 	eor.w	r3, r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	71fb      	strb	r3, [r7, #7]
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	71fb      	strb	r3, [r7, #7]

		int8_t index;
		if(aux){
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d017      	beq.n	8001c1c <main+0xe8>
			for(index=0;index<MAXLED;index++){
 8001bec:	2300      	movs	r3, #0
 8001bee:	71bb      	strb	r3, [r7, #6]
 8001bf0:	e00e      	b.n	8001c10 <main+0xdc>
				LED_blink(LED_secuence[index],TIMEoN,TIMEoFF);
 8001bf2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001bf6:	4a19      	ldr	r2, [pc, #100]	@ (8001c5c <main+0x128>)
 8001bf8:	5cd3      	ldrb	r3, [r2, r3]
 8001bfa:	22c8      	movs	r2, #200	@ 0xc8
 8001bfc:	21c8      	movs	r1, #200	@ 0xc8
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f82e 	bl	8001c60 <LED_blink>
			for(index=0;index<MAXLED;index++){
 8001c04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	71bb      	strb	r3, [r7, #6]
 8001c10:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001c14:	797b      	ldrb	r3, [r7, #5]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dbeb      	blt.n	8001bf2 <main+0xbe>
 8001c1a:	e7d0      	b.n	8001bbe <main+0x8a>
			}
		} else {
			for(index=MAXLED-1;index>-1;index--){
 8001c1c:	797b      	ldrb	r3, [r7, #5]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	71bb      	strb	r3, [r7, #6]
 8001c24:	e00e      	b.n	8001c44 <main+0x110>
				LED_blink(LED_secuence[index],TIMEoN,TIMEoFF);
 8001c26:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c5c <main+0x128>)
 8001c2c:	5cd3      	ldrb	r3, [r2, r3]
 8001c2e:	22c8      	movs	r2, #200	@ 0xc8
 8001c30:	21c8      	movs	r1, #200	@ 0xc8
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f814 	bl	8001c60 <LED_blink>
			for(index=MAXLED-1;index>-1;index--){
 8001c38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	71bb      	strb	r3, [r7, #6]
 8001c44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	daec      	bge.n	8001c26 <main+0xf2>
	{
 8001c4c:	e7b7      	b.n	8001bbe <main+0x8a>
 8001c4e:	bf00      	nop
 8001c50:	20000058 	.word	0x20000058
 8001c54:	08001e78 	.word	0x08001e78
 8001c58:	08001e88 	.word	0x08001e88
 8001c5c:	2000002c 	.word	0x2000002c

08001c60 <LED_blink>:
		}
	}
}


void LED_blink(Led_TypeDef led, uint32_t timeOn, uint32_t timeOff){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	73fb      	strb	r3, [r7, #15]
	BSP_LED_On(led);
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fb0b 	bl	800028c <BSP_LED_On>
	HAL_Delay(timeOn);
 8001c76:	68b8      	ldr	r0, [r7, #8]
 8001c78:	f7fe fc7c 	bl	8000574 <HAL_Delay>
	BSP_LED_Off(led);
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fb1e 	bl	80002c0 <BSP_LED_Off>
	HAL_Delay(timeOff);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7fe fc75 	bl	8000574 <HAL_Delay>

}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <MX_I2C1_Init+0x50>)
 8001ca6:	4a13      	ldr	r2, [pc, #76]	@ (8001cf4 <MX_I2C1_Init+0x54>)
 8001ca8:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_I2C1_Init+0x50>)
 8001cac:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <MX_I2C1_Init+0x58>)
 8001cae:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <MX_I2C1_Init+0x50>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <MX_I2C1_Init+0x50>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <MX_I2C1_Init+0x50>)
 8001cbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cc2:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <MX_I2C1_Init+0x50>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001cca:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <MX_I2C1_Init+0x50>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cd0:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <MX_I2C1_Init+0x50>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <MX_I2C1_Init+0x50>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cdc:	4804      	ldr	r0, [pc, #16]	@ (8001cf0 <MX_I2C1_Init+0x50>)
 8001cde:	f7fe ff5d 	bl	8000b9c <HAL_I2C_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8001ce8:	f000 f85c 	bl	8001da4 <Error_Handler>
    }
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000058 	.word	0x20000058
 8001cf4:	40005400 	.word	0x40005400
 8001cf8:	000186a0 	.word	0x000186a0

08001cfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	@ 0x28
 8001d00:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	4b25      	ldr	r3, [pc, #148]	@ (8001d9c <MX_GPIO_Init+0xa0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a24      	ldr	r2, [pc, #144]	@ (8001d9c <MX_GPIO_Init+0xa0>)
 8001d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b22      	ldr	r3, [pc, #136]	@ (8001d9c <MX_GPIO_Init+0xa0>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b1e      	ldr	r3, [pc, #120]	@ (8001d9c <MX_GPIO_Init+0xa0>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a1d      	ldr	r2, [pc, #116]	@ (8001d9c <MX_GPIO_Init+0xa0>)
 8001d28:	f043 0308 	orr.w	r3, r3, #8
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <MX_GPIO_Init+0xa0>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <MX_GPIO_Init+0xa0>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	4a16      	ldr	r2, [pc, #88]	@ (8001d9c <MX_GPIO_Init+0xa0>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4a:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <MX_GPIO_Init+0xa0>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <MX_GPIO_Init+0xa0>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d9c <MX_GPIO_Init+0xa0>)
 8001d60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d66:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <MX_GPIO_Init+0xa0>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001d72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d78:	2312      	movs	r3, #18
 8001d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d84:	2304      	movs	r3, #4
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4804      	ldr	r0, [pc, #16]	@ (8001da0 <MX_GPIO_Init+0xa4>)
 8001d90:	f7fe fd26 	bl	80007e0 <HAL_GPIO_Init>
}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	@ 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020400 	.word	0x40020400

08001da4 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8001da8:	2001      	movs	r0, #1
 8001daa:	f7fe fa6f 	bl	800028c <BSP_LED_On>
	while (1)
 8001dae:	bf00      	nop
 8001db0:	e7fd      	b.n	8001dae <Error_Handler+0xa>
	...

08001db4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001db4:	480d      	ldr	r0, [pc, #52]	@ (8001dec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001db6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001db8:	f7fe fb08 	bl	80003cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dbc:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dbe:	490d      	ldr	r1, [pc, #52]	@ (8001df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <LoopForever+0xe>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e00 <LoopForever+0x16>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001de2:	f000 f811 	bl	8001e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de6:	f7ff fea5 	bl	8001b34 <main>

08001dea <LoopForever>:

LoopForever:
  b LoopForever
 8001dea:	e7fe      	b.n	8001dea <LoopForever>
  ldr   r0, =_estack
 8001dec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001df8:	08001eb0 	.word	0x08001eb0
  ldr r2, =_sbss
 8001dfc:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001e00:	200000ac 	.word	0x200000ac

08001e04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC_IRQHandler>
	...

08001e08 <__libc_init_array>:
 8001e08:	b570      	push	{r4, r5, r6, lr}
 8001e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8001e40 <__libc_init_array+0x38>)
 8001e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8001e44 <__libc_init_array+0x3c>)
 8001e0e:	1b64      	subs	r4, r4, r5
 8001e10:	10a4      	asrs	r4, r4, #2
 8001e12:	2600      	movs	r6, #0
 8001e14:	42a6      	cmp	r6, r4
 8001e16:	d109      	bne.n	8001e2c <__libc_init_array+0x24>
 8001e18:	4d0b      	ldr	r5, [pc, #44]	@ (8001e48 <__libc_init_array+0x40>)
 8001e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8001e4c <__libc_init_array+0x44>)
 8001e1c:	f000 f818 	bl	8001e50 <_init>
 8001e20:	1b64      	subs	r4, r4, r5
 8001e22:	10a4      	asrs	r4, r4, #2
 8001e24:	2600      	movs	r6, #0
 8001e26:	42a6      	cmp	r6, r4
 8001e28:	d105      	bne.n	8001e36 <__libc_init_array+0x2e>
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e30:	4798      	blx	r3
 8001e32:	3601      	adds	r6, #1
 8001e34:	e7ee      	b.n	8001e14 <__libc_init_array+0xc>
 8001e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e3a:	4798      	blx	r3
 8001e3c:	3601      	adds	r6, #1
 8001e3e:	e7f2      	b.n	8001e26 <__libc_init_array+0x1e>
 8001e40:	08001ea8 	.word	0x08001ea8
 8001e44:	08001ea8 	.word	0x08001ea8
 8001e48:	08001ea8 	.word	0x08001ea8
 8001e4c:	08001eac 	.word	0x08001eac

08001e50 <_init>:
 8001e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e52:	bf00      	nop
 8001e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e56:	bc08      	pop	{r3}
 8001e58:	469e      	mov	lr, r3
 8001e5a:	4770      	bx	lr

08001e5c <_fini>:
 8001e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5e:	bf00      	nop
 8001e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e62:	bc08      	pop	{r3}
 8001e64:	469e      	mov	lr, r3
 8001e66:	4770      	bx	lr
