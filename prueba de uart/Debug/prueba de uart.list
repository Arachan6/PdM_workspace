
prueba de uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007240  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  080073f0  080073f0  000083f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007880  08007880  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007880  08007880  00008880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007888  08007888  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007888  08007888  00008888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800788c  0800788c  0000888c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007890  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000003e8  200001d8  200001d8  000091d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200005c0  200005c0  000091d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c3e4  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020fc  00000000  00000000  000155e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  000176e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e1  00000000  00000000  00018260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004109  00000000  00000000  00018b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117ec  00000000  00000000  0001cc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4b57  00000000  00000000  0002e436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112f8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041c4  00000000  00000000  00112fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00117194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080073d8 	.word	0x080073d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	080073d8 	.word	0x080073d8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c60:	f000 b9a0 	b.w	8000fa4 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <String_Split>:
#include "API_gps.h"

NMEAData nmeaData;

// Function to split a string by a delimiter
void String_Split(const char* str, char delimiter, char fields[MAX_FIELDS][MAX_FIELDS_LENGTH], int* fieldCount) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	72fb      	strb	r3, [r7, #11]
    *fieldCount = 0;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
    int length = strlen(str);
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f7ff f920 	bl	8000204 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	613b      	str	r3, [r7, #16]
    int fieldIndex = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    int charIndex = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	e03f      	b.n	8001056 <String_Split+0xae>
        if (str[i] == delimiter || str[i] == '\n') {
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	7afa      	ldrb	r2, [r7, #11]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d005      	beq.n	8000ff0 <String_Split+0x48>
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b0a      	cmp	r3, #10
 8000fee:	d112      	bne.n	8001016 <String_Split+0x6e>
            fields[fieldIndex][charIndex] = '\0'; // Null-terminate current field
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	2232      	movs	r2, #50	@ 0x32
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	441a      	add	r2, r3
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	4413      	add	r3, r2
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
            fieldIndex++;
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	3301      	adds	r3, #1
 8001008:	61fb      	str	r3, [r7, #28]
            charIndex = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
            if (fieldIndex >= MAX_FIELDS) break;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	2b13      	cmp	r3, #19
 8001012:	dd1d      	ble.n	8001050 <String_Split+0xa8>
 8001014:	e023      	b.n	800105e <String_Split+0xb6>
        } else {
            fields[fieldIndex][charIndex++] = str[i];
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	18d1      	adds	r1, r2, r3
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2232      	movs	r2, #50	@ 0x32
 8001020:	fb02 f303 	mul.w	r3, r2, r3
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	441a      	add	r2, r3
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	1c58      	adds	r0, r3, #1
 800102c:	61b8      	str	r0, [r7, #24]
 800102e:	7809      	ldrb	r1, [r1, #0]
 8001030:	54d1      	strb	r1, [r2, r3]
            if (charIndex >= MAX_FIELDS_LENGTH - 1) {
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	2b30      	cmp	r3, #48	@ 0x30
 8001036:	dd0b      	ble.n	8001050 <String_Split+0xa8>
                fields[fieldIndex][charIndex] = '\0'; // Null-terminate and prevent overflow
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	2232      	movs	r2, #50	@ 0x32
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	441a      	add	r2, r3
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	4413      	add	r3, r2
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
                charIndex = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < length; i++) {
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	429a      	cmp	r2, r3
 800105c:	dbbb      	blt.n	8000fd6 <String_Split+0x2e>
            }
        }
    }
    *fieldCount = fieldIndex + 1; // Account for the last field
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <Parse_NMEA_Sentence>:


bool_t Parse_NMEA_Sentence(const char* nmea) {
 8001070:	b580      	push	{r7, lr}
 8001072:	f5ad 7d7e 	sub.w	sp, sp, #1016	@ 0x3f8
 8001076:	af00      	add	r7, sp, #0
 8001078:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 800107c:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8001080:	6018      	str	r0, [r3, #0]
	bool_t rtrn = true;
 8001082:	2301      	movs	r3, #1
 8001084:	f887 33f7 	strb.w	r3, [r7, #1015]	@ 0x3f7
    char fields[MAX_FIELDS][MAX_FIELDS_LENGTH];
    int fieldCount = 0;
 8001088:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 800108c:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
    String_Split(nmea, ',', fields, &fieldCount);
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	f107 020c 	add.w	r2, r7, #12
 800109c:	f507 717e 	add.w	r1, r7, #1016	@ 0x3f8
 80010a0:	f5a1 707d 	sub.w	r0, r1, #1012	@ 0x3f4
 80010a4:	212c      	movs	r1, #44	@ 0x2c
 80010a6:	6800      	ldr	r0, [r0, #0]
 80010a8:	f7ff ff7e 	bl	8000fa8 <String_Split>

    if (fieldCount < 1) {rtrn=false;} // Not enough fields
 80010ac:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 80010b0:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	dc02      	bgt.n	80010c0 <Parse_NMEA_Sentence+0x50>
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 33f7 	strb.w	r3, [r7, #1015]	@ 0x3f7

    strncpy(nmeaData.sentenceType, fields[0], sizeof(nmeaData.sentenceType) - 1);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2206      	movs	r2, #6
 80010c6:	4619      	mov	r1, r3
 80010c8:	48b2      	ldr	r0, [pc, #712]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 80010ca:	f004 f904 	bl	80052d6 <strncpy>

    if (strcmp(nmeaData.sentenceType, "$GPGSA") == 0) {
 80010ce:	49b2      	ldr	r1, [pc, #712]	@ (8001398 <Parse_NMEA_Sentence+0x328>)
 80010d0:	48b0      	ldr	r0, [pc, #704]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 80010d2:	f7ff f88d 	bl	80001f0 <strcmp>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d141      	bne.n	8001160 <Parse_NMEA_Sentence+0xf0>
        nmeaData.mode = fields[GPGSA_MODE][0];            						// Mode (e.g., 'A' for automatic, 'M' for manual)
 80010dc:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 80010e0:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80010e4:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80010e8:	4baa      	ldr	r3, [pc, #680]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 80010ea:	71da      	strb	r2, [r3, #7]
        nmeaData.fixType = atoi(fields[GPGSA_FIX_TYPE]);  						// Fix type (1 = no fix, 2 = 2D fix, 3 = 3D fix)
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	3364      	adds	r3, #100	@ 0x64
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 f91a 	bl	800432c <atoi>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4aa6      	ldr	r2, [pc, #664]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 80010fc:	6093      	str	r3, [r2, #8]
        nmeaData.pdop = atof(fields[GPGSA_PDOP]);        	 					// Position dilution of precision
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	f203 23ee 	addw	r3, r3, #750	@ 0x2ee
 8001106:	4618      	mov	r0, r3
 8001108:	f003 f90d 	bl	8004326 <atof>
 800110c:	ec53 2b10 	vmov	r2, r3, d0
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fd4a 	bl	8000bac <__aeabi_d2f>
 8001118:	4603      	mov	r3, r0
 800111a:	4a9e      	ldr	r2, [pc, #632]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 800111c:	60d3      	str	r3, [r2, #12]
        nmeaData.hdop = atof(fields[GPGSA_HDOP]);         						// Horizontal dilution of precision
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8001126:	4618      	mov	r0, r3
 8001128:	f003 f8fd 	bl	8004326 <atof>
 800112c:	ec53 2b10 	vmov	r2, r3, d0
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fd3a 	bl	8000bac <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	4a96      	ldr	r2, [pc, #600]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 800113c:	6113      	str	r3, [r2, #16]
        nmeaData.vdop = atof(fields[GPGSA_VDOP]);         						// Vertical dilution of precision
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	f203 3352 	addw	r3, r3, #850	@ 0x352
 8001146:	4618      	mov	r0, r3
 8001148:	f003 f8ed 	bl	8004326 <atof>
 800114c:	ec53 2b10 	vmov	r2, r3, d0
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fd2a 	bl	8000bac <__aeabi_d2f>
 8001158:	4603      	mov	r3, r0
 800115a:	4a8e      	ldr	r2, [pc, #568]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 800115c:	6153      	str	r3, [r2, #20]
 800115e:	e112      	b.n	8001386 <Parse_NMEA_Sentence+0x316>

    } else if (strcmp(nmeaData.sentenceType, "$GPGSV") == 0) {
 8001160:	498e      	ldr	r1, [pc, #568]	@ (800139c <Parse_NMEA_Sentence+0x32c>)
 8001162:	488c      	ldr	r0, [pc, #560]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 8001164:	f7ff f844 	bl	80001f0 <strcmp>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d11b      	bne.n	80011a6 <Parse_NMEA_Sentence+0x136>
        nmeaData.numOfMessages = atoi(fields[GPGSV_NUM_MESSAGES]);   			// Total number of GSV messages to be transmitted
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	3332      	adds	r3, #50	@ 0x32
 8001174:	4618      	mov	r0, r3
 8001176:	f003 f8d9 	bl	800432c <atoi>
 800117a:	4603      	mov	r3, r0
 800117c:	4a85      	ldr	r2, [pc, #532]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 800117e:	6193      	str	r3, [r2, #24]
        nmeaData.messageNumber = atoi(fields[GPGSV_MESSAGE_NUMBER]); 			// Message number
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	3364      	adds	r3, #100	@ 0x64
 8001186:	4618      	mov	r0, r3
 8001188:	f003 f8d0 	bl	800432c <atoi>
 800118c:	4603      	mov	r3, r0
 800118e:	4a81      	ldr	r2, [pc, #516]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 8001190:	61d3      	str	r3, [r2, #28]
        nmeaData.satellitesInView = atoi(fields[GPGSV_SATELLITES_IN_VIEW]); 	// Total number of satellites in view
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	3396      	adds	r3, #150	@ 0x96
 8001198:	4618      	mov	r0, r3
 800119a:	f003 f8c7 	bl	800432c <atoi>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a7c      	ldr	r2, [pc, #496]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 80011a2:	6213      	str	r3, [r2, #32]
 80011a4:	e0ef      	b.n	8001386 <Parse_NMEA_Sentence+0x316>

    } else if (strcmp(nmeaData.sentenceType, "$GPRMC") == 0) {
 80011a6:	497e      	ldr	r1, [pc, #504]	@ (80013a0 <Parse_NMEA_Sentence+0x330>)
 80011a8:	487a      	ldr	r0, [pc, #488]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 80011aa:	f7ff f821 	bl	80001f0 <strcmp>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d150      	bne.n	8001256 <Parse_NMEA_Sentence+0x1e6>
        strncpy(nmeaData.time, fields[GPRMC_TIME], sizeof(nmeaData.time) - 1); 	// UTC time in hhmmss.ss format
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	3332      	adds	r3, #50	@ 0x32
 80011ba:	220a      	movs	r2, #10
 80011bc:	4619      	mov	r1, r3
 80011be:	4879      	ldr	r0, [pc, #484]	@ (80013a4 <Parse_NMEA_Sentence+0x334>)
 80011c0:	f004 f889 	bl	80052d6 <strncpy>
        nmeaData.status = fields[GPRMC_STATUS][0];                            	// Status (A = active, V = void)
 80011c4:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 80011c8:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80011cc:	f893 2064 	ldrb.w	r2, [r3, #100]	@ 0x64
 80011d0:	4b70      	ldr	r3, [pc, #448]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 80011d2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        nmeaData.latitude = atof(fields[GPRMC_LATITUDE]);                     	// Latitude in ddmm.mmmm format
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	3396      	adds	r3, #150	@ 0x96
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 f8a2 	bl	8004326 <atof>
 80011e2:	eeb0 7a40 	vmov.f32	s14, s0
 80011e6:	eef0 7a60 	vmov.f32	s15, s1
 80011ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 80011ec:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        nmeaData.longitude = atof(fields[GPRMC_LONGITUDE]);                   	// Longitude in dddmm.mmmm format
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	33fa      	adds	r3, #250	@ 0xfa
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 f895 	bl	8004326 <atof>
 80011fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001200:	eef0 7a60 	vmov.f32	s15, s1
 8001204:	4b63      	ldr	r3, [pc, #396]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 8001206:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        nmeaData.speed = atof(fields[GPRMC_SPEED]);                           	// Speed over ground in knots
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 8001212:	4618      	mov	r0, r3
 8001214:	f003 f887 	bl	8004326 <atof>
 8001218:	eeb0 7a40 	vmov.f32	s14, s0
 800121c:	eef0 7a60 	vmov.f32	s15, s1
 8001220:	4b5c      	ldr	r3, [pc, #368]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 8001222:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
        nmeaData.trackAngle = atof(fields[GPRMC_TRACK_ANGLE]);                	// Track angle in degrees True
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800122e:	4618      	mov	r0, r3
 8001230:	f003 f879 	bl	8004326 <atof>
 8001234:	eeb0 7a40 	vmov.f32	s14, s0
 8001238:	eef0 7a60 	vmov.f32	s15, s1
 800123c:	4b55      	ldr	r3, [pc, #340]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 800123e:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
        strncpy(nmeaData.date, fields[GPRMC_DATE], sizeof(nmeaData.date) - 1); 	// Date in ddmmyy format
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	f503 73e1 	add.w	r3, r3, #450	@ 0x1c2
 800124a:	2206      	movs	r2, #6
 800124c:	4619      	mov	r1, r3
 800124e:	4856      	ldr	r0, [pc, #344]	@ (80013a8 <Parse_NMEA_Sentence+0x338>)
 8001250:	f004 f841 	bl	80052d6 <strncpy>
 8001254:	e097      	b.n	8001386 <Parse_NMEA_Sentence+0x316>

    } else if (strcmp(nmeaData.sentenceType, "$GPVTG") == 0) {
 8001256:	4955      	ldr	r1, [pc, #340]	@ (80013ac <Parse_NMEA_Sentence+0x33c>)
 8001258:	484e      	ldr	r0, [pc, #312]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 800125a:	f7fe ffc9 	bl	80001f0 <strcmp>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d135      	bne.n	80012d0 <Parse_NMEA_Sentence+0x260>
        nmeaData.trueTrack = atof(fields[GPVTG_TRUE_TRACK]);                  	// True track made good (degrees)
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	3332      	adds	r3, #50	@ 0x32
 800126a:	4618      	mov	r0, r3
 800126c:	f003 f85b 	bl	8004326 <atof>
 8001270:	eeb0 7a40 	vmov.f32	s14, s0
 8001274:	eef0 7a60 	vmov.f32	s15, s1
 8001278:	4b46      	ldr	r3, [pc, #280]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 800127a:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
        nmeaData.magneticTrack = atof(fields[GPVTG_MAGNETIC_TRACK]);          	// Magnetic track made good (degrees)
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	3396      	adds	r3, #150	@ 0x96
 8001284:	4618      	mov	r0, r3
 8001286:	f003 f84e 	bl	8004326 <atof>
 800128a:	eeb0 7a40 	vmov.f32	s14, s0
 800128e:	eef0 7a60 	vmov.f32	s15, s1
 8001292:	4b40      	ldr	r3, [pc, #256]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 8001294:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
        nmeaData.groundSpeedKnots = atof(fields[GPVTG_SPEED_KNOTS]);          	// Ground speed in knots
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	33fa      	adds	r3, #250	@ 0xfa
 800129e:	4618      	mov	r0, r3
 80012a0:	f003 f841 	bl	8004326 <atof>
 80012a4:	eeb0 7a40 	vmov.f32	s14, s0
 80012a8:	eef0 7a60 	vmov.f32	s15, s1
 80012ac:	4b39      	ldr	r3, [pc, #228]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 80012ae:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
        nmeaData.groundSpeedKph = atof(fields[GPVTG_SPEED_KPH]);              	// Ground speed in kilometers per hour
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 f833 	bl	8004326 <atof>
 80012c0:	eeb0 7a40 	vmov.f32	s14, s0
 80012c4:	eef0 7a60 	vmov.f32	s15, s1
 80012c8:	4b32      	ldr	r3, [pc, #200]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 80012ca:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
 80012ce:	e05a      	b.n	8001386 <Parse_NMEA_Sentence+0x316>

    } else if (strcmp(nmeaData.sentenceType, "$GPGGA") == 0) {
 80012d0:	4937      	ldr	r1, [pc, #220]	@ (80013b0 <Parse_NMEA_Sentence+0x340>)
 80012d2:	4830      	ldr	r0, [pc, #192]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 80012d4:	f7fe ff8c 	bl	80001f0 <strcmp>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d153      	bne.n	8001386 <Parse_NMEA_Sentence+0x316>
        strncpy(nmeaData.time, fields[GPGGA_TIME], sizeof(nmeaData.time) - 1); 	// UTC time in hhmmss.ss format
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	3332      	adds	r3, #50	@ 0x32
 80012e4:	220a      	movs	r2, #10
 80012e6:	4619      	mov	r1, r3
 80012e8:	482e      	ldr	r0, [pc, #184]	@ (80013a4 <Parse_NMEA_Sentence+0x334>)
 80012ea:	f003 fff4 	bl	80052d6 <strncpy>
        nmeaData.latitude = atof(fields[GPGGA_LATITUDE]);                     	// Latitude in ddmm.mmmm format
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	3364      	adds	r3, #100	@ 0x64
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 f816 	bl	8004326 <atof>
 80012fa:	eeb0 7a40 	vmov.f32	s14, s0
 80012fe:	eef0 7a60 	vmov.f32	s15, s1
 8001302:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 8001304:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        nmeaData.longitude = atof(fields[GPGGA_LONGITUDE]);                   	// Longitude in dddmm.mmmm format
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	33c8      	adds	r3, #200	@ 0xc8
 800130e:	4618      	mov	r0, r3
 8001310:	f003 f809 	bl	8004326 <atof>
 8001314:	eeb0 7a40 	vmov.f32	s14, s0
 8001318:	eef0 7a60 	vmov.f32	s15, s1
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 800131e:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        nmeaData.fixQuality = atoi(fields[GPGGA_FIX_QUALITY]);                	// Fix quality (0 = invalid, 1 = GPS fix, 2 = DGPS fix)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800132a:	4618      	mov	r0, r3
 800132c:	f002 fffe 	bl	800432c <atoi>
 8001330:	4603      	mov	r3, r0
 8001332:	4a18      	ldr	r2, [pc, #96]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 8001334:	6793      	str	r3, [r2, #120]	@ 0x78
        nmeaData.numSatellites = atoi(fields[GPGGA_NUM_SATELLITES]);          	// Number of satellites being tracked
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 800133e:	4618      	mov	r0, r3
 8001340:	f002 fff4 	bl	800432c <atoi>
 8001344:	4603      	mov	r3, r0
 8001346:	4a13      	ldr	r2, [pc, #76]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 8001348:	67d3      	str	r3, [r2, #124]	@ 0x7c
        nmeaData.hdop = atof(fields[GPGGA_HDOP]);                             	// Horizontal dilution of precision
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001352:	4618      	mov	r0, r3
 8001354:	f002 ffe7 	bl	8004326 <atof>
 8001358:	ec53 2b10 	vmov	r2, r3, d0
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fc24 	bl	8000bac <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 8001368:	6113      	str	r3, [r2, #16]
        nmeaData.altitude = atof(fields[GPGGA_ALTITUDE]);                     	// Altitude above mean sea level in meters
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	f503 73e1 	add.w	r3, r3, #450	@ 0x1c2
 8001372:	4618      	mov	r0, r3
 8001374:	f002 ffd7 	bl	8004326 <atof>
 8001378:	eeb0 7a40 	vmov.f32	s14, s0
 800137c:	eef0 7a60 	vmov.f32	s15, s1
 8001380:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <Parse_NMEA_Sentence+0x324>)
 8001382:	ed83 7b20 	vstr	d7, [r3, #128]	@ 0x80
    }
    return rtrn;
 8001386:	f897 33f7 	ldrb.w	r3, [r7, #1015]	@ 0x3f7
}
 800138a:	4618      	mov	r0, r3
 800138c:	f507 777e 	add.w	r7, r7, #1016	@ 0x3f8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200001f8 	.word	0x200001f8
 8001398:	080073f0 	.word	0x080073f0
 800139c:	080073f8 	.word	0x080073f8
 80013a0:	08007400 	.word	0x08007400
 80013a4:	2000021c 	.word	0x2000021c
 80013a8:	20000248 	.word	0x20000248
 80013ac:	08007408 	.word	0x08007408
 80013b0:	08007410 	.word	0x08007410

080013b4 <HD44780_Init>:
static void SendData(uint8_t);
static void ExpanderWrite(uint8_t);
static void DelayUS(uint32_t);
static void SetCursor(uint8_t, uint8_t);

void HD44780_Init(uint8_t rows){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
	dpRows = rows;
 80013be:	4a25      	ldr	r2, [pc, #148]	@ (8001454 <HD44780_Init+0xa0>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	7013      	strb	r3, [r2, #0]
	dpBacklight = LCD_BACKLIGHT;
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <HD44780_Init+0xa4>)
 80013c6:	2208      	movs	r2, #8
 80013c8:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 80013ca:	4b24      	ldr	r3, [pc, #144]	@ (800145c <HD44780_Init+0xa8>)
 80013cc:	2208      	movs	r2, #8
 80013ce:	701a      	strb	r2, [r3, #0]

	/* Wait for initialization */
	HAL_Delay(1000);
 80013d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013d4:	f000 fd58 	bl	8001e88 <HAL_Delay>

	/* 4bit Mode */
	ExpanderWrite(0x03 << 4);
 80013d8:	2030      	movs	r0, #48	@ 0x30
 80013da:	f000 f89b 	bl	8001514 <ExpanderWrite>
	HAL_Delay(5);
 80013de:	2005      	movs	r0, #5
 80013e0:	f000 fd52 	bl	8001e88 <HAL_Delay>
	//DelayUS(4500);

	ExpanderWrite(0x03 << 4);
 80013e4:	2030      	movs	r0, #48	@ 0x30
 80013e6:	f000 f895 	bl	8001514 <ExpanderWrite>
	HAL_Delay(5);
 80013ea:	2005      	movs	r0, #5
 80013ec:	f000 fd4c 	bl	8001e88 <HAL_Delay>
	//DelayUS(4500);

	ExpanderWrite(0x03 << 4);
 80013f0:	2030      	movs	r0, #48	@ 0x30
 80013f2:	f000 f88f 	bl	8001514 <ExpanderWrite>
	HAL_Delay(5);
 80013f6:	2005      	movs	r0, #5
 80013f8:	f000 fd46 	bl	8001e88 <HAL_Delay>
	//DelayUS(4500);

	ExpanderWrite(0x02 << 4);
 80013fc:	2020      	movs	r0, #32
 80013fe:	f000 f889 	bl	8001514 <ExpanderWrite>
	HAL_Delay(1);
 8001402:	2001      	movs	r0, #1
 8001404:	f000 fd40 	bl	8001e88 <HAL_Delay>
	//DelayUS(4500);

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001408:	4b14      	ldr	r3, [pc, #80]	@ (800145c <HD44780_Init+0xa8>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f865 	bl	80014e2 <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKON;
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <HD44780_Init+0xac>)
 800141a:	2205      	movs	r2, #5
 800141c:	701a      	strb	r2, [r3, #0]
	HD44780_Set_Display(true);
 800141e:	2001      	movs	r0, #1
 8001420:	f000 f82e 	bl	8001480 <HD44780_Set_Display>
	HD44780_Clear();
 8001424:	f000 f852 	bl	80014cc <HD44780_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001428:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <HD44780_Init+0xb0>)
 800142a:	2202      	movs	r2, #2
 800142c:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 800142e:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <HD44780_Init+0xb0>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f852 	bl	80014e2 <SendCommand>
	DelayUS(4500);
 800143e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001442:	f000 f8b1 	bl	80015a8 <DelayUS>

	HD44780_Home();
 8001446:	f000 f80f 	bl	8001468 <HD44780_Home>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000283 	.word	0x20000283
 8001458:	20000284 	.word	0x20000284
 800145c:	20000280 	.word	0x20000280
 8001460:	20000281 	.word	0x20000281
 8001464:	20000282 	.word	0x20000282

08001468 <HD44780_Home>:

void HD44780_Home(){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 800146c:	2002      	movs	r0, #2
 800146e:	f000 f838 	bl	80014e2 <SendCommand>
	DelayUS(2000);
 8001472:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001476:	f000 f897 	bl	80015a8 <DelayUS>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HD44780_Set_Display>:

void HD44780_PrintStr(const char c[]){
	while(*c) SendData(*c++);
}

void HD44780_Set_Display(bool_t displayOn) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
    if (displayOn) {
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d007      	beq.n	80014a0 <HD44780_Set_Display+0x20>
        dpControl |= LCD_DISPLAYON;  // Set the display on flag
 8001490:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <HD44780_Set_Display+0x48>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HD44780_Set_Display+0x48>)
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	e006      	b.n	80014ae <HD44780_Set_Display+0x2e>
    } else {
        dpControl &= ~LCD_DISPLAYON; // Clear the display on flag
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HD44780_Set_Display+0x48>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f023 0304 	bic.w	r3, r3, #4
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <HD44780_Set_Display+0x48>)
 80014ac:	701a      	strb	r2, [r3, #0]
    }
    SendCommand(LCD_DISPLAYCONTROL | dpControl); // Send the command to the display
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HD44780_Set_Display+0x48>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	f043 0308 	orr.w	r3, r3, #8
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f812 	bl	80014e2 <SendCommand>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000281 	.word	0x20000281

080014cc <HD44780_Clear>:
		row = dpRows-1;
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}

void HD44780_Clear(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f000 f806 	bl	80014e2 <SendCommand>
	DelayUS(2000);
 80014d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014da:	f000 f865 	bl	80015a8 <DelayUS>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <SendCommand>:
	uint8_t lownib = (cmd<<4) & 0xF0;
	ExpanderWrite(highnib | RS);
	ExpanderWrite(lownib | RS);
}

static void SendCommand(uint8_t cmd){
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
	uint8_t highnib = cmd & 0xF0;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f023 030f 	bic.w	r3, r3, #15
 80014f2:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (cmd<<4) & 0xF0;
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	73bb      	strb	r3, [r7, #14]
	ExpanderWrite(highnib);
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f809 	bl	8001514 <ExpanderWrite>
	ExpanderWrite(lownib);
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f805 	bl	8001514 <ExpanderWrite>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <ExpanderWrite>:

static void ExpanderWrite(uint8_t value)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af02      	add	r7, sp, #8
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = value | dpBacklight;
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <ExpanderWrite+0x8c>)
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4313      	orrs	r3, r2
 8001526:	b2db      	uxtb	r3, r3
 8001528:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800152a:	f107 020f 	add.w	r2, r7, #15
 800152e:	230a      	movs	r3, #10
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2301      	movs	r3, #1
 8001534:	214e      	movs	r1, #78	@ 0x4e
 8001536:	481b      	ldr	r0, [pc, #108]	@ (80015a4 <ExpanderWrite+0x90>)
 8001538:	f001 f968 	bl	800280c <HAL_I2C_Master_Transmit>

	data = (value | ENABLE) | dpBacklight;
 800153c:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <ExpanderWrite+0x8c>)
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4313      	orrs	r3, r2
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	b2db      	uxtb	r3, r3
 800154c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800154e:	f107 020f 	add.w	r2, r7, #15
 8001552:	230a      	movs	r3, #10
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2301      	movs	r3, #1
 8001558:	214e      	movs	r1, #78	@ 0x4e
 800155a:	4812      	ldr	r0, [pc, #72]	@ (80015a4 <ExpanderWrite+0x90>)
 800155c:	f001 f956 	bl	800280c <HAL_I2C_Master_Transmit>
	DelayUS(20);
 8001560:	2014      	movs	r0, #20
 8001562:	f000 f821 	bl	80015a8 <DelayUS>

	data = (value & ~ENABLE) | dpBacklight;
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	f023 0304 	bic.w	r3, r3, #4
 800156e:	b25a      	sxtb	r2, r3
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <ExpanderWrite+0x8c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b25b      	sxtb	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	b25b      	sxtb	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800157e:	f107 020f 	add.w	r2, r7, #15
 8001582:	230a      	movs	r3, #10
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2301      	movs	r3, #1
 8001588:	214e      	movs	r1, #78	@ 0x4e
 800158a:	4806      	ldr	r0, [pc, #24]	@ (80015a4 <ExpanderWrite+0x90>)
 800158c:	f001 f93e 	bl	800280c <HAL_I2C_Master_Transmit>
	DelayUS(20);
 8001590:	2014      	movs	r0, #20
 8001592:	f000 f809 	bl	80015a8 <DelayUS>
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000284 	.word	0x20000284
 80015a4:	20000288 	.word	0x20000288

080015a8 <DelayUS>:

static void DelayUS(uint32_t us) {
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <DelayUS+0x44>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	@ (80015f0 <DelayUS+0x48>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0c9a      	lsrs	r2, r3, #18
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <DelayUS+0x4c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do{
		cnt = DWT->CYCCNT - start;
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <DelayUS+0x4c>)
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	60fb      	str	r3, [r7, #12]
	} while(cnt < cycles);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8f6      	bhi.n	80015ca <DelayUS+0x22>
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000000 	.word	0x20000000
 80015f0:	431bde83 	.word	0x431bde83
 80015f4:	e0001000 	.word	0xe0001000

080015f8 <I2C1_Init>:
#include "API_hd44780.h"

I2C_HandleTypeDef hi2c1;

bool_t I2C1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	bool_t rtrn=true;
 80015fe:	2301      	movs	r3, #1
 8001600:	71fb      	strb	r3, [r7, #7]
	I2C1_GPIO_Init();
 8001602:	f000 f83b 	bl	800167c <I2C1_GPIO_Init>

    hi2c1.Instance = I2C1;
 8001606:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <I2C1_Init+0x78>)
 8001608:	4a1a      	ldr	r2, [pc, #104]	@ (8001674 <I2C1_Init+0x7c>)
 800160a:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <I2C1_Init+0x78>)
 800160e:	4a1a      	ldr	r2, [pc, #104]	@ (8001678 <I2C1_Init+0x80>)
 8001610:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001612:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <I2C1_Init+0x78>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <I2C1_Init+0x78>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161e:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <I2C1_Init+0x78>)
 8001620:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001624:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001626:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <I2C1_Init+0x78>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800162c:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <I2C1_Init+0x78>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001632:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <I2C1_Init+0x78>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001638:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <I2C1_Init+0x78>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK){rtrn=false;}
 800163e:	480c      	ldr	r0, [pc, #48]	@ (8001670 <I2C1_Init+0x78>)
 8001640:	f000 ff96 	bl	8002570 <HAL_I2C_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <I2C1_Init+0x56>
 800164a:	2300      	movs	r3, #0
 800164c:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_IsDeviceReady(&hi2c1, DEVICE_ADDR, 10, HAL_MAX_DELAY) != HAL_OK){rtrn=false;}
 800164e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001652:	220a      	movs	r2, #10
 8001654:	214e      	movs	r1, #78	@ 0x4e
 8001656:	4806      	ldr	r0, [pc, #24]	@ (8001670 <I2C1_Init+0x78>)
 8001658:	f001 f9d6 	bl	8002a08 <HAL_I2C_IsDeviceReady>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <I2C1_Init+0x6e>
 8001662:	2300      	movs	r3, #0
 8001664:	71fb      	strb	r3, [r7, #7]

    return rtrn;
 8001666:	79fb      	ldrb	r3, [r7, #7]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000288 	.word	0x20000288
 8001674:	40005400 	.word	0x40005400
 8001678:	000186a0 	.word	0x000186a0

0800167c <I2C1_GPIO_Init>:

static void I2C1_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	@ 0x28
 8001680:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b25      	ldr	r3, [pc, #148]	@ (800171c <I2C1_GPIO_Init+0xa0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a24      	ldr	r2, [pc, #144]	@ (800171c <I2C1_GPIO_Init+0xa0>)
 800168c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b22      	ldr	r3, [pc, #136]	@ (800171c <I2C1_GPIO_Init+0xa0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b1e      	ldr	r3, [pc, #120]	@ (800171c <I2C1_GPIO_Init+0xa0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a1d      	ldr	r2, [pc, #116]	@ (800171c <I2C1_GPIO_Init+0xa0>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <I2C1_GPIO_Init+0xa0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b17      	ldr	r3, [pc, #92]	@ (800171c <I2C1_GPIO_Init+0xa0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a16      	ldr	r2, [pc, #88]	@ (800171c <I2C1_GPIO_Init+0xa0>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <I2C1_GPIO_Init+0xa0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <I2C1_GPIO_Init+0xa0>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <I2C1_GPIO_Init+0xa0>)
 80016e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <I2C1_GPIO_Init+0xa0>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80016f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f8:	2312      	movs	r3, #18
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001704:	2304      	movs	r3, #4
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4804      	ldr	r0, [pc, #16]	@ (8001720 <I2C1_GPIO_Init+0xa4>)
 8001710:	f000 fd82 	bl	8002218 <HAL_GPIO_Init>
}
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	@ 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	40020400 	.word	0x40020400

08001724 <UART5_GPIO_Init>:
UART_HandleTypeDef huart5;

uint8_t rx_char;
bool_t nmea_ready;

static void UART5_GPIO_Init(void){
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

    /* Enable GPIO Clocks */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <UART5_GPIO_Init+0xa8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a22      	ldr	r2, [pc, #136]	@ (80017cc <UART5_GPIO_Init+0xa8>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b20      	ldr	r3, [pc, #128]	@ (80017cc <UART5_GPIO_Init+0xa8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <UART5_GPIO_Init+0xa8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a1b      	ldr	r2, [pc, #108]	@ (80017cc <UART5_GPIO_Init+0xa8>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <UART5_GPIO_Init+0xa8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

    /* Enable UART5 Clock */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <UART5_GPIO_Init+0xa8>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <UART5_GPIO_Init+0xa8>)
 800177c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001780:	6413      	str	r3, [r2, #64]	@ 0x40
 8001782:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <UART5_GPIO_Init+0xa8>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]

    /* Configure PC12 for UART5 TX */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800178e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001792:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2303      	movs	r3, #3
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017a0:	2308      	movs	r3, #8
 80017a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4619      	mov	r1, r3
 80017aa:	4809      	ldr	r0, [pc, #36]	@ (80017d0 <UART5_GPIO_Init+0xac>)
 80017ac:	f000 fd34 	bl	8002218 <HAL_GPIO_Init>

    /* Configure PD2 for UART5 RX */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017b0:	2304      	movs	r3, #4
 80017b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017b4:	2308      	movs	r3, #8
 80017b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4619      	mov	r1, r3
 80017be:	4805      	ldr	r0, [pc, #20]	@ (80017d4 <UART5_GPIO_Init+0xb0>)
 80017c0:	f000 fd2a 	bl	8002218 <HAL_GPIO_Init>
}
 80017c4:	bf00      	nop
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020c00 	.word	0x40020c00

080017d8 <USART2_GPIO_Init>:

static void USART2_GPIO_Init(void){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

    /* Enable GPIO Clocks */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <USART2_GPIO_Init+0x88>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001860 <USART2_GPIO_Init+0x88>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <USART2_GPIO_Init+0x88>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]

    /* Enable USART2 Clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <USART2_GPIO_Init+0x88>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	4a13      	ldr	r2, [pc, #76]	@ (8001860 <USART2_GPIO_Init+0x88>)
 8001814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001818:	6413      	str	r3, [r2, #64]	@ 0x40
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <USART2_GPIO_Init+0x88>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]

    /* Configure PD5 for USART2 TX */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001826:	2320      	movs	r3, #32
 8001828:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001836:	2307      	movs	r3, #7
 8001838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	4619      	mov	r1, r3
 8001840:	4808      	ldr	r0, [pc, #32]	@ (8001864 <USART2_GPIO_Init+0x8c>)
 8001842:	f000 fce9 	bl	8002218 <HAL_GPIO_Init>

    /* Configure PD6 for USART2 RX */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001846:	2340      	movs	r3, #64	@ 0x40
 8001848:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4619      	mov	r1, r3
 8001850:	4804      	ldr	r0, [pc, #16]	@ (8001864 <USART2_GPIO_Init+0x8c>)
 8001852:	f000 fce1 	bl	8002218 <HAL_GPIO_Init>
}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40020c00 	.word	0x40020c00

08001868 <UART5_Init>:

bool_t UART5_Init(void){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
	UART5_GPIO_Init();
 800186e:	f7ff ff59 	bl	8001724 <UART5_GPIO_Init>

	bool_t rtrn=true;
 8001872:	2301      	movs	r3, #1
 8001874:	71fb      	strb	r3, [r7, #7]

    huart5.Instance = UART5;
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <UART5_Init+0x74>)
 8001878:	4a19      	ldr	r2, [pc, #100]	@ (80018e0 <UART5_Init+0x78>)
 800187a:	601a      	str	r2, [r3, #0]
    huart5.Init.BaudRate = 9600;
 800187c:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <UART5_Init+0x74>)
 800187e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001882:	605a      	str	r2, [r3, #4]
    huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <UART5_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
    huart5.Init.StopBits = UART_STOPBITS_1;
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <UART5_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
    huart5.Init.Parity = UART_PARITY_NONE;
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <UART5_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
    huart5.Init.Mode = UART_MODE_TX_RX;
 8001896:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <UART5_Init+0x74>)
 8001898:	220c      	movs	r2, #12
 800189a:	615a      	str	r2, [r3, #20]
    huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189c:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <UART5_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <UART5_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart5) != HAL_OK){rtrn=false;}
 80018a8:	480c      	ldr	r0, [pc, #48]	@ (80018dc <UART5_Init+0x74>)
 80018aa:	f001 fc73 	bl	8003194 <HAL_UART_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <UART5_Init+0x50>
 80018b4:	2300      	movs	r3, #0
 80018b6:	71fb      	strb	r3, [r7, #7]

    // Habilitar interrupciones de UART5
	HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	2035      	movs	r0, #53	@ 0x35
 80018be:	f000 fbe2 	bl	8002086 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART5_IRQn);
 80018c2:	2035      	movs	r0, #53	@ 0x35
 80018c4:	f000 fbfb 	bl	80020be <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_char, 1);
 80018c8:	2201      	movs	r2, #1
 80018ca:	4906      	ldr	r1, [pc, #24]	@ (80018e4 <UART5_Init+0x7c>)
 80018cc:	4803      	ldr	r0, [pc, #12]	@ (80018dc <UART5_Init+0x74>)
 80018ce:	f001 fd40 	bl	8003352 <HAL_UART_Receive_IT>

	return rtrn;
 80018d2:	79fb      	ldrb	r3, [r7, #7]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000320 	.word	0x20000320
 80018e0:	40005000 	.word	0x40005000
 80018e4:	20000364 	.word	0x20000364

080018e8 <USART2_Init>:

bool_t USART2_Init(void){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	@ 0x30
 80018ec:	af00      	add	r7, sp, #0
	USART2_GPIO_Init();
 80018ee:	f7ff ff73 	bl	80017d8 <USART2_GPIO_Init>

	bool_t rtrn=true;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	char baudRate[10]={};
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80018fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	809a      	strh	r2, [r3, #4]
	char wordLength[10]={};
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	809a      	strh	r2, [r3, #4]
	char stopBits[10]={};
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	809a      	strh	r2, [r3, #4]
	char parityBits[10]={};
 8001922:	2300      	movs	r3, #0
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	809a      	strh	r2, [r3, #4]

    huart2.Instance = USART2;
 800192e:	4b39      	ldr	r3, [pc, #228]	@ (8001a14 <USART2_Init+0x12c>)
 8001930:	4a39      	ldr	r2, [pc, #228]	@ (8001a18 <USART2_Init+0x130>)
 8001932:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001934:	4b37      	ldr	r3, [pc, #220]	@ (8001a14 <USART2_Init+0x12c>)
 8001936:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800193a:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800193c:	4b35      	ldr	r3, [pc, #212]	@ (8001a14 <USART2_Init+0x12c>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001942:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <USART2_Init+0x12c>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001948:	4b32      	ldr	r3, [pc, #200]	@ (8001a14 <USART2_Init+0x12c>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800194e:	4b31      	ldr	r3, [pc, #196]	@ (8001a14 <USART2_Init+0x12c>)
 8001950:	220c      	movs	r2, #12
 8001952:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001954:	4b2f      	ldr	r3, [pc, #188]	@ (8001a14 <USART2_Init+0x12c>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800195a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <USART2_Init+0x12c>)
 800195c:	2200      	movs	r2, #0
 800195e:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK){rtrn=false;}
 8001960:	482c      	ldr	r0, [pc, #176]	@ (8001a14 <USART2_Init+0x12c>)
 8001962:	f001 fc17 	bl	8003194 <HAL_UART_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <USART2_Init+0x8a>
 800196c:	2300      	movs	r3, #0
 800196e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    sprintf(baudRate, "%d",(int)huart2.Init.BaudRate);
 8001972:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <USART2_Init+0x12c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	461a      	mov	r2, r3
 8001978:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800197c:	4927      	ldr	r1, [pc, #156]	@ (8001a1c <USART2_Init+0x134>)
 800197e:	4618      	mov	r0, r3
 8001980:	f003 fc2c 	bl	80051dc <siprintf>
	sprintf(wordLength, "%d",(int)huart2.Init.WordLength);
 8001984:	4b23      	ldr	r3, [pc, #140]	@ (8001a14 <USART2_Init+0x12c>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	461a      	mov	r2, r3
 800198a:	f107 0318 	add.w	r3, r7, #24
 800198e:	4923      	ldr	r1, [pc, #140]	@ (8001a1c <USART2_Init+0x134>)
 8001990:	4618      	mov	r0, r3
 8001992:	f003 fc23 	bl	80051dc <siprintf>
	sprintf(stopBits, "%d",(int)huart2.Init.StopBits);
 8001996:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <USART2_Init+0x12c>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	461a      	mov	r2, r3
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	491e      	ldr	r1, [pc, #120]	@ (8001a1c <USART2_Init+0x134>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 fc1a 	bl	80051dc <siprintf>
	sprintf(parityBits, "%d",(int)huart2.Init.Parity);
 80019a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <USART2_Init+0x12c>)
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	461a      	mov	r2, r3
 80019ae:	463b      	mov	r3, r7
 80019b0:	491a      	ldr	r1, [pc, #104]	@ (8001a1c <USART2_Init+0x134>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 fc12 	bl	80051dc <siprintf>

	USART2_Send_String((uint8_t*)"Uart Inicializada correctamente\n\r");
 80019b8:	4819      	ldr	r0, [pc, #100]	@ (8001a20 <USART2_Init+0x138>)
 80019ba:	f000 f83f 	bl	8001a3c <USART2_Send_String>
	USART2_Send_String((uint8_t*)"-----Parametros Configurados-----\n\r");
 80019be:	4819      	ldr	r0, [pc, #100]	@ (8001a24 <USART2_Init+0x13c>)
 80019c0:	f000 f83c 	bl	8001a3c <USART2_Send_String>
	USART2_Send_String((uint8_t*)"\n\rBaud rate: ");
 80019c4:	4818      	ldr	r0, [pc, #96]	@ (8001a28 <USART2_Init+0x140>)
 80019c6:	f000 f839 	bl	8001a3c <USART2_Send_String>
	USART2_Send_String((uint8_t*)baudRate);
 80019ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f834 	bl	8001a3c <USART2_Send_String>
	USART2_Send_String((uint8_t*)"\n\rWord Length: ");
 80019d4:	4815      	ldr	r0, [pc, #84]	@ (8001a2c <USART2_Init+0x144>)
 80019d6:	f000 f831 	bl	8001a3c <USART2_Send_String>
	USART2_Send_String((uint8_t*)wordLength);
 80019da:	f107 0318 	add.w	r3, r7, #24
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f82c 	bl	8001a3c <USART2_Send_String>
	USART2_Send_String((uint8_t*)"\n\rStop Bits: ");
 80019e4:	4812      	ldr	r0, [pc, #72]	@ (8001a30 <USART2_Init+0x148>)
 80019e6:	f000 f829 	bl	8001a3c <USART2_Send_String>
	USART2_Send_String((uint8_t*)stopBits);
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f824 	bl	8001a3c <USART2_Send_String>
	USART2_Send_String((uint8_t*)"\n\rParity: ");
 80019f4:	480f      	ldr	r0, [pc, #60]	@ (8001a34 <USART2_Init+0x14c>)
 80019f6:	f000 f821 	bl	8001a3c <USART2_Send_String>
	USART2_Send_String((uint8_t*)parityBits);
 80019fa:	463b      	mov	r3, r7
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f81d 	bl	8001a3c <USART2_Send_String>
	USART2_Send_String((uint8_t*)"\n\r");
 8001a02:	480d      	ldr	r0, [pc, #52]	@ (8001a38 <USART2_Init+0x150>)
 8001a04:	f000 f81a 	bl	8001a3c <USART2_Send_String>

	return rtrn;
 8001a08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3730      	adds	r7, #48	@ 0x30
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200002dc 	.word	0x200002dc
 8001a18:	40004400 	.word	0x40004400
 8001a1c:	08007418 	.word	0x08007418
 8001a20:	0800741c 	.word	0x0800741c
 8001a24:	08007440 	.word	0x08007440
 8001a28:	08007464 	.word	0x08007464
 8001a2c:	08007474 	.word	0x08007474
 8001a30:	08007484 	.word	0x08007484
 8001a34:	08007494 	.word	0x08007494
 8001a38:	080074a0 	.word	0x080074a0

08001a3c <USART2_Send_String>:

void UART5_Send_String(uint8_t * pstring){
	HAL_UART_Transmit(&huart5,(uint8_t*) pstring, strlen((const char*) pstring), UART_MAX_TIMEOUT);
}

void USART2_Send_String(uint8_t * pstring){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) pstring, strlen((const char*) pstring), UART_MAX_TIMEOUT);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7fe fbdd 	bl	8000204 <strlen>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4803      	ldr	r0, [pc, #12]	@ (8001a64 <USART2_Send_String+0x28>)
 8001a56:	f001 fbea 	bl	800322e <HAL_UART_Transmit>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200002dc 	.word	0x200002dc

08001a68 <UART5_IRQHandler>:
    return stts;
}

// La función UART5_IRQHandler es la rutina de servicio de interrupción (ISR)
// que se llama automáticamente cuando ocurre una interrupción asociada al UART5.
void UART5_IRQHandler(void) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

	// La función HAL_UART_IRQHandler es parte de la HAL.
	// Se encarga de identificar qué tipo de evento de interrupción ocurrió.
	// Dependiendo del tipo, llamará a la función de callback correspondiente.
    HAL_UART_IRQHandler(&huart5);
 8001a6c:	4802      	ldr	r0, [pc, #8]	@ (8001a78 <UART5_IRQHandler+0x10>)
 8001a6e:	f001 fca1 	bl	80033b4 <HAL_UART_IRQHandler>
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000320 	.word	0x20000320

08001a7c <HAL_UART_RxCpltCallback>:

uint8_t nmea_incoming_buffer[NMEA_BUFFER_SIZE];
uint8_t nmea_ready_buffer[NMEA_BUFFER_SIZE];
uint8_t nmea_index = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

    if (huart->Instance == UART5) {
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1a      	ldr	r2, [pc, #104]	@ (8001af4 <HAL_UART_RxCpltCallback+0x78>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d128      	bne.n	8001ae0 <HAL_UART_RxCpltCallback+0x64>
        if (rx_char == '$'){
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <HAL_UART_RxCpltCallback+0x7c>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b24      	cmp	r3, #36	@ 0x24
 8001a94:	d119      	bne.n	8001aca <HAL_UART_RxCpltCallback+0x4e>
        	for (uint8_t i = 0; i < NMEA_BUFFER_SIZE; i++) {
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	e00c      	b.n	8001ab6 <HAL_UART_RxCpltCallback+0x3a>
        	    nmea_ready_buffer[i] = nmea_incoming_buffer[i];
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	4916      	ldr	r1, [pc, #88]	@ (8001afc <HAL_UART_RxCpltCallback+0x80>)
 8001aa2:	5c89      	ldrb	r1, [r1, r2]
 8001aa4:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <HAL_UART_RxCpltCallback+0x84>)
 8001aa6:	54d1      	strb	r1, [r2, r3]
        	    nmea_incoming_buffer[i] = 0;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <HAL_UART_RxCpltCallback+0x80>)
 8001aac:	2100      	movs	r1, #0
 8001aae:	54d1      	strb	r1, [r2, r3]
        	for (uint8_t i = 0; i < NMEA_BUFFER_SIZE; i++) {
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	daee      	bge.n	8001a9c <HAL_UART_RxCpltCallback+0x20>
        	}
            nmea_index = 0;
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <HAL_UART_RxCpltCallback+0x88>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
            nmea_ready = true;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <HAL_UART_RxCpltCallback+0x8c>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
        }
        nmea_incoming_buffer[nmea_index++] = rx_char;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <HAL_UART_RxCpltCallback+0x88>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	b2d1      	uxtb	r1, r2
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8001b04 <HAL_UART_RxCpltCallback+0x88>)
 8001ad4:	7011      	strb	r1, [r2, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <HAL_UART_RxCpltCallback+0x7c>)
 8001ada:	7819      	ldrb	r1, [r3, #0]
 8001adc:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <HAL_UART_RxCpltCallback+0x80>)
 8001ade:	5499      	strb	r1, [r3, r2]
	}

	// Continuar recibiendo el siguiente carácter
	HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_char, 1);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4905      	ldr	r1, [pc, #20]	@ (8001af8 <HAL_UART_RxCpltCallback+0x7c>)
 8001ae4:	4809      	ldr	r0, [pc, #36]	@ (8001b0c <HAL_UART_RxCpltCallback+0x90>)
 8001ae6:	f001 fc34 	bl	8003352 <HAL_UART_Receive_IT>
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40005000 	.word	0x40005000
 8001af8:	20000364 	.word	0x20000364
 8001afc:	20000368 	.word	0x20000368
 8001b00:	200003e8 	.word	0x200003e8
 8001b04:	20000468 	.word	0x20000468
 8001b08:	20000365 	.word	0x20000365
 8001b0c:	20000320 	.word	0x20000320

08001b10 <nmea_sentence_received>:

bool_t nmea_sentence_received(void){
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
	bool_t rtrn = false;
 8001b16:	2300      	movs	r3, #0
 8001b18:	71fb      	strb	r3, [r7, #7]
	if (nmea_ready==true){
 8001b1a:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <nmea_sentence_received+0x2c>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <nmea_sentence_received+0x1c>
		rtrn=true;
 8001b22:	2301      	movs	r3, #1
 8001b24:	71fb      	strb	r3, [r7, #7]
		nmea_ready=false;
 8001b26:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <nmea_sentence_received+0x2c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
	}
	return rtrn;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000365 	.word	0x20000365

08001b40 <get_nmea_sentence>:

char* get_nmea_sentence(void) {
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
    return (char*) nmea_ready_buffer;
 8001b44:	4b02      	ldr	r3, [pc, #8]	@ (8001b50 <get_nmea_sentence+0x10>)
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	200003e8 	.word	0x200003e8

08001b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <SystemInit+0x60>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b5e:	4a15      	ldr	r2, [pc, #84]	@ (8001bb4 <SystemInit+0x60>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <SystemInit+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <SystemInit+0x64>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b74:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <SystemInit+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <SystemInit+0x64>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <SystemInit+0x64>)
 8001b80:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <SystemInit+0x64>)
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bbc <SystemInit+0x68>)
 8001b8e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b90:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <SystemInit+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a08      	ldr	r2, [pc, #32]	@ (8001bb8 <SystemInit+0x64>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <SystemInit+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ba2:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <SystemInit+0x60>)
 8001ba4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ba8:	609a      	str	r2, [r3, #8]
#endif
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	24003010 	.word	0x24003010

08001bc0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001bd2:	bf00      	nop
 8001bd4:	e7fd      	b.n	8001bd2 <HardFault_Handler+0x4>

08001bd6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001bda:	bf00      	nop
 8001bdc:	e7fd      	b.n	8001bda <MemManage_Handler+0x4>

08001bde <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001be2:	bf00      	nop
 8001be4:	e7fd      	b.n	8001be2 <BusFault_Handler+0x4>

08001be6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001bea:	bf00      	nop
 8001bec:	e7fd      	b.n	8001bea <UsageFault_Handler+0x4>

08001bee <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001c1c:	f000 f914 	bl	8001e48 <HAL_IncTick>
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
	return 1;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_kill>:

int _kill(int pid, int sig)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c3e:	f003 fba3 	bl	8005388 <__errno>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2216      	movs	r2, #22
 8001c46:	601a      	str	r2, [r3, #0]
	return -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_exit>:

void _exit (int status)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ffe7 	bl	8001c34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c66:	bf00      	nop
 8001c68:	e7fd      	b.n	8001c66 <_exit+0x12>

08001c6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e00a      	b.n	8001c92 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c7c:	f3af 8000 	nop.w
 8001c80:	4601      	mov	r1, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	60ba      	str	r2, [r7, #8]
 8001c88:	b2ca      	uxtb	r2, r1
 8001c8a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	dbf0      	blt.n	8001c7c <_read+0x12>
	}

return len;
 8001c9a:	687b      	ldr	r3, [r7, #4]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e009      	b.n	8001cca <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	60ba      	str	r2, [r7, #8]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	dbf1      	blt.n	8001cb6 <_write+0x12>
	}
	return len;
 8001cd2:	687b      	ldr	r3, [r7, #4]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_close>:

int _close(int file)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	return -1;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d04:	605a      	str	r2, [r3, #4]
	return 0;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_isatty>:

int _isatty(int file)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
	return 0;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <_sbrk+0x5c>)
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <_sbrk+0x60>)
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <_sbrk+0x64>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	@ (8001dac <_sbrk+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d207      	bcs.n	8001d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d74:	f003 fb08 	bl	8005388 <__errno>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d82:	e009      	b.n	8001d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a05      	ldr	r2, [pc, #20]	@ (8001da8 <_sbrk+0x64>)
 8001d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20030000 	.word	0x20030000
 8001da4:	00000400 	.word	0x00000400
 8001da8:	2000046c 	.word	0x2000046c
 8001dac:	200005c0 	.word	0x200005c0

08001db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db4:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <HAL_Init+0x34>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <HAL_Init+0x34>)
 8001dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dbe:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc0:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <HAL_Init+0x34>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a07      	ldr	r2, [pc, #28]	@ (8001de4 <HAL_Init+0x34>)
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f000 f94f 	bl	8002070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd2:	200f      	movs	r0, #15
 8001dd4:	f000 f808 	bl	8001de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd8:	f001 f9a0 	bl	800311c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023c00 	.word	0x40023c00

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <HAL_InitTick+0x54>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_InitTick+0x58>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f967 	bl	80020da <HAL_SYSTICK_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00e      	b.n	8001e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b0f      	cmp	r3, #15
 8001e1a:	d80a      	bhi.n	8001e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e24:	f000 f92f 	bl	8002086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e28:	4a06      	ldr	r2, [pc, #24]	@ (8001e44 <HAL_InitTick+0x5c>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000008 	.word	0x20000008
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_IncTick+0x20>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_IncTick+0x24>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <HAL_IncTick+0x24>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20000470 	.word	0x20000470

08001e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <HAL_GetTick+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000470 	.word	0x20000470

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff ffee 	bl	8001e70 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eae:	bf00      	nop
 8001eb0:	f7ff ffde 	bl	8001e70 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	@ (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	@ (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	@ (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	@ (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	@ 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	@ 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800203c:	d301      	bcc.n	8002042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203e:	2301      	movs	r3, #1
 8002040:	e00f      	b.n	8002062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002042:	4a0a      	ldr	r2, [pc, #40]	@ (800206c <SysTick_Config+0x40>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204a:	210f      	movs	r1, #15
 800204c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002050:	f7ff ff8e 	bl	8001f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <SysTick_Config+0x40>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205a:	4b04      	ldr	r3, [pc, #16]	@ (800206c <SysTick_Config+0x40>)
 800205c:	2207      	movs	r2, #7
 800205e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	e000e010 	.word	0xe000e010

08002070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff29 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002098:	f7ff ff3e 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 800209c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7ff ff8e 	bl	8001fc4 <NVIC_EncodePriority>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff5d 	bl	8001f70 <__NVIC_SetPriority>
}
 80020b6:	bf00      	nop
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff31 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffa2 	bl	800202c <SysTick_Config>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff feb6 	bl	8001e70 <HAL_GetTick>
 8002104:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d008      	beq.n	8002124 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2280      	movs	r2, #128	@ 0x80
 8002116:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e052      	b.n	80021ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0216 	bic.w	r2, r2, #22
 8002132:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002142:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <HAL_DMA_Abort+0x62>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0208 	bic.w	r2, r2, #8
 8002162:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002174:	e013      	b.n	800219e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002176:	f7ff fe7b 	bl	8001e70 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b05      	cmp	r3, #5
 8002182:	d90c      	bls.n	800219e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2203      	movs	r2, #3
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e015      	b.n	80021ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e4      	bne.n	8002176 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b0:	223f      	movs	r2, #63	@ 0x3f
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d004      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2280      	movs	r2, #128	@ 0x80
 80021ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e00c      	b.n	800220a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2205      	movs	r2, #5
 80021f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	@ 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	e177      	b.n	8002524 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	429a      	cmp	r2, r3
 800224e:	f040 8166 	bne.w	800251e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d005      	beq.n	800226a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002266:	2b02      	cmp	r3, #2
 8002268:	d130      	bne.n	80022cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	2203      	movs	r2, #3
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a0:	2201      	movs	r2, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 0201 	and.w	r2, r3, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d017      	beq.n	8002308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d123      	bne.n	800235c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	08da      	lsrs	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3208      	adds	r2, #8
 800231c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0203 	and.w	r2, r3, #3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80c0 	beq.w	800251e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b66      	ldr	r3, [pc, #408]	@ (800253c <HAL_GPIO_Init+0x324>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	4a65      	ldr	r2, [pc, #404]	@ (800253c <HAL_GPIO_Init+0x324>)
 80023a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ae:	4b63      	ldr	r3, [pc, #396]	@ (800253c <HAL_GPIO_Init+0x324>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ba:	4a61      	ldr	r2, [pc, #388]	@ (8002540 <HAL_GPIO_Init+0x328>)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	3302      	adds	r3, #2
 80023c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	220f      	movs	r2, #15
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a58      	ldr	r2, [pc, #352]	@ (8002544 <HAL_GPIO_Init+0x32c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d037      	beq.n	8002456 <HAL_GPIO_Init+0x23e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a57      	ldr	r2, [pc, #348]	@ (8002548 <HAL_GPIO_Init+0x330>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d031      	beq.n	8002452 <HAL_GPIO_Init+0x23a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a56      	ldr	r2, [pc, #344]	@ (800254c <HAL_GPIO_Init+0x334>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d02b      	beq.n	800244e <HAL_GPIO_Init+0x236>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a55      	ldr	r2, [pc, #340]	@ (8002550 <HAL_GPIO_Init+0x338>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d025      	beq.n	800244a <HAL_GPIO_Init+0x232>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a54      	ldr	r2, [pc, #336]	@ (8002554 <HAL_GPIO_Init+0x33c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d01f      	beq.n	8002446 <HAL_GPIO_Init+0x22e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a53      	ldr	r2, [pc, #332]	@ (8002558 <HAL_GPIO_Init+0x340>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d019      	beq.n	8002442 <HAL_GPIO_Init+0x22a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a52      	ldr	r2, [pc, #328]	@ (800255c <HAL_GPIO_Init+0x344>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0x226>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a51      	ldr	r2, [pc, #324]	@ (8002560 <HAL_GPIO_Init+0x348>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00d      	beq.n	800243a <HAL_GPIO_Init+0x222>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a50      	ldr	r2, [pc, #320]	@ (8002564 <HAL_GPIO_Init+0x34c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <HAL_GPIO_Init+0x21e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4f      	ldr	r2, [pc, #316]	@ (8002568 <HAL_GPIO_Init+0x350>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_GPIO_Init+0x21a>
 800242e:	2309      	movs	r3, #9
 8002430:	e012      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002432:	230a      	movs	r3, #10
 8002434:	e010      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002436:	2308      	movs	r3, #8
 8002438:	e00e      	b.n	8002458 <HAL_GPIO_Init+0x240>
 800243a:	2307      	movs	r3, #7
 800243c:	e00c      	b.n	8002458 <HAL_GPIO_Init+0x240>
 800243e:	2306      	movs	r3, #6
 8002440:	e00a      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002442:	2305      	movs	r3, #5
 8002444:	e008      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002446:	2304      	movs	r3, #4
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x240>
 800244a:	2303      	movs	r3, #3
 800244c:	e004      	b.n	8002458 <HAL_GPIO_Init+0x240>
 800244e:	2302      	movs	r3, #2
 8002450:	e002      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002456:	2300      	movs	r3, #0
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	f002 0203 	and.w	r2, r2, #3
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	4093      	lsls	r3, r2
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002468:	4935      	ldr	r1, [pc, #212]	@ (8002540 <HAL_GPIO_Init+0x328>)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002476:	4b3d      	ldr	r3, [pc, #244]	@ (800256c <HAL_GPIO_Init+0x354>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800249a:	4a34      	ldr	r2, [pc, #208]	@ (800256c <HAL_GPIO_Init+0x354>)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024a0:	4b32      	ldr	r3, [pc, #200]	@ (800256c <HAL_GPIO_Init+0x354>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c4:	4a29      	ldr	r2, [pc, #164]	@ (800256c <HAL_GPIO_Init+0x354>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ca:	4b28      	ldr	r3, [pc, #160]	@ (800256c <HAL_GPIO_Init+0x354>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ee:	4a1f      	ldr	r2, [pc, #124]	@ (800256c <HAL_GPIO_Init+0x354>)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f4:	4b1d      	ldr	r3, [pc, #116]	@ (800256c <HAL_GPIO_Init+0x354>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002518:	4a14      	ldr	r2, [pc, #80]	@ (800256c <HAL_GPIO_Init+0x354>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3301      	adds	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b0f      	cmp	r3, #15
 8002528:	f67f ae84 	bls.w	8002234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3724      	adds	r7, #36	@ 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	40013800 	.word	0x40013800
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	40020800 	.word	0x40020800
 8002550:	40020c00 	.word	0x40020c00
 8002554:	40021000 	.word	0x40021000
 8002558:	40021400 	.word	0x40021400
 800255c:	40021800 	.word	0x40021800
 8002560:	40021c00 	.word	0x40021c00
 8002564:	40022000 	.word	0x40022000
 8002568:	40022400 	.word	0x40022400
 800256c:	40013c00 	.word	0x40013c00

08002570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e12b      	b.n	80027da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f92e 	bl	80027f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2224      	movs	r2, #36	@ 0x24
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025d4:	f000 fdb6 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 80025d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4a81      	ldr	r2, [pc, #516]	@ (80027e4 <HAL_I2C_Init+0x274>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d807      	bhi.n	80025f4 <HAL_I2C_Init+0x84>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4a80      	ldr	r2, [pc, #512]	@ (80027e8 <HAL_I2C_Init+0x278>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	bf94      	ite	ls
 80025ec:	2301      	movls	r3, #1
 80025ee:	2300      	movhi	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e006      	b.n	8002602 <HAL_I2C_Init+0x92>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4a7d      	ldr	r2, [pc, #500]	@ (80027ec <HAL_I2C_Init+0x27c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	bf94      	ite	ls
 80025fc:	2301      	movls	r3, #1
 80025fe:	2300      	movhi	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0e7      	b.n	80027da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4a78      	ldr	r2, [pc, #480]	@ (80027f0 <HAL_I2C_Init+0x280>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0c9b      	lsrs	r3, r3, #18
 8002614:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a6a      	ldr	r2, [pc, #424]	@ (80027e4 <HAL_I2C_Init+0x274>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d802      	bhi.n	8002644 <HAL_I2C_Init+0xd4>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3301      	adds	r3, #1
 8002642:	e009      	b.n	8002658 <HAL_I2C_Init+0xe8>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	4a69      	ldr	r2, [pc, #420]	@ (80027f4 <HAL_I2C_Init+0x284>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	3301      	adds	r3, #1
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	430b      	orrs	r3, r1
 800265e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800266a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	495c      	ldr	r1, [pc, #368]	@ (80027e4 <HAL_I2C_Init+0x274>)
 8002674:	428b      	cmp	r3, r1
 8002676:	d819      	bhi.n	80026ac <HAL_I2C_Init+0x13c>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1e59      	subs	r1, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fbb1 f3f3 	udiv	r3, r1, r3
 8002686:	1c59      	adds	r1, r3, #1
 8002688:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800268c:	400b      	ands	r3, r1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_I2C_Init+0x138>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1e59      	subs	r1, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a6:	e051      	b.n	800274c <HAL_I2C_Init+0x1dc>
 80026a8:	2304      	movs	r3, #4
 80026aa:	e04f      	b.n	800274c <HAL_I2C_Init+0x1dc>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d111      	bne.n	80026d8 <HAL_I2C_Init+0x168>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	440b      	add	r3, r1
 80026c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e012      	b.n	80026fe <HAL_I2C_Init+0x18e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1e58      	subs	r0, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	0099      	lsls	r1, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Init+0x196>
 8002702:	2301      	movs	r3, #1
 8002704:	e022      	b.n	800274c <HAL_I2C_Init+0x1dc>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10e      	bne.n	800272c <HAL_I2C_Init+0x1bc>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e58      	subs	r0, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	440b      	add	r3, r1
 800271c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002720:	3301      	adds	r3, #1
 8002722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800272a:	e00f      	b.n	800274c <HAL_I2C_Init+0x1dc>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1e58      	subs	r0, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	0099      	lsls	r1, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002742:	3301      	adds	r3, #1
 8002744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002748:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	6809      	ldr	r1, [r1, #0]
 8002750:	4313      	orrs	r3, r2
 8002752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800277a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6911      	ldr	r1, [r2, #16]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68d2      	ldr	r2, [r2, #12]
 8002786:	4311      	orrs	r1, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	430b      	orrs	r3, r1
 800278e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	000186a0 	.word	0x000186a0
 80027e8:	001e847f 	.word	0x001e847f
 80027ec:	003d08ff 	.word	0x003d08ff
 80027f0:	431bde83 	.word	0x431bde83
 80027f4:	10624dd3 	.word	0x10624dd3

080027f8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	461a      	mov	r2, r3
 8002818:	460b      	mov	r3, r1
 800281a:	817b      	strh	r3, [r7, #10]
 800281c:	4613      	mov	r3, r2
 800281e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff fb26 	bl	8001e70 <HAL_GetTick>
 8002824:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b20      	cmp	r3, #32
 8002830:	f040 80e0 	bne.w	80029f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	2319      	movs	r3, #25
 800283a:	2201      	movs	r2, #1
 800283c:	4970      	ldr	r1, [pc, #448]	@ (8002a00 <HAL_I2C_Master_Transmit+0x1f4>)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fa92 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	e0d3      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_I2C_Master_Transmit+0x50>
 8002858:	2302      	movs	r3, #2
 800285a:	e0cc      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x1ea>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d007      	beq.n	8002882 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002890:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2221      	movs	r2, #33	@ 0x21
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2210      	movs	r2, #16
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	893a      	ldrh	r2, [r7, #8]
 80028b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4a50      	ldr	r2, [pc, #320]	@ (8002a04 <HAL_I2C_Master_Transmit+0x1f8>)
 80028c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028c4:	8979      	ldrh	r1, [r7, #10]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	6a3a      	ldr	r2, [r7, #32]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f9ca 	bl	8002c64 <I2C_MasterRequestWrite>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e08d      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028f0:	e066      	b.n	80029c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	6a39      	ldr	r1, [r7, #32]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fb0c 	bl	8002f14 <I2C_WaitOnTXEFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	2b04      	cmp	r3, #4
 8002908:	d107      	bne.n	800291a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002918:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06b      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b04      	cmp	r3, #4
 800295a:	d11b      	bne.n	8002994 <HAL_I2C_Master_Transmit+0x188>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d017      	beq.n	8002994 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	6a39      	ldr	r1, [r7, #32]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fafc 	bl	8002f96 <I2C_WaitOnBTFFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00d      	beq.n	80029c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d107      	bne.n	80029bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e01a      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d194      	bne.n	80028f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	00100002 	.word	0x00100002
 8002a04:	ffff0000 	.word	0xffff0000

08002a08 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	@ 0x28
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	460b      	mov	r3, r1
 8002a16:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a18:	f7ff fa2a 	bl	8001e70 <HAL_GetTick>
 8002a1c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	f040 8111 	bne.w	8002c52 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2319      	movs	r3, #25
 8002a36:	2201      	movs	r2, #1
 8002a38:	4988      	ldr	r1, [pc, #544]	@ (8002c5c <HAL_I2C_IsDeviceReady+0x254>)
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f994 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
 8002a48:	e104      	b.n	8002c54 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_I2C_IsDeviceReady+0x50>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e0fd      	b.n	8002c54 <HAL_I2C_IsDeviceReady+0x24c>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d007      	beq.n	8002a7e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2224      	movs	r2, #36	@ 0x24
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a70      	ldr	r2, [pc, #448]	@ (8002c60 <HAL_I2C_IsDeviceReady+0x258>)
 8002aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ab0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f952 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad8:	d103      	bne.n	8002ae2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ae0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0b6      	b.n	8002c54 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ae6:	897b      	ldrh	r3, [r7, #10]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002af4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002af6:	f7ff f9bb 	bl	8001e70 <HAL_GetTick>
 8002afa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	bf0c      	ite	eq
 8002b0a:	2301      	moveq	r3, #1
 8002b0c:	2300      	movne	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b20:	bf0c      	ite	eq
 8002b22:	2301      	moveq	r3, #1
 8002b24:	2300      	movne	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b2a:	e025      	b.n	8002b78 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b2c:	f7ff f9a0 	bl	8001e70 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d302      	bcc.n	8002b42 <HAL_I2C_IsDeviceReady+0x13a>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d103      	bne.n	8002b4a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	22a0      	movs	r2, #160	@ 0xa0
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b82:	d005      	beq.n	8002b90 <HAL_I2C_IsDeviceReady+0x188>
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <HAL_I2C_IsDeviceReady+0x188>
 8002b8a:	7dbb      	ldrb	r3, [r7, #22]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0cd      	beq.n	8002b2c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d129      	bne.n	8002bfa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2319      	movs	r3, #25
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	4921      	ldr	r1, [pc, #132]	@ (8002c5c <HAL_I2C_IsDeviceReady+0x254>)
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f8c6 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e036      	b.n	8002c54 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e02c      	b.n	8002c54 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c08:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c12:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2319      	movs	r3, #25
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	490f      	ldr	r1, [pc, #60]	@ (8002c5c <HAL_I2C_IsDeviceReady+0x254>)
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f8a2 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e012      	b.n	8002c54 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	3301      	adds	r3, #1
 8002c32:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	f4ff af32 	bcc.w	8002aa2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
  }
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	00100002 	.word	0x00100002
 8002c60:	ffff0000 	.word	0xffff0000

08002c64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	460b      	mov	r3, r1
 8002c72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d006      	beq.n	8002c8e <I2C_MasterRequestWrite+0x2a>
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d003      	beq.n	8002c8e <I2C_MasterRequestWrite+0x2a>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c8c:	d108      	bne.n	8002ca0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e00b      	b.n	8002cb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca4:	2b12      	cmp	r3, #18
 8002ca6:	d107      	bne.n	8002cb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f84f 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cde:	d103      	bne.n	8002ce8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e035      	b.n	8002d58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cf4:	d108      	bne.n	8002d08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	e01b      	b.n	8002d40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d08:	897b      	ldrh	r3, [r7, #10]
 8002d0a:	11db      	asrs	r3, r3, #7
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f003 0306 	and.w	r3, r3, #6
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f063 030f 	orn	r3, r3, #15
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	490e      	ldr	r1, [pc, #56]	@ (8002d60 <I2C_MasterRequestWrite+0xfc>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f875 	bl	8002e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e010      	b.n	8002d58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d36:	897b      	ldrh	r3, [r7, #10]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4907      	ldr	r1, [pc, #28]	@ (8002d64 <I2C_MasterRequestWrite+0x100>)
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f865 	bl	8002e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	00010008 	.word	0x00010008
 8002d64:	00010002 	.word	0x00010002

08002d68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d78:	e025      	b.n	8002dc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d80:	d021      	beq.n	8002dc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d82:	f7ff f875 	bl	8001e70 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d302      	bcc.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	f043 0220 	orr.w	r2, r3, #32
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e023      	b.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	0c1b      	lsrs	r3, r3, #16
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d10d      	bne.n	8002dec <I2C_WaitOnFlagUntilTimeout+0x84>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf0c      	ite	eq
 8002de2:	2301      	moveq	r3, #1
 8002de4:	2300      	movne	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	e00c      	b.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	43da      	mvns	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4013      	ands	r3, r2
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2301      	moveq	r3, #1
 8002e00:	2300      	movne	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d0b6      	beq.n	8002d7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e24:	e051      	b.n	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e34:	d123      	bne.n	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f043 0204 	orr.w	r2, r3, #4
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e046      	b.n	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e84:	d021      	beq.n	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e86:	f7fe fff3 	bl	8001e70 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d302      	bcc.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d116      	bne.n	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	f043 0220 	orr.w	r2, r3, #32
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e020      	b.n	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	0c1b      	lsrs	r3, r3, #16
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10c      	bne.n	8002eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	e00b      	b.n	8002f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	43da      	mvns	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d18d      	bne.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f20:	e02d      	b.n	8002f7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f878 	bl	8003018 <I2C_IsAcknowledgeFailed>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e02d      	b.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f38:	d021      	beq.n	8002f7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7fe ff99 	bl	8001e70 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d116      	bne.n	8002f7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f043 0220 	orr.w	r2, r3, #32
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e007      	b.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f88:	2b80      	cmp	r3, #128	@ 0x80
 8002f8a:	d1ca      	bne.n	8002f22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fa2:	e02d      	b.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f837 	bl	8003018 <I2C_IsAcknowledgeFailed>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e02d      	b.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fba:	d021      	beq.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbc:	f7fe ff58 	bl	8001e70 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d116      	bne.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e007      	b.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b04      	cmp	r3, #4
 800300c:	d1ca      	bne.n	8002fa4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302e:	d11b      	bne.n	8003068 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003038:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	f043 0204 	orr.w	r2, r3, #4
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	@ 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	4b23      	ldr	r3, [pc, #140]	@ (8003114 <HAL_UART_MspInit+0x9c>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	4a22      	ldr	r2, [pc, #136]	@ (8003114 <HAL_UART_MspInit+0x9c>)
 800308a:	f043 0308 	orr.w	r3, r3, #8
 800308e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003090:	4b20      	ldr	r3, [pc, #128]	@ (8003114 <HAL_UART_MspInit+0x9c>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003114 <HAL_UART_MspInit+0x9c>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003114 <HAL_UART_MspInit+0x9c>)
 80030a6:	f043 0308 	orr.w	r3, r3, #8
 80030aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ac:	4b19      	ldr	r3, [pc, #100]	@ (8003114 <HAL_UART_MspInit+0x9c>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <HAL_UART_MspInit+0x9c>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	4a14      	ldr	r2, [pc, #80]	@ (8003114 <HAL_UART_MspInit+0x9c>)
 80030c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c8:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <HAL_UART_MspInit+0x9c>)
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80030d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80030de:	2301      	movs	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e2:	2303      	movs	r3, #3
 80030e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80030e6:	2307      	movs	r3, #7
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	4619      	mov	r1, r3
 80030f0:	4809      	ldr	r0, [pc, #36]	@ (8003118 <HAL_UART_MspInit+0xa0>)
 80030f2:	f7ff f891 	bl	8002218 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80030f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80030fc:	2307      	movs	r3, #7
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8003100:	f107 0314 	add.w	r3, r7, #20
 8003104:	4619      	mov	r1, r3
 8003106:	4804      	ldr	r0, [pc, #16]	@ (8003118 <HAL_UART_MspInit+0xa0>)
 8003108:	f7ff f886 	bl	8002218 <HAL_GPIO_Init>
}
 800310c:	bf00      	nop
 800310e:	3728      	adds	r7, #40	@ 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40023800 	.word	0x40023800
 8003118:	40020c00 	.word	0x40020c00

0800311c <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0

}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003130:	4b03      	ldr	r3, [pc, #12]	@ (8003140 <HAL_RCC_GetHCLKFreq+0x14>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000000 	.word	0x20000000

08003144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003148:	f7ff fff0 	bl	800312c <HAL_RCC_GetHCLKFreq>
 800314c:	4602      	mov	r2, r0
 800314e:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	0a9b      	lsrs	r3, r3, #10
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	4903      	ldr	r1, [pc, #12]	@ (8003168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800315a:	5ccb      	ldrb	r3, [r1, r3]
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	080074bc 	.word	0x080074bc

0800316c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003170:	f7ff ffdc 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b05      	ldr	r3, [pc, #20]	@ (800318c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	0b5b      	lsrs	r3, r3, #13
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	4903      	ldr	r1, [pc, #12]	@ (8003190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003182:	5ccb      	ldrb	r3, [r1, r3]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40023800 	.word	0x40023800
 8003190:	080074bc 	.word	0x080074bc

08003194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e03f      	b.n	8003226 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ff5c 	bl	8003078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2224      	movs	r2, #36	@ 0x24
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fddb 	bl	8003d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800320c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b08a      	sub	sp, #40	@ 0x28
 8003232:	af02      	add	r7, sp, #8
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b20      	cmp	r3, #32
 800324c:	d17c      	bne.n	8003348 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_UART_Transmit+0x2c>
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e075      	b.n	800334a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_UART_Transmit+0x3e>
 8003268:	2302      	movs	r3, #2
 800326a:	e06e      	b.n	800334a <HAL_UART_Transmit+0x11c>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2221      	movs	r2, #33	@ 0x21
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003282:	f7fe fdf5 	bl	8001e70 <HAL_GetTick>
 8003286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	88fa      	ldrh	r2, [r7, #6]
 800328c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	88fa      	ldrh	r2, [r7, #6]
 8003292:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800329c:	d108      	bne.n	80032b0 <HAL_UART_Transmit+0x82>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d104      	bne.n	80032b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e003      	b.n	80032b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80032c0:	e02a      	b.n	8003318 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	@ 0x80
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fb1f 	bl	8003910 <UART_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e036      	b.n	800334a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	3302      	adds	r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	e007      	b.n	800330a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	3301      	adds	r3, #1
 8003308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1cf      	bne.n	80032c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2200      	movs	r2, #0
 800332a:	2140      	movs	r1, #64	@ 0x40
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 faef 	bl	8003910 <UART_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e006      	b.n	800334a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	4613      	mov	r3, r2
 800335e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b20      	cmp	r3, #32
 800336a:	d11d      	bne.n	80033a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_UART_Receive_IT+0x26>
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e016      	b.n	80033aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_UART_Receive_IT+0x38>
 8003386:	2302      	movs	r3, #2
 8003388:	e00f      	b.n	80033aa <HAL_UART_Receive_IT+0x58>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	461a      	mov	r2, r3
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fb24 	bl	80039ec <UART_Start_Receive_IT>
 80033a4:	4603      	mov	r3, r0
 80033a6:	e000      	b.n	80033aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b0ba      	sub	sp, #232	@ 0xe8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80033f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10f      	bne.n	800341a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_UART_IRQHandler+0x66>
 8003406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fc03 	bl	8003c1e <UART_Receive_IT>
      return;
 8003418:	e256      	b.n	80038c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800341a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80de 	beq.w	80035e0 <HAL_UART_IRQHandler+0x22c>
 8003424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d106      	bne.n	800343e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003434:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80d1 	beq.w	80035e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_UART_IRQHandler+0xae>
 800344a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f043 0201 	orr.w	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_UART_IRQHandler+0xd2>
 800346e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	f043 0202 	orr.w	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_UART_IRQHandler+0xf6>
 8003492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	f043 0204 	orr.w	r2, r3, #4
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d011      	beq.n	80034da <HAL_UART_IRQHandler+0x126>
 80034b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	f043 0208 	orr.w	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 81ed 	beq.w	80038be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_UART_IRQHandler+0x14e>
 80034f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fb8e 	bl	8003c1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350c:	2b40      	cmp	r3, #64	@ 0x40
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <HAL_UART_IRQHandler+0x17a>
 8003526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d04f      	beq.n	80035ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa96 	bl	8003a60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353e:	2b40      	cmp	r3, #64	@ 0x40
 8003540:	d141      	bne.n	80035c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3314      	adds	r3, #20
 8003548:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003558:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800355c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3314      	adds	r3, #20
 800356a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800356e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800357a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1d9      	bne.n	8003542 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003592:	2b00      	cmp	r3, #0
 8003594:	d013      	beq.n	80035be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359a:	4a7d      	ldr	r2, [pc, #500]	@ (8003790 <HAL_UART_IRQHandler+0x3dc>)
 800359c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fe15 	bl	80021d2 <HAL_DMA_Abort_IT>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035b8:	4610      	mov	r0, r2
 80035ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	e00e      	b.n	80035dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f990 	bl	80038e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c4:	e00a      	b.n	80035dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f98c 	bl	80038e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	e006      	b.n	80035dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f988 	bl	80038e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80035da:	e170      	b.n	80038be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035dc:	bf00      	nop
    return;
 80035de:	e16e      	b.n	80038be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	f040 814a 	bne.w	800387e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8143 	beq.w	800387e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 813c 	beq.w	800387e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003606:	2300      	movs	r3, #0
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003626:	2b40      	cmp	r3, #64	@ 0x40
 8003628:	f040 80b4 	bne.w	8003794 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003638:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8140 	beq.w	80038c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800364a:	429a      	cmp	r2, r3
 800364c:	f080 8139 	bcs.w	80038c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003656:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003662:	f000 8088 	beq.w	8003776 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	330c      	adds	r3, #12
 800366c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800367c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003684:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003692:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800369e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1d9      	bne.n	8003666 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3314      	adds	r3, #20
 80036b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3314      	adds	r3, #20
 80036d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80036e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e1      	bne.n	80036b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3314      	adds	r3, #20
 80036f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003700:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003704:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3314      	adds	r3, #20
 800370e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003712:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003714:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003718:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e3      	bne.n	80036ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003746:	f023 0310 	bic.w	r3, r3, #16
 800374a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	330c      	adds	r3, #12
 8003754:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003758:	65ba      	str	r2, [r7, #88]	@ 0x58
 800375a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800375e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003760:	e841 2300 	strex	r3, r2, [r1]
 8003764:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e3      	bne.n	8003734 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fcbe 	bl	80020f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800377e:	b29b      	uxth	r3, r3
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	b29b      	uxth	r3, r3
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8b6 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800378c:	e099      	b.n	80038c2 <HAL_UART_IRQHandler+0x50e>
 800378e:	bf00      	nop
 8003790:	08003b27 	.word	0x08003b27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800379c:	b29b      	uxth	r3, r3
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 808b 	beq.w	80038c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8086 	beq.w	80038c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	330c      	adds	r3, #12
 80037da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80037de:	647a      	str	r2, [r7, #68]	@ 0x44
 80037e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e3      	bne.n	80037ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3314      	adds	r3, #20
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	623b      	str	r3, [r7, #32]
   return(result);
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3314      	adds	r3, #20
 8003812:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003816:	633a      	str	r2, [r7, #48]	@ 0x30
 8003818:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800381c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e3      	bne.n	80037f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	330c      	adds	r3, #12
 800383e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	e853 3f00 	ldrex	r3, [r3]
 8003846:	60fb      	str	r3, [r7, #12]
   return(result);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0310 	bic.w	r3, r3, #16
 800384e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	330c      	adds	r3, #12
 8003858:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800385c:	61fa      	str	r2, [r7, #28]
 800385e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	69b9      	ldr	r1, [r7, #24]
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	617b      	str	r3, [r7, #20]
   return(result);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e3      	bne.n	8003838 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003870:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003874:	4619      	mov	r1, r3
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f83e 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800387c:	e023      	b.n	80038c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800387e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_UART_IRQHandler+0x4ea>
 800388a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800388e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f959 	bl	8003b4e <UART_Transmit_IT>
    return;
 800389c:	e014      	b.n	80038c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00e      	beq.n	80038c8 <HAL_UART_IRQHandler+0x514>
 80038aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f999 	bl	8003bee <UART_EndTransmit_IT>
    return;
 80038bc:	e004      	b.n	80038c8 <HAL_UART_IRQHandler+0x514>
    return;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <HAL_UART_IRQHandler+0x514>
      return;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <HAL_UART_IRQHandler+0x514>
      return;
 80038c6:	bf00      	nop
  }
}
 80038c8:	37e8      	adds	r7, #232	@ 0xe8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop

080038d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b090      	sub	sp, #64	@ 0x40
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003920:	e050      	b.n	80039c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003928:	d04c      	beq.n	80039c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800392a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <UART_WaitOnFlagUntilTimeout+0x30>
 8003930:	f7fe fa9e 	bl	8001e70 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800393c:	429a      	cmp	r2, r3
 800393e:	d241      	bcs.n	80039c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003960:	637a      	str	r2, [r7, #52]	@ 0x34
 8003962:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003966:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003968:	e841 2300 	strex	r3, r2, [r1]
 800396c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800396e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e5      	bne.n	8003940 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3314      	adds	r3, #20
 800397a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	613b      	str	r3, [r7, #16]
   return(result);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3314      	adds	r3, #20
 8003992:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003994:	623a      	str	r2, [r7, #32]
 8003996:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	69f9      	ldr	r1, [r7, #28]
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e5      	bne.n	8003974 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e00f      	b.n	80039e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4013      	ands	r3, r2
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d09f      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3740      	adds	r7, #64	@ 0x40
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	88fa      	ldrh	r2, [r7, #6]
 8003a04:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2222      	movs	r2, #34	@ 0x22
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a30:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0220 	orr.w	r2, r2, #32
 8003a50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b095      	sub	sp, #84	@ 0x54
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	330c      	adds	r3, #12
 8003a86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a88:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e5      	bne.n	8003a68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3314      	adds	r3, #20
 8003aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3314      	adds	r3, #20
 8003aba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003abc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e5      	bne.n	8003a9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d119      	bne.n	8003b0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f023 0310 	bic.w	r3, r3, #16
 8003aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003af8:	61ba      	str	r2, [r7, #24]
 8003afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6979      	ldr	r1, [r7, #20]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	613b      	str	r3, [r7, #16]
   return(result);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b1a:	bf00      	nop
 8003b1c:	3754      	adds	r7, #84	@ 0x54
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7ff fecf 	bl	80038e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b21      	cmp	r3, #33	@ 0x21
 8003b60:	d13e      	bne.n	8003be0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b6a:	d114      	bne.n	8003b96 <UART_Transmit_IT+0x48>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d110      	bne.n	8003b96 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	1c9a      	adds	r2, r3, #2
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	621a      	str	r2, [r3, #32]
 8003b94:	e008      	b.n	8003ba8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	1c59      	adds	r1, r3, #1
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6211      	str	r1, [r2, #32]
 8003ba0:	781a      	ldrb	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fe5e 	bl	80038d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b08c      	sub	sp, #48	@ 0x30
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b22      	cmp	r3, #34	@ 0x22
 8003c30:	f040 80ab 	bne.w	8003d8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c3c:	d117      	bne.n	8003c6e <UART_Receive_IT+0x50>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d113      	bne.n	8003c6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	1c9a      	adds	r2, r3, #2
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c6c:	e026      	b.n	8003cbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c80:	d007      	beq.n	8003c92 <UART_Receive_IT+0x74>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <UART_Receive_IT+0x82>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e008      	b.n	8003cb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d15a      	bne.n	8003d86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0220 	bic.w	r2, r2, #32
 8003cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d135      	bne.n	8003d7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	613b      	str	r3, [r7, #16]
   return(result);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f023 0310 	bic.w	r3, r3, #16
 8003d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d36:	623a      	str	r2, [r7, #32]
 8003d38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	69f9      	ldr	r1, [r7, #28]
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e5      	bne.n	8003d16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d10a      	bne.n	8003d6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d72:	4619      	mov	r1, r3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff fdbf 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
 8003d7a:	e002      	b.n	8003d82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7fd fe7d 	bl	8001a7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e002      	b.n	8003d8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e000      	b.n	8003d8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
  }
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3730      	adds	r7, #48	@ 0x30
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d98:	b0c0      	sub	sp, #256	@ 0x100
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db0:	68d9      	ldr	r1, [r3, #12]
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	ea40 0301 	orr.w	r3, r0, r1
 8003dbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003dec:	f021 010c 	bic.w	r1, r1, #12
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0e:	6999      	ldr	r1, [r3, #24]
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	ea40 0301 	orr.w	r3, r0, r1
 8003e1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4b8f      	ldr	r3, [pc, #572]	@ (8004060 <UART_SetConfig+0x2cc>)
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d005      	beq.n	8003e34 <UART_SetConfig+0xa0>
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8004064 <UART_SetConfig+0x2d0>)
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d104      	bne.n	8003e3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e34:	f7ff f99a 	bl	800316c <HAL_RCC_GetPCLK2Freq>
 8003e38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e3c:	e003      	b.n	8003e46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e3e:	f7ff f981 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 8003e42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e50:	f040 810c 	bne.w	800406c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e66:	4622      	mov	r2, r4
 8003e68:	462b      	mov	r3, r5
 8003e6a:	1891      	adds	r1, r2, r2
 8003e6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e6e:	415b      	adcs	r3, r3
 8003e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e76:	4621      	mov	r1, r4
 8003e78:	eb12 0801 	adds.w	r8, r2, r1
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	eb43 0901 	adc.w	r9, r3, r1
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e96:	4690      	mov	r8, r2
 8003e98:	4699      	mov	r9, r3
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	eb18 0303 	adds.w	r3, r8, r3
 8003ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ea4:	462b      	mov	r3, r5
 8003ea6:	eb49 0303 	adc.w	r3, r9, r3
 8003eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003eba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ebe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	18db      	adds	r3, r3, r3
 8003ec6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ec8:	4613      	mov	r3, r2
 8003eca:	eb42 0303 	adc.w	r3, r2, r3
 8003ece:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ed0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ed4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ed8:	f7fc feb8 	bl	8000c4c <__aeabi_uldivmod>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4b61      	ldr	r3, [pc, #388]	@ (8004068 <UART_SetConfig+0x2d4>)
 8003ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	011c      	lsls	r4, r3, #4
 8003eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ef4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ef8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003efc:	4642      	mov	r2, r8
 8003efe:	464b      	mov	r3, r9
 8003f00:	1891      	adds	r1, r2, r2
 8003f02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f04:	415b      	adcs	r3, r3
 8003f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f12:	4649      	mov	r1, r9
 8003f14:	eb43 0b01 	adc.w	fp, r3, r1
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f2c:	4692      	mov	sl, r2
 8003f2e:	469b      	mov	fp, r3
 8003f30:	4643      	mov	r3, r8
 8003f32:	eb1a 0303 	adds.w	r3, sl, r3
 8003f36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	18db      	adds	r3, r3, r3
 8003f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f5e:	4613      	mov	r3, r2
 8003f60:	eb42 0303 	adc.w	r3, r2, r3
 8003f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f6e:	f7fc fe6d 	bl	8000c4c <__aeabi_uldivmod>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4611      	mov	r1, r2
 8003f78:	4b3b      	ldr	r3, [pc, #236]	@ (8004068 <UART_SetConfig+0x2d4>)
 8003f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2264      	movs	r2, #100	@ 0x64
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	1acb      	subs	r3, r1, r3
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f8e:	4b36      	ldr	r3, [pc, #216]	@ (8004068 <UART_SetConfig+0x2d4>)
 8003f90:	fba3 2302 	umull	r2, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f9c:	441c      	add	r4, r3
 8003f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fa8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	1891      	adds	r1, r2, r2
 8003fb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fb8:	415b      	adcs	r3, r3
 8003fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	1851      	adds	r1, r2, r1
 8003fc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	414b      	adcs	r3, r1
 8003fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fd8:	4659      	mov	r1, fp
 8003fda:	00cb      	lsls	r3, r1, #3
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	00ca      	lsls	r2, r1, #3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	4642      	mov	r2, r8
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	460a      	mov	r2, r1
 8003ff8:	eb42 0303 	adc.w	r3, r2, r3
 8003ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800400c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004010:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004014:	460b      	mov	r3, r1
 8004016:	18db      	adds	r3, r3, r3
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800401a:	4613      	mov	r3, r2
 800401c:	eb42 0303 	adc.w	r3, r2, r3
 8004020:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004022:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004026:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800402a:	f7fc fe0f 	bl	8000c4c <__aeabi_uldivmod>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4b0d      	ldr	r3, [pc, #52]	@ (8004068 <UART_SetConfig+0x2d4>)
 8004034:	fba3 1302 	umull	r1, r3, r3, r2
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	2164      	movs	r1, #100	@ 0x64
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	3332      	adds	r3, #50	@ 0x32
 8004046:	4a08      	ldr	r2, [pc, #32]	@ (8004068 <UART_SetConfig+0x2d4>)
 8004048:	fba2 2303 	umull	r2, r3, r2, r3
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	f003 0207 	and.w	r2, r3, #7
 8004052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4422      	add	r2, r4
 800405a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800405c:	e106      	b.n	800426c <UART_SetConfig+0x4d8>
 800405e:	bf00      	nop
 8004060:	40011000 	.word	0x40011000
 8004064:	40011400 	.word	0x40011400
 8004068:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800406c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004070:	2200      	movs	r2, #0
 8004072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004076:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800407a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800407e:	4642      	mov	r2, r8
 8004080:	464b      	mov	r3, r9
 8004082:	1891      	adds	r1, r2, r2
 8004084:	6239      	str	r1, [r7, #32]
 8004086:	415b      	adcs	r3, r3
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
 800408a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800408e:	4641      	mov	r1, r8
 8004090:	1854      	adds	r4, r2, r1
 8004092:	4649      	mov	r1, r9
 8004094:	eb43 0501 	adc.w	r5, r3, r1
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	00eb      	lsls	r3, r5, #3
 80040a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040a6:	00e2      	lsls	r2, r4, #3
 80040a8:	4614      	mov	r4, r2
 80040aa:	461d      	mov	r5, r3
 80040ac:	4643      	mov	r3, r8
 80040ae:	18e3      	adds	r3, r4, r3
 80040b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040b4:	464b      	mov	r3, r9
 80040b6:	eb45 0303 	adc.w	r3, r5, r3
 80040ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040da:	4629      	mov	r1, r5
 80040dc:	008b      	lsls	r3, r1, #2
 80040de:	4621      	mov	r1, r4
 80040e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e4:	4621      	mov	r1, r4
 80040e6:	008a      	lsls	r2, r1, #2
 80040e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040ec:	f7fc fdae 	bl	8000c4c <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4b60      	ldr	r3, [pc, #384]	@ (8004278 <UART_SetConfig+0x4e4>)
 80040f6:	fba3 2302 	umull	r2, r3, r3, r2
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	011c      	lsls	r4, r3, #4
 80040fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004108:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800410c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004110:	4642      	mov	r2, r8
 8004112:	464b      	mov	r3, r9
 8004114:	1891      	adds	r1, r2, r2
 8004116:	61b9      	str	r1, [r7, #24]
 8004118:	415b      	adcs	r3, r3
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004120:	4641      	mov	r1, r8
 8004122:	1851      	adds	r1, r2, r1
 8004124:	6139      	str	r1, [r7, #16]
 8004126:	4649      	mov	r1, r9
 8004128:	414b      	adcs	r3, r1
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004138:	4659      	mov	r1, fp
 800413a:	00cb      	lsls	r3, r1, #3
 800413c:	4651      	mov	r1, sl
 800413e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004142:	4651      	mov	r1, sl
 8004144:	00ca      	lsls	r2, r1, #3
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	4603      	mov	r3, r0
 800414c:	4642      	mov	r2, r8
 800414e:	189b      	adds	r3, r3, r2
 8004150:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004154:	464b      	mov	r3, r9
 8004156:	460a      	mov	r2, r1
 8004158:	eb42 0303 	adc.w	r3, r2, r3
 800415c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	67bb      	str	r3, [r7, #120]	@ 0x78
 800416a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004178:	4649      	mov	r1, r9
 800417a:	008b      	lsls	r3, r1, #2
 800417c:	4641      	mov	r1, r8
 800417e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004182:	4641      	mov	r1, r8
 8004184:	008a      	lsls	r2, r1, #2
 8004186:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800418a:	f7fc fd5f 	bl	8000c4c <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4611      	mov	r1, r2
 8004194:	4b38      	ldr	r3, [pc, #224]	@ (8004278 <UART_SetConfig+0x4e4>)
 8004196:	fba3 2301 	umull	r2, r3, r3, r1
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2264      	movs	r2, #100	@ 0x64
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	1acb      	subs	r3, r1, r3
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	3332      	adds	r3, #50	@ 0x32
 80041a8:	4a33      	ldr	r2, [pc, #204]	@ (8004278 <UART_SetConfig+0x4e4>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041b4:	441c      	add	r4, r3
 80041b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ba:	2200      	movs	r2, #0
 80041bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80041be:	677a      	str	r2, [r7, #116]	@ 0x74
 80041c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041c4:	4642      	mov	r2, r8
 80041c6:	464b      	mov	r3, r9
 80041c8:	1891      	adds	r1, r2, r2
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	415b      	adcs	r3, r3
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041d4:	4641      	mov	r1, r8
 80041d6:	1851      	adds	r1, r2, r1
 80041d8:	6039      	str	r1, [r7, #0]
 80041da:	4649      	mov	r1, r9
 80041dc:	414b      	adcs	r3, r1
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041ec:	4659      	mov	r1, fp
 80041ee:	00cb      	lsls	r3, r1, #3
 80041f0:	4651      	mov	r1, sl
 80041f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041f6:	4651      	mov	r1, sl
 80041f8:	00ca      	lsls	r2, r1, #3
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	4603      	mov	r3, r0
 8004200:	4642      	mov	r2, r8
 8004202:	189b      	adds	r3, r3, r2
 8004204:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004206:	464b      	mov	r3, r9
 8004208:	460a      	mov	r2, r1
 800420a:	eb42 0303 	adc.w	r3, r2, r3
 800420e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	663b      	str	r3, [r7, #96]	@ 0x60
 800421a:	667a      	str	r2, [r7, #100]	@ 0x64
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004228:	4649      	mov	r1, r9
 800422a:	008b      	lsls	r3, r1, #2
 800422c:	4641      	mov	r1, r8
 800422e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004232:	4641      	mov	r1, r8
 8004234:	008a      	lsls	r2, r1, #2
 8004236:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800423a:	f7fc fd07 	bl	8000c4c <__aeabi_uldivmod>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <UART_SetConfig+0x4e4>)
 8004244:	fba3 1302 	umull	r1, r3, r3, r2
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	2164      	movs	r1, #100	@ 0x64
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	3332      	adds	r3, #50	@ 0x32
 8004256:	4a08      	ldr	r2, [pc, #32]	@ (8004278 <UART_SetConfig+0x4e4>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	f003 020f 	and.w	r2, r3, #15
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4422      	add	r2, r4
 800426a:	609a      	str	r2, [r3, #8]
}
 800426c:	bf00      	nop
 800426e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004272:	46bd      	mov	sp, r7
 8004274:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004278:	51eb851f 	.word	0x51eb851f

0800427c <main>:
/* Function prototypes */
void SystemClock_Config(void);

#define DEBUG true

int main(void){
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
    HAL_Init();
 8004282:	f7fd fd95 	bl	8001db0 <HAL_Init>
    SystemClock_Config();
 8004286:	f000 f81d 	bl	80042c4 <SystemClock_Config>
    UART5_Init();
 800428a:	f7fd faed 	bl	8001868 <UART5_Init>
    USART2_Init();
 800428e:	f7fd fb2b 	bl	80018e8 <USART2_Init>
    I2C1_Init();
 8004292:	f7fd f9b1 	bl	80015f8 <I2C1_Init>
	HD44780_Init(2);
 8004296:	2002      	movs	r0, #2
 8004298:	f7fd f88c 	bl	80013b4 <HD44780_Init>




    while (1){
    	if (nmea_sentence_received() == true){
 800429c:	f7fd fc38 	bl	8001b10 <nmea_sentence_received>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0fa      	beq.n	800429c <main+0x20>
    		char* nmea_sentence = get_nmea_sentence();
 80042a6:	f7fd fc4b 	bl	8001b40 <get_nmea_sentence>
 80042aa:	6078      	str	r0, [r7, #4]
			#if DEBUG
    			USART2_Send_String((uint8_t*)"(DEBUG) NMEA Recibido: ");
 80042ac:	4804      	ldr	r0, [pc, #16]	@ (80042c0 <main+0x44>)
 80042ae:	f7fd fbc5 	bl	8001a3c <USART2_Send_String>
				USART2_Send_String((uint8_t*)nmea_sentence);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fd fbc2 	bl	8001a3c <USART2_Send_String>
			#endif
			Parse_NMEA_Sentence(nmea_sentence);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fc fed9 	bl	8001070 <Parse_NMEA_Sentence>
    	if (nmea_sentence_received() == true){
 80042be:	e7ed      	b.n	800429c <main+0x20>
 80042c0:	080074a4 	.word	0x080074a4

080042c4 <SystemClock_Config>:
    	}
    }
}

void SystemClock_Config(void){
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80042d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800430c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80042d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80042da:	e003      	b.n	80042e4 <LoopCopyDataInit>

080042dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80042dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004310 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80042de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80042e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80042e2:	3104      	adds	r1, #4

080042e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80042e4:	480b      	ldr	r0, [pc, #44]	@ (8004314 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80042e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004318 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80042e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80042ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80042ec:	d3f6      	bcc.n	80042dc <CopyDataInit>
  ldr  r2, =_sbss
 80042ee:	4a0b      	ldr	r2, [pc, #44]	@ (800431c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80042f0:	e002      	b.n	80042f8 <LoopFillZerobss>

080042f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80042f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80042f4:	f842 3b04 	str.w	r3, [r2], #4

080042f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80042f8:	4b09      	ldr	r3, [pc, #36]	@ (8004320 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80042fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80042fc:	d3f9      	bcc.n	80042f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042fe:	f7fd fc29 	bl	8001b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004302:	f001 f847 	bl	8005394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004306:	f7ff ffb9 	bl	800427c <main>
  bx  lr    
 800430a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800430c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004310:	08007890 	.word	0x08007890
  ldr  r0, =_sdata
 8004314:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004318:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 800431c:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8004320:	200005c0 	.word	0x200005c0

08004324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004324:	e7fe      	b.n	8004324 <ADC_IRQHandler>

08004326 <atof>:
 8004326:	2100      	movs	r1, #0
 8004328:	f000 be06 	b.w	8004f38 <strtod>

0800432c <atoi>:
 800432c:	220a      	movs	r2, #10
 800432e:	2100      	movs	r1, #0
 8004330:	f000 be88 	b.w	8005044 <strtol>

08004334 <sulp>:
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	4604      	mov	r4, r0
 8004338:	460d      	mov	r5, r1
 800433a:	ec45 4b10 	vmov	d0, r4, r5
 800433e:	4616      	mov	r6, r2
 8004340:	f002 f81e 	bl	8006380 <__ulp>
 8004344:	ec51 0b10 	vmov	r0, r1, d0
 8004348:	b17e      	cbz	r6, 800436a <sulp+0x36>
 800434a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800434e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004352:	2b00      	cmp	r3, #0
 8004354:	dd09      	ble.n	800436a <sulp+0x36>
 8004356:	051b      	lsls	r3, r3, #20
 8004358:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800435c:	2400      	movs	r4, #0
 800435e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004362:	4622      	mov	r2, r4
 8004364:	462b      	mov	r3, r5
 8004366:	f7fc f967 	bl	8000638 <__aeabi_dmul>
 800436a:	ec41 0b10 	vmov	d0, r0, r1
 800436e:	bd70      	pop	{r4, r5, r6, pc}

08004370 <_strtod_l>:
 8004370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004374:	b09f      	sub	sp, #124	@ 0x7c
 8004376:	460c      	mov	r4, r1
 8004378:	9217      	str	r2, [sp, #92]	@ 0x5c
 800437a:	2200      	movs	r2, #0
 800437c:	921a      	str	r2, [sp, #104]	@ 0x68
 800437e:	9005      	str	r0, [sp, #20]
 8004380:	f04f 0a00 	mov.w	sl, #0
 8004384:	f04f 0b00 	mov.w	fp, #0
 8004388:	460a      	mov	r2, r1
 800438a:	9219      	str	r2, [sp, #100]	@ 0x64
 800438c:	7811      	ldrb	r1, [r2, #0]
 800438e:	292b      	cmp	r1, #43	@ 0x2b
 8004390:	d04a      	beq.n	8004428 <_strtod_l+0xb8>
 8004392:	d838      	bhi.n	8004406 <_strtod_l+0x96>
 8004394:	290d      	cmp	r1, #13
 8004396:	d832      	bhi.n	80043fe <_strtod_l+0x8e>
 8004398:	2908      	cmp	r1, #8
 800439a:	d832      	bhi.n	8004402 <_strtod_l+0x92>
 800439c:	2900      	cmp	r1, #0
 800439e:	d03b      	beq.n	8004418 <_strtod_l+0xa8>
 80043a0:	2200      	movs	r2, #0
 80043a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80043a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80043a6:	782a      	ldrb	r2, [r5, #0]
 80043a8:	2a30      	cmp	r2, #48	@ 0x30
 80043aa:	f040 80b3 	bne.w	8004514 <_strtod_l+0x1a4>
 80043ae:	786a      	ldrb	r2, [r5, #1]
 80043b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80043b4:	2a58      	cmp	r2, #88	@ 0x58
 80043b6:	d16e      	bne.n	8004496 <_strtod_l+0x126>
 80043b8:	9302      	str	r3, [sp, #8]
 80043ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	ab1a      	add	r3, sp, #104	@ 0x68
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	4a8e      	ldr	r2, [pc, #568]	@ (80045fc <_strtod_l+0x28c>)
 80043c4:	9805      	ldr	r0, [sp, #20]
 80043c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80043c8:	a919      	add	r1, sp, #100	@ 0x64
 80043ca:	f001 f8d3 	bl	8005574 <__gethex>
 80043ce:	f010 060f 	ands.w	r6, r0, #15
 80043d2:	4604      	mov	r4, r0
 80043d4:	d005      	beq.n	80043e2 <_strtod_l+0x72>
 80043d6:	2e06      	cmp	r6, #6
 80043d8:	d128      	bne.n	800442c <_strtod_l+0xbc>
 80043da:	3501      	adds	r5, #1
 80043dc:	2300      	movs	r3, #0
 80043de:	9519      	str	r5, [sp, #100]	@ 0x64
 80043e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f040 858e 	bne.w	8004f06 <_strtod_l+0xb96>
 80043ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043ec:	b1cb      	cbz	r3, 8004422 <_strtod_l+0xb2>
 80043ee:	4652      	mov	r2, sl
 80043f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80043f4:	ec43 2b10 	vmov	d0, r2, r3
 80043f8:	b01f      	add	sp, #124	@ 0x7c
 80043fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fe:	2920      	cmp	r1, #32
 8004400:	d1ce      	bne.n	80043a0 <_strtod_l+0x30>
 8004402:	3201      	adds	r2, #1
 8004404:	e7c1      	b.n	800438a <_strtod_l+0x1a>
 8004406:	292d      	cmp	r1, #45	@ 0x2d
 8004408:	d1ca      	bne.n	80043a0 <_strtod_l+0x30>
 800440a:	2101      	movs	r1, #1
 800440c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800440e:	1c51      	adds	r1, r2, #1
 8004410:	9119      	str	r1, [sp, #100]	@ 0x64
 8004412:	7852      	ldrb	r2, [r2, #1]
 8004414:	2a00      	cmp	r2, #0
 8004416:	d1c5      	bne.n	80043a4 <_strtod_l+0x34>
 8004418:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800441a:	9419      	str	r4, [sp, #100]	@ 0x64
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 8570 	bne.w	8004f02 <_strtod_l+0xb92>
 8004422:	4652      	mov	r2, sl
 8004424:	465b      	mov	r3, fp
 8004426:	e7e5      	b.n	80043f4 <_strtod_l+0x84>
 8004428:	2100      	movs	r1, #0
 800442a:	e7ef      	b.n	800440c <_strtod_l+0x9c>
 800442c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800442e:	b13a      	cbz	r2, 8004440 <_strtod_l+0xd0>
 8004430:	2135      	movs	r1, #53	@ 0x35
 8004432:	a81c      	add	r0, sp, #112	@ 0x70
 8004434:	f002 f89e 	bl	8006574 <__copybits>
 8004438:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800443a:	9805      	ldr	r0, [sp, #20]
 800443c:	f001 fc6c 	bl	8005d18 <_Bfree>
 8004440:	3e01      	subs	r6, #1
 8004442:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004444:	2e04      	cmp	r6, #4
 8004446:	d806      	bhi.n	8004456 <_strtod_l+0xe6>
 8004448:	e8df f006 	tbb	[pc, r6]
 800444c:	201d0314 	.word	0x201d0314
 8004450:	14          	.byte	0x14
 8004451:	00          	.byte	0x00
 8004452:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004456:	05e1      	lsls	r1, r4, #23
 8004458:	bf48      	it	mi
 800445a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800445e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004462:	0d1b      	lsrs	r3, r3, #20
 8004464:	051b      	lsls	r3, r3, #20
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1bb      	bne.n	80043e2 <_strtod_l+0x72>
 800446a:	f000 ff8d 	bl	8005388 <__errno>
 800446e:	2322      	movs	r3, #34	@ 0x22
 8004470:	6003      	str	r3, [r0, #0]
 8004472:	e7b6      	b.n	80043e2 <_strtod_l+0x72>
 8004474:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004478:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800447c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004480:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004484:	e7e7      	b.n	8004456 <_strtod_l+0xe6>
 8004486:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004604 <_strtod_l+0x294>
 800448a:	e7e4      	b.n	8004456 <_strtod_l+0xe6>
 800448c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004490:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004494:	e7df      	b.n	8004456 <_strtod_l+0xe6>
 8004496:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	9219      	str	r2, [sp, #100]	@ 0x64
 800449c:	785b      	ldrb	r3, [r3, #1]
 800449e:	2b30      	cmp	r3, #48	@ 0x30
 80044a0:	d0f9      	beq.n	8004496 <_strtod_l+0x126>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d09d      	beq.n	80043e2 <_strtod_l+0x72>
 80044a6:	2301      	movs	r3, #1
 80044a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80044aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80044ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80044ae:	2300      	movs	r3, #0
 80044b0:	9308      	str	r3, [sp, #32]
 80044b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80044b4:	461f      	mov	r7, r3
 80044b6:	220a      	movs	r2, #10
 80044b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80044ba:	7805      	ldrb	r5, [r0, #0]
 80044bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80044c0:	b2d9      	uxtb	r1, r3
 80044c2:	2909      	cmp	r1, #9
 80044c4:	d928      	bls.n	8004518 <_strtod_l+0x1a8>
 80044c6:	494e      	ldr	r1, [pc, #312]	@ (8004600 <_strtod_l+0x290>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	f000 fef2 	bl	80052b2 <strncmp>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d032      	beq.n	8004538 <_strtod_l+0x1c8>
 80044d2:	2000      	movs	r0, #0
 80044d4:	462a      	mov	r2, r5
 80044d6:	4681      	mov	r9, r0
 80044d8:	463d      	mov	r5, r7
 80044da:	4603      	mov	r3, r0
 80044dc:	2a65      	cmp	r2, #101	@ 0x65
 80044de:	d001      	beq.n	80044e4 <_strtod_l+0x174>
 80044e0:	2a45      	cmp	r2, #69	@ 0x45
 80044e2:	d114      	bne.n	800450e <_strtod_l+0x19e>
 80044e4:	b91d      	cbnz	r5, 80044ee <_strtod_l+0x17e>
 80044e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044e8:	4302      	orrs	r2, r0
 80044ea:	d095      	beq.n	8004418 <_strtod_l+0xa8>
 80044ec:	2500      	movs	r5, #0
 80044ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80044f0:	1c62      	adds	r2, r4, #1
 80044f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80044f4:	7862      	ldrb	r2, [r4, #1]
 80044f6:	2a2b      	cmp	r2, #43	@ 0x2b
 80044f8:	d077      	beq.n	80045ea <_strtod_l+0x27a>
 80044fa:	2a2d      	cmp	r2, #45	@ 0x2d
 80044fc:	d07b      	beq.n	80045f6 <_strtod_l+0x286>
 80044fe:	f04f 0c00 	mov.w	ip, #0
 8004502:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004506:	2909      	cmp	r1, #9
 8004508:	f240 8082 	bls.w	8004610 <_strtod_l+0x2a0>
 800450c:	9419      	str	r4, [sp, #100]	@ 0x64
 800450e:	f04f 0800 	mov.w	r8, #0
 8004512:	e0a2      	b.n	800465a <_strtod_l+0x2ea>
 8004514:	2300      	movs	r3, #0
 8004516:	e7c7      	b.n	80044a8 <_strtod_l+0x138>
 8004518:	2f08      	cmp	r7, #8
 800451a:	bfd5      	itete	le
 800451c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800451e:	9908      	ldrgt	r1, [sp, #32]
 8004520:	fb02 3301 	mlale	r3, r2, r1, r3
 8004524:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004528:	f100 0001 	add.w	r0, r0, #1
 800452c:	bfd4      	ite	le
 800452e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004530:	9308      	strgt	r3, [sp, #32]
 8004532:	3701      	adds	r7, #1
 8004534:	9019      	str	r0, [sp, #100]	@ 0x64
 8004536:	e7bf      	b.n	80044b8 <_strtod_l+0x148>
 8004538:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	9219      	str	r2, [sp, #100]	@ 0x64
 800453e:	785a      	ldrb	r2, [r3, #1]
 8004540:	b37f      	cbz	r7, 80045a2 <_strtod_l+0x232>
 8004542:	4681      	mov	r9, r0
 8004544:	463d      	mov	r5, r7
 8004546:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800454a:	2b09      	cmp	r3, #9
 800454c:	d912      	bls.n	8004574 <_strtod_l+0x204>
 800454e:	2301      	movs	r3, #1
 8004550:	e7c4      	b.n	80044dc <_strtod_l+0x16c>
 8004552:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	9219      	str	r2, [sp, #100]	@ 0x64
 8004558:	785a      	ldrb	r2, [r3, #1]
 800455a:	3001      	adds	r0, #1
 800455c:	2a30      	cmp	r2, #48	@ 0x30
 800455e:	d0f8      	beq.n	8004552 <_strtod_l+0x1e2>
 8004560:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004564:	2b08      	cmp	r3, #8
 8004566:	f200 84d3 	bhi.w	8004f10 <_strtod_l+0xba0>
 800456a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800456c:	930c      	str	r3, [sp, #48]	@ 0x30
 800456e:	4681      	mov	r9, r0
 8004570:	2000      	movs	r0, #0
 8004572:	4605      	mov	r5, r0
 8004574:	3a30      	subs	r2, #48	@ 0x30
 8004576:	f100 0301 	add.w	r3, r0, #1
 800457a:	d02a      	beq.n	80045d2 <_strtod_l+0x262>
 800457c:	4499      	add	r9, r3
 800457e:	eb00 0c05 	add.w	ip, r0, r5
 8004582:	462b      	mov	r3, r5
 8004584:	210a      	movs	r1, #10
 8004586:	4563      	cmp	r3, ip
 8004588:	d10d      	bne.n	80045a6 <_strtod_l+0x236>
 800458a:	1c69      	adds	r1, r5, #1
 800458c:	4401      	add	r1, r0
 800458e:	4428      	add	r0, r5
 8004590:	2808      	cmp	r0, #8
 8004592:	dc16      	bgt.n	80045c2 <_strtod_l+0x252>
 8004594:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004596:	230a      	movs	r3, #10
 8004598:	fb03 2300 	mla	r3, r3, r0, r2
 800459c:	930a      	str	r3, [sp, #40]	@ 0x28
 800459e:	2300      	movs	r3, #0
 80045a0:	e018      	b.n	80045d4 <_strtod_l+0x264>
 80045a2:	4638      	mov	r0, r7
 80045a4:	e7da      	b.n	800455c <_strtod_l+0x1ec>
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	f103 0301 	add.w	r3, r3, #1
 80045ac:	dc03      	bgt.n	80045b6 <_strtod_l+0x246>
 80045ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80045b0:	434e      	muls	r6, r1
 80045b2:	960a      	str	r6, [sp, #40]	@ 0x28
 80045b4:	e7e7      	b.n	8004586 <_strtod_l+0x216>
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	bfde      	ittt	le
 80045ba:	9e08      	ldrle	r6, [sp, #32]
 80045bc:	434e      	mulle	r6, r1
 80045be:	9608      	strle	r6, [sp, #32]
 80045c0:	e7e1      	b.n	8004586 <_strtod_l+0x216>
 80045c2:	280f      	cmp	r0, #15
 80045c4:	dceb      	bgt.n	800459e <_strtod_l+0x22e>
 80045c6:	9808      	ldr	r0, [sp, #32]
 80045c8:	230a      	movs	r3, #10
 80045ca:	fb03 2300 	mla	r3, r3, r0, r2
 80045ce:	9308      	str	r3, [sp, #32]
 80045d0:	e7e5      	b.n	800459e <_strtod_l+0x22e>
 80045d2:	4629      	mov	r1, r5
 80045d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80045d6:	1c50      	adds	r0, r2, #1
 80045d8:	9019      	str	r0, [sp, #100]	@ 0x64
 80045da:	7852      	ldrb	r2, [r2, #1]
 80045dc:	4618      	mov	r0, r3
 80045de:	460d      	mov	r5, r1
 80045e0:	e7b1      	b.n	8004546 <_strtod_l+0x1d6>
 80045e2:	f04f 0900 	mov.w	r9, #0
 80045e6:	2301      	movs	r3, #1
 80045e8:	e77d      	b.n	80044e6 <_strtod_l+0x176>
 80045ea:	f04f 0c00 	mov.w	ip, #0
 80045ee:	1ca2      	adds	r2, r4, #2
 80045f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80045f2:	78a2      	ldrb	r2, [r4, #2]
 80045f4:	e785      	b.n	8004502 <_strtod_l+0x192>
 80045f6:	f04f 0c01 	mov.w	ip, #1
 80045fa:	e7f8      	b.n	80045ee <_strtod_l+0x27e>
 80045fc:	080074e8 	.word	0x080074e8
 8004600:	080074c4 	.word	0x080074c4
 8004604:	7ff00000 	.word	0x7ff00000
 8004608:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800460a:	1c51      	adds	r1, r2, #1
 800460c:	9119      	str	r1, [sp, #100]	@ 0x64
 800460e:	7852      	ldrb	r2, [r2, #1]
 8004610:	2a30      	cmp	r2, #48	@ 0x30
 8004612:	d0f9      	beq.n	8004608 <_strtod_l+0x298>
 8004614:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004618:	2908      	cmp	r1, #8
 800461a:	f63f af78 	bhi.w	800450e <_strtod_l+0x19e>
 800461e:	3a30      	subs	r2, #48	@ 0x30
 8004620:	920e      	str	r2, [sp, #56]	@ 0x38
 8004622:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004624:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004626:	f04f 080a 	mov.w	r8, #10
 800462a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800462c:	1c56      	adds	r6, r2, #1
 800462e:	9619      	str	r6, [sp, #100]	@ 0x64
 8004630:	7852      	ldrb	r2, [r2, #1]
 8004632:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004636:	f1be 0f09 	cmp.w	lr, #9
 800463a:	d939      	bls.n	80046b0 <_strtod_l+0x340>
 800463c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800463e:	1a76      	subs	r6, r6, r1
 8004640:	2e08      	cmp	r6, #8
 8004642:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004646:	dc03      	bgt.n	8004650 <_strtod_l+0x2e0>
 8004648:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800464a:	4588      	cmp	r8, r1
 800464c:	bfa8      	it	ge
 800464e:	4688      	movge	r8, r1
 8004650:	f1bc 0f00 	cmp.w	ip, #0
 8004654:	d001      	beq.n	800465a <_strtod_l+0x2ea>
 8004656:	f1c8 0800 	rsb	r8, r8, #0
 800465a:	2d00      	cmp	r5, #0
 800465c:	d14e      	bne.n	80046fc <_strtod_l+0x38c>
 800465e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004660:	4308      	orrs	r0, r1
 8004662:	f47f aebe 	bne.w	80043e2 <_strtod_l+0x72>
 8004666:	2b00      	cmp	r3, #0
 8004668:	f47f aed6 	bne.w	8004418 <_strtod_l+0xa8>
 800466c:	2a69      	cmp	r2, #105	@ 0x69
 800466e:	d028      	beq.n	80046c2 <_strtod_l+0x352>
 8004670:	dc25      	bgt.n	80046be <_strtod_l+0x34e>
 8004672:	2a49      	cmp	r2, #73	@ 0x49
 8004674:	d025      	beq.n	80046c2 <_strtod_l+0x352>
 8004676:	2a4e      	cmp	r2, #78	@ 0x4e
 8004678:	f47f aece 	bne.w	8004418 <_strtod_l+0xa8>
 800467c:	499b      	ldr	r1, [pc, #620]	@ (80048ec <_strtod_l+0x57c>)
 800467e:	a819      	add	r0, sp, #100	@ 0x64
 8004680:	f001 f99a 	bl	80059b8 <__match>
 8004684:	2800      	cmp	r0, #0
 8004686:	f43f aec7 	beq.w	8004418 <_strtod_l+0xa8>
 800468a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b28      	cmp	r3, #40	@ 0x28
 8004690:	d12e      	bne.n	80046f0 <_strtod_l+0x380>
 8004692:	4997      	ldr	r1, [pc, #604]	@ (80048f0 <_strtod_l+0x580>)
 8004694:	aa1c      	add	r2, sp, #112	@ 0x70
 8004696:	a819      	add	r0, sp, #100	@ 0x64
 8004698:	f001 f9a2 	bl	80059e0 <__hexnan>
 800469c:	2805      	cmp	r0, #5
 800469e:	d127      	bne.n	80046f0 <_strtod_l+0x380>
 80046a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80046a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80046a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80046aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80046ae:	e698      	b.n	80043e2 <_strtod_l+0x72>
 80046b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80046b2:	fb08 2101 	mla	r1, r8, r1, r2
 80046b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80046ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80046bc:	e7b5      	b.n	800462a <_strtod_l+0x2ba>
 80046be:	2a6e      	cmp	r2, #110	@ 0x6e
 80046c0:	e7da      	b.n	8004678 <_strtod_l+0x308>
 80046c2:	498c      	ldr	r1, [pc, #560]	@ (80048f4 <_strtod_l+0x584>)
 80046c4:	a819      	add	r0, sp, #100	@ 0x64
 80046c6:	f001 f977 	bl	80059b8 <__match>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	f43f aea4 	beq.w	8004418 <_strtod_l+0xa8>
 80046d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80046d2:	4989      	ldr	r1, [pc, #548]	@ (80048f8 <_strtod_l+0x588>)
 80046d4:	3b01      	subs	r3, #1
 80046d6:	a819      	add	r0, sp, #100	@ 0x64
 80046d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80046da:	f001 f96d 	bl	80059b8 <__match>
 80046de:	b910      	cbnz	r0, 80046e6 <_strtod_l+0x376>
 80046e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80046e2:	3301      	adds	r3, #1
 80046e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80046e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8004908 <_strtod_l+0x598>
 80046ea:	f04f 0a00 	mov.w	sl, #0
 80046ee:	e678      	b.n	80043e2 <_strtod_l+0x72>
 80046f0:	4882      	ldr	r0, [pc, #520]	@ (80048fc <_strtod_l+0x58c>)
 80046f2:	f000 fe85 	bl	8005400 <nan>
 80046f6:	ec5b ab10 	vmov	sl, fp, d0
 80046fa:	e672      	b.n	80043e2 <_strtod_l+0x72>
 80046fc:	eba8 0309 	sub.w	r3, r8, r9
 8004700:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004702:	9309      	str	r3, [sp, #36]	@ 0x24
 8004704:	2f00      	cmp	r7, #0
 8004706:	bf08      	it	eq
 8004708:	462f      	moveq	r7, r5
 800470a:	2d10      	cmp	r5, #16
 800470c:	462c      	mov	r4, r5
 800470e:	bfa8      	it	ge
 8004710:	2410      	movge	r4, #16
 8004712:	f7fb ff17 	bl	8000544 <__aeabi_ui2d>
 8004716:	2d09      	cmp	r5, #9
 8004718:	4682      	mov	sl, r0
 800471a:	468b      	mov	fp, r1
 800471c:	dc13      	bgt.n	8004746 <_strtod_l+0x3d6>
 800471e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	f43f ae5e 	beq.w	80043e2 <_strtod_l+0x72>
 8004726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004728:	dd78      	ble.n	800481c <_strtod_l+0x4ac>
 800472a:	2b16      	cmp	r3, #22
 800472c:	dc5f      	bgt.n	80047ee <_strtod_l+0x47e>
 800472e:	4974      	ldr	r1, [pc, #464]	@ (8004900 <_strtod_l+0x590>)
 8004730:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004738:	4652      	mov	r2, sl
 800473a:	465b      	mov	r3, fp
 800473c:	f7fb ff7c 	bl	8000638 <__aeabi_dmul>
 8004740:	4682      	mov	sl, r0
 8004742:	468b      	mov	fp, r1
 8004744:	e64d      	b.n	80043e2 <_strtod_l+0x72>
 8004746:	4b6e      	ldr	r3, [pc, #440]	@ (8004900 <_strtod_l+0x590>)
 8004748:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800474c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004750:	f7fb ff72 	bl	8000638 <__aeabi_dmul>
 8004754:	4682      	mov	sl, r0
 8004756:	9808      	ldr	r0, [sp, #32]
 8004758:	468b      	mov	fp, r1
 800475a:	f7fb fef3 	bl	8000544 <__aeabi_ui2d>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4650      	mov	r0, sl
 8004764:	4659      	mov	r1, fp
 8004766:	f7fb fdb1 	bl	80002cc <__adddf3>
 800476a:	2d0f      	cmp	r5, #15
 800476c:	4682      	mov	sl, r0
 800476e:	468b      	mov	fp, r1
 8004770:	ddd5      	ble.n	800471e <_strtod_l+0x3ae>
 8004772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004774:	1b2c      	subs	r4, r5, r4
 8004776:	441c      	add	r4, r3
 8004778:	2c00      	cmp	r4, #0
 800477a:	f340 8096 	ble.w	80048aa <_strtod_l+0x53a>
 800477e:	f014 030f 	ands.w	r3, r4, #15
 8004782:	d00a      	beq.n	800479a <_strtod_l+0x42a>
 8004784:	495e      	ldr	r1, [pc, #376]	@ (8004900 <_strtod_l+0x590>)
 8004786:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800478a:	4652      	mov	r2, sl
 800478c:	465b      	mov	r3, fp
 800478e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004792:	f7fb ff51 	bl	8000638 <__aeabi_dmul>
 8004796:	4682      	mov	sl, r0
 8004798:	468b      	mov	fp, r1
 800479a:	f034 040f 	bics.w	r4, r4, #15
 800479e:	d073      	beq.n	8004888 <_strtod_l+0x518>
 80047a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80047a4:	dd48      	ble.n	8004838 <_strtod_l+0x4c8>
 80047a6:	2400      	movs	r4, #0
 80047a8:	46a0      	mov	r8, r4
 80047aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80047ac:	46a1      	mov	r9, r4
 80047ae:	9a05      	ldr	r2, [sp, #20]
 80047b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8004908 <_strtod_l+0x598>
 80047b4:	2322      	movs	r3, #34	@ 0x22
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	f04f 0a00 	mov.w	sl, #0
 80047bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f43f ae0f 	beq.w	80043e2 <_strtod_l+0x72>
 80047c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80047c6:	9805      	ldr	r0, [sp, #20]
 80047c8:	f001 faa6 	bl	8005d18 <_Bfree>
 80047cc:	9805      	ldr	r0, [sp, #20]
 80047ce:	4649      	mov	r1, r9
 80047d0:	f001 faa2 	bl	8005d18 <_Bfree>
 80047d4:	9805      	ldr	r0, [sp, #20]
 80047d6:	4641      	mov	r1, r8
 80047d8:	f001 fa9e 	bl	8005d18 <_Bfree>
 80047dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80047de:	9805      	ldr	r0, [sp, #20]
 80047e0:	f001 fa9a 	bl	8005d18 <_Bfree>
 80047e4:	9805      	ldr	r0, [sp, #20]
 80047e6:	4621      	mov	r1, r4
 80047e8:	f001 fa96 	bl	8005d18 <_Bfree>
 80047ec:	e5f9      	b.n	80043e2 <_strtod_l+0x72>
 80047ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80047f4:	4293      	cmp	r3, r2
 80047f6:	dbbc      	blt.n	8004772 <_strtod_l+0x402>
 80047f8:	4c41      	ldr	r4, [pc, #260]	@ (8004900 <_strtod_l+0x590>)
 80047fa:	f1c5 050f 	rsb	r5, r5, #15
 80047fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004802:	4652      	mov	r2, sl
 8004804:	465b      	mov	r3, fp
 8004806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800480a:	f7fb ff15 	bl	8000638 <__aeabi_dmul>
 800480e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004810:	1b5d      	subs	r5, r3, r5
 8004812:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004816:	e9d4 2300 	ldrd	r2, r3, [r4]
 800481a:	e78f      	b.n	800473c <_strtod_l+0x3cc>
 800481c:	3316      	adds	r3, #22
 800481e:	dba8      	blt.n	8004772 <_strtod_l+0x402>
 8004820:	4b37      	ldr	r3, [pc, #220]	@ (8004900 <_strtod_l+0x590>)
 8004822:	eba9 0808 	sub.w	r8, r9, r8
 8004826:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800482a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800482e:	4650      	mov	r0, sl
 8004830:	4659      	mov	r1, fp
 8004832:	f7fc f82b 	bl	800088c <__aeabi_ddiv>
 8004836:	e783      	b.n	8004740 <_strtod_l+0x3d0>
 8004838:	4b32      	ldr	r3, [pc, #200]	@ (8004904 <_strtod_l+0x594>)
 800483a:	9308      	str	r3, [sp, #32]
 800483c:	2300      	movs	r3, #0
 800483e:	1124      	asrs	r4, r4, #4
 8004840:	4650      	mov	r0, sl
 8004842:	4659      	mov	r1, fp
 8004844:	461e      	mov	r6, r3
 8004846:	2c01      	cmp	r4, #1
 8004848:	dc21      	bgt.n	800488e <_strtod_l+0x51e>
 800484a:	b10b      	cbz	r3, 8004850 <_strtod_l+0x4e0>
 800484c:	4682      	mov	sl, r0
 800484e:	468b      	mov	fp, r1
 8004850:	492c      	ldr	r1, [pc, #176]	@ (8004904 <_strtod_l+0x594>)
 8004852:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004856:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800485a:	4652      	mov	r2, sl
 800485c:	465b      	mov	r3, fp
 800485e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004862:	f7fb fee9 	bl	8000638 <__aeabi_dmul>
 8004866:	4b28      	ldr	r3, [pc, #160]	@ (8004908 <_strtod_l+0x598>)
 8004868:	460a      	mov	r2, r1
 800486a:	400b      	ands	r3, r1
 800486c:	4927      	ldr	r1, [pc, #156]	@ (800490c <_strtod_l+0x59c>)
 800486e:	428b      	cmp	r3, r1
 8004870:	4682      	mov	sl, r0
 8004872:	d898      	bhi.n	80047a6 <_strtod_l+0x436>
 8004874:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004878:	428b      	cmp	r3, r1
 800487a:	bf86      	itte	hi
 800487c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8004910 <_strtod_l+0x5a0>
 8004880:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8004884:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004888:	2300      	movs	r3, #0
 800488a:	9308      	str	r3, [sp, #32]
 800488c:	e07a      	b.n	8004984 <_strtod_l+0x614>
 800488e:	07e2      	lsls	r2, r4, #31
 8004890:	d505      	bpl.n	800489e <_strtod_l+0x52e>
 8004892:	9b08      	ldr	r3, [sp, #32]
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	f7fb fece 	bl	8000638 <__aeabi_dmul>
 800489c:	2301      	movs	r3, #1
 800489e:	9a08      	ldr	r2, [sp, #32]
 80048a0:	3208      	adds	r2, #8
 80048a2:	3601      	adds	r6, #1
 80048a4:	1064      	asrs	r4, r4, #1
 80048a6:	9208      	str	r2, [sp, #32]
 80048a8:	e7cd      	b.n	8004846 <_strtod_l+0x4d6>
 80048aa:	d0ed      	beq.n	8004888 <_strtod_l+0x518>
 80048ac:	4264      	negs	r4, r4
 80048ae:	f014 020f 	ands.w	r2, r4, #15
 80048b2:	d00a      	beq.n	80048ca <_strtod_l+0x55a>
 80048b4:	4b12      	ldr	r3, [pc, #72]	@ (8004900 <_strtod_l+0x590>)
 80048b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048ba:	4650      	mov	r0, sl
 80048bc:	4659      	mov	r1, fp
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f7fb ffe3 	bl	800088c <__aeabi_ddiv>
 80048c6:	4682      	mov	sl, r0
 80048c8:	468b      	mov	fp, r1
 80048ca:	1124      	asrs	r4, r4, #4
 80048cc:	d0dc      	beq.n	8004888 <_strtod_l+0x518>
 80048ce:	2c1f      	cmp	r4, #31
 80048d0:	dd20      	ble.n	8004914 <_strtod_l+0x5a4>
 80048d2:	2400      	movs	r4, #0
 80048d4:	46a0      	mov	r8, r4
 80048d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80048d8:	46a1      	mov	r9, r4
 80048da:	9a05      	ldr	r2, [sp, #20]
 80048dc:	2322      	movs	r3, #34	@ 0x22
 80048de:	f04f 0a00 	mov.w	sl, #0
 80048e2:	f04f 0b00 	mov.w	fp, #0
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	e768      	b.n	80047bc <_strtod_l+0x44c>
 80048ea:	bf00      	nop
 80048ec:	080074cf 	.word	0x080074cf
 80048f0:	080074d4 	.word	0x080074d4
 80048f4:	080074c6 	.word	0x080074c6
 80048f8:	080074c9 	.word	0x080074c9
 80048fc:	0800787e 	.word	0x0800787e
 8004900:	08007748 	.word	0x08007748
 8004904:	08007720 	.word	0x08007720
 8004908:	7ff00000 	.word	0x7ff00000
 800490c:	7ca00000 	.word	0x7ca00000
 8004910:	7fefffff 	.word	0x7fefffff
 8004914:	f014 0310 	ands.w	r3, r4, #16
 8004918:	bf18      	it	ne
 800491a:	236a      	movne	r3, #106	@ 0x6a
 800491c:	4ea9      	ldr	r6, [pc, #676]	@ (8004bc4 <_strtod_l+0x854>)
 800491e:	9308      	str	r3, [sp, #32]
 8004920:	4650      	mov	r0, sl
 8004922:	4659      	mov	r1, fp
 8004924:	2300      	movs	r3, #0
 8004926:	07e2      	lsls	r2, r4, #31
 8004928:	d504      	bpl.n	8004934 <_strtod_l+0x5c4>
 800492a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800492e:	f7fb fe83 	bl	8000638 <__aeabi_dmul>
 8004932:	2301      	movs	r3, #1
 8004934:	1064      	asrs	r4, r4, #1
 8004936:	f106 0608 	add.w	r6, r6, #8
 800493a:	d1f4      	bne.n	8004926 <_strtod_l+0x5b6>
 800493c:	b10b      	cbz	r3, 8004942 <_strtod_l+0x5d2>
 800493e:	4682      	mov	sl, r0
 8004940:	468b      	mov	fp, r1
 8004942:	9b08      	ldr	r3, [sp, #32]
 8004944:	b1b3      	cbz	r3, 8004974 <_strtod_l+0x604>
 8004946:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800494a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800494e:	2b00      	cmp	r3, #0
 8004950:	4659      	mov	r1, fp
 8004952:	dd0f      	ble.n	8004974 <_strtod_l+0x604>
 8004954:	2b1f      	cmp	r3, #31
 8004956:	dd55      	ble.n	8004a04 <_strtod_l+0x694>
 8004958:	2b34      	cmp	r3, #52	@ 0x34
 800495a:	bfde      	ittt	le
 800495c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8004960:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004964:	4093      	lslle	r3, r2
 8004966:	f04f 0a00 	mov.w	sl, #0
 800496a:	bfcc      	ite	gt
 800496c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004970:	ea03 0b01 	andle.w	fp, r3, r1
 8004974:	2200      	movs	r2, #0
 8004976:	2300      	movs	r3, #0
 8004978:	4650      	mov	r0, sl
 800497a:	4659      	mov	r1, fp
 800497c:	f7fc f8c4 	bl	8000b08 <__aeabi_dcmpeq>
 8004980:	2800      	cmp	r0, #0
 8004982:	d1a6      	bne.n	80048d2 <_strtod_l+0x562>
 8004984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800498a:	9805      	ldr	r0, [sp, #20]
 800498c:	462b      	mov	r3, r5
 800498e:	463a      	mov	r2, r7
 8004990:	f001 fa2a 	bl	8005de8 <__s2b>
 8004994:	900a      	str	r0, [sp, #40]	@ 0x28
 8004996:	2800      	cmp	r0, #0
 8004998:	f43f af05 	beq.w	80047a6 <_strtod_l+0x436>
 800499c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800499e:	2a00      	cmp	r2, #0
 80049a0:	eba9 0308 	sub.w	r3, r9, r8
 80049a4:	bfa8      	it	ge
 80049a6:	2300      	movge	r3, #0
 80049a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80049aa:	2400      	movs	r4, #0
 80049ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80049b0:	9316      	str	r3, [sp, #88]	@ 0x58
 80049b2:	46a0      	mov	r8, r4
 80049b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049b6:	9805      	ldr	r0, [sp, #20]
 80049b8:	6859      	ldr	r1, [r3, #4]
 80049ba:	f001 f96d 	bl	8005c98 <_Balloc>
 80049be:	4681      	mov	r9, r0
 80049c0:	2800      	cmp	r0, #0
 80049c2:	f43f aef4 	beq.w	80047ae <_strtod_l+0x43e>
 80049c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	3202      	adds	r2, #2
 80049cc:	f103 010c 	add.w	r1, r3, #12
 80049d0:	0092      	lsls	r2, r2, #2
 80049d2:	300c      	adds	r0, #12
 80049d4:	f000 fd05 	bl	80053e2 <memcpy>
 80049d8:	ec4b ab10 	vmov	d0, sl, fp
 80049dc:	9805      	ldr	r0, [sp, #20]
 80049de:	aa1c      	add	r2, sp, #112	@ 0x70
 80049e0:	a91b      	add	r1, sp, #108	@ 0x6c
 80049e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80049e6:	f001 fd3b 	bl	8006460 <__d2b>
 80049ea:	901a      	str	r0, [sp, #104]	@ 0x68
 80049ec:	2800      	cmp	r0, #0
 80049ee:	f43f aede 	beq.w	80047ae <_strtod_l+0x43e>
 80049f2:	9805      	ldr	r0, [sp, #20]
 80049f4:	2101      	movs	r1, #1
 80049f6:	f001 fa8d 	bl	8005f14 <__i2b>
 80049fa:	4680      	mov	r8, r0
 80049fc:	b948      	cbnz	r0, 8004a12 <_strtod_l+0x6a2>
 80049fe:	f04f 0800 	mov.w	r8, #0
 8004a02:	e6d4      	b.n	80047ae <_strtod_l+0x43e>
 8004a04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	ea03 0a0a 	and.w	sl, r3, sl
 8004a10:	e7b0      	b.n	8004974 <_strtod_l+0x604>
 8004a12:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004a14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004a16:	2d00      	cmp	r5, #0
 8004a18:	bfab      	itete	ge
 8004a1a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004a1c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004a1e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004a20:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8004a22:	bfac      	ite	ge
 8004a24:	18ef      	addge	r7, r5, r3
 8004a26:	1b5e      	sublt	r6, r3, r5
 8004a28:	9b08      	ldr	r3, [sp, #32]
 8004a2a:	1aed      	subs	r5, r5, r3
 8004a2c:	4415      	add	r5, r2
 8004a2e:	4b66      	ldr	r3, [pc, #408]	@ (8004bc8 <_strtod_l+0x858>)
 8004a30:	3d01      	subs	r5, #1
 8004a32:	429d      	cmp	r5, r3
 8004a34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004a38:	da50      	bge.n	8004adc <_strtod_l+0x76c>
 8004a3a:	1b5b      	subs	r3, r3, r5
 8004a3c:	2b1f      	cmp	r3, #31
 8004a3e:	eba2 0203 	sub.w	r2, r2, r3
 8004a42:	f04f 0101 	mov.w	r1, #1
 8004a46:	dc3d      	bgt.n	8004ac4 <_strtod_l+0x754>
 8004a48:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004a4e:	2300      	movs	r3, #0
 8004a50:	9310      	str	r3, [sp, #64]	@ 0x40
 8004a52:	18bd      	adds	r5, r7, r2
 8004a54:	9b08      	ldr	r3, [sp, #32]
 8004a56:	42af      	cmp	r7, r5
 8004a58:	4416      	add	r6, r2
 8004a5a:	441e      	add	r6, r3
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	bfa8      	it	ge
 8004a60:	462b      	movge	r3, r5
 8004a62:	42b3      	cmp	r3, r6
 8004a64:	bfa8      	it	ge
 8004a66:	4633      	movge	r3, r6
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bfc2      	ittt	gt
 8004a6c:	1aed      	subgt	r5, r5, r3
 8004a6e:	1af6      	subgt	r6, r6, r3
 8004a70:	1aff      	subgt	r7, r7, r3
 8004a72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	dd16      	ble.n	8004aa6 <_strtod_l+0x736>
 8004a78:	4641      	mov	r1, r8
 8004a7a:	9805      	ldr	r0, [sp, #20]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f001 fb09 	bl	8006094 <__pow5mult>
 8004a82:	4680      	mov	r8, r0
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d0ba      	beq.n	80049fe <_strtod_l+0x68e>
 8004a88:	4601      	mov	r1, r0
 8004a8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004a8c:	9805      	ldr	r0, [sp, #20]
 8004a8e:	f001 fa57 	bl	8005f40 <__multiply>
 8004a92:	900e      	str	r0, [sp, #56]	@ 0x38
 8004a94:	2800      	cmp	r0, #0
 8004a96:	f43f ae8a 	beq.w	80047ae <_strtod_l+0x43e>
 8004a9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004a9c:	9805      	ldr	r0, [sp, #20]
 8004a9e:	f001 f93b 	bl	8005d18 <_Bfree>
 8004aa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004aa4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004aa6:	2d00      	cmp	r5, #0
 8004aa8:	dc1d      	bgt.n	8004ae6 <_strtod_l+0x776>
 8004aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	dd23      	ble.n	8004af8 <_strtod_l+0x788>
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004ab4:	9805      	ldr	r0, [sp, #20]
 8004ab6:	f001 faed 	bl	8006094 <__pow5mult>
 8004aba:	4681      	mov	r9, r0
 8004abc:	b9e0      	cbnz	r0, 8004af8 <_strtod_l+0x788>
 8004abe:	f04f 0900 	mov.w	r9, #0
 8004ac2:	e674      	b.n	80047ae <_strtod_l+0x43e>
 8004ac4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8004ac8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8004acc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8004ad0:	35e2      	adds	r5, #226	@ 0xe2
 8004ad2:	fa01 f305 	lsl.w	r3, r1, r5
 8004ad6:	9310      	str	r3, [sp, #64]	@ 0x40
 8004ad8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004ada:	e7ba      	b.n	8004a52 <_strtod_l+0x6e2>
 8004adc:	2300      	movs	r3, #0
 8004ade:	9310      	str	r3, [sp, #64]	@ 0x40
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004ae4:	e7b5      	b.n	8004a52 <_strtod_l+0x6e2>
 8004ae6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004ae8:	9805      	ldr	r0, [sp, #20]
 8004aea:	462a      	mov	r2, r5
 8004aec:	f001 fb2c 	bl	8006148 <__lshift>
 8004af0:	901a      	str	r0, [sp, #104]	@ 0x68
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d1d9      	bne.n	8004aaa <_strtod_l+0x73a>
 8004af6:	e65a      	b.n	80047ae <_strtod_l+0x43e>
 8004af8:	2e00      	cmp	r6, #0
 8004afa:	dd07      	ble.n	8004b0c <_strtod_l+0x79c>
 8004afc:	4649      	mov	r1, r9
 8004afe:	9805      	ldr	r0, [sp, #20]
 8004b00:	4632      	mov	r2, r6
 8004b02:	f001 fb21 	bl	8006148 <__lshift>
 8004b06:	4681      	mov	r9, r0
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d0d8      	beq.n	8004abe <_strtod_l+0x74e>
 8004b0c:	2f00      	cmp	r7, #0
 8004b0e:	dd08      	ble.n	8004b22 <_strtod_l+0x7b2>
 8004b10:	4641      	mov	r1, r8
 8004b12:	9805      	ldr	r0, [sp, #20]
 8004b14:	463a      	mov	r2, r7
 8004b16:	f001 fb17 	bl	8006148 <__lshift>
 8004b1a:	4680      	mov	r8, r0
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	f43f ae46 	beq.w	80047ae <_strtod_l+0x43e>
 8004b22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004b24:	9805      	ldr	r0, [sp, #20]
 8004b26:	464a      	mov	r2, r9
 8004b28:	f001 fb96 	bl	8006258 <__mdiff>
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	f43f ae3d 	beq.w	80047ae <_strtod_l+0x43e>
 8004b34:	68c3      	ldr	r3, [r0, #12]
 8004b36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60c3      	str	r3, [r0, #12]
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	f001 fb6f 	bl	8006220 <__mcmp>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	da46      	bge.n	8004bd4 <_strtod_l+0x864>
 8004b46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b48:	ea53 030a 	orrs.w	r3, r3, sl
 8004b4c:	d16c      	bne.n	8004c28 <_strtod_l+0x8b8>
 8004b4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d168      	bne.n	8004c28 <_strtod_l+0x8b8>
 8004b56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004b5a:	0d1b      	lsrs	r3, r3, #20
 8004b5c:	051b      	lsls	r3, r3, #20
 8004b5e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004b62:	d961      	bls.n	8004c28 <_strtod_l+0x8b8>
 8004b64:	6963      	ldr	r3, [r4, #20]
 8004b66:	b913      	cbnz	r3, 8004b6e <_strtod_l+0x7fe>
 8004b68:	6923      	ldr	r3, [r4, #16]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	dd5c      	ble.n	8004c28 <_strtod_l+0x8b8>
 8004b6e:	4621      	mov	r1, r4
 8004b70:	2201      	movs	r2, #1
 8004b72:	9805      	ldr	r0, [sp, #20]
 8004b74:	f001 fae8 	bl	8006148 <__lshift>
 8004b78:	4641      	mov	r1, r8
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	f001 fb50 	bl	8006220 <__mcmp>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	dd51      	ble.n	8004c28 <_strtod_l+0x8b8>
 8004b84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004b88:	9a08      	ldr	r2, [sp, #32]
 8004b8a:	0d1b      	lsrs	r3, r3, #20
 8004b8c:	051b      	lsls	r3, r3, #20
 8004b8e:	2a00      	cmp	r2, #0
 8004b90:	d06b      	beq.n	8004c6a <_strtod_l+0x8fa>
 8004b92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004b96:	d868      	bhi.n	8004c6a <_strtod_l+0x8fa>
 8004b98:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8004b9c:	f67f ae9d 	bls.w	80048da <_strtod_l+0x56a>
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bcc <_strtod_l+0x85c>)
 8004ba2:	4650      	mov	r0, sl
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f7fb fd46 	bl	8000638 <__aeabi_dmul>
 8004bac:	4b08      	ldr	r3, [pc, #32]	@ (8004bd0 <_strtod_l+0x860>)
 8004bae:	400b      	ands	r3, r1
 8004bb0:	4682      	mov	sl, r0
 8004bb2:	468b      	mov	fp, r1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f47f ae05 	bne.w	80047c4 <_strtod_l+0x454>
 8004bba:	9a05      	ldr	r2, [sp, #20]
 8004bbc:	2322      	movs	r3, #34	@ 0x22
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	e600      	b.n	80047c4 <_strtod_l+0x454>
 8004bc2:	bf00      	nop
 8004bc4:	08007500 	.word	0x08007500
 8004bc8:	fffffc02 	.word	0xfffffc02
 8004bcc:	39500000 	.word	0x39500000
 8004bd0:	7ff00000 	.word	0x7ff00000
 8004bd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8004bd8:	d165      	bne.n	8004ca6 <_strtod_l+0x936>
 8004bda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004bdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004be0:	b35a      	cbz	r2, 8004c3a <_strtod_l+0x8ca>
 8004be2:	4a9f      	ldr	r2, [pc, #636]	@ (8004e60 <_strtod_l+0xaf0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d12b      	bne.n	8004c40 <_strtod_l+0x8d0>
 8004be8:	9b08      	ldr	r3, [sp, #32]
 8004bea:	4651      	mov	r1, sl
 8004bec:	b303      	cbz	r3, 8004c30 <_strtod_l+0x8c0>
 8004bee:	4b9d      	ldr	r3, [pc, #628]	@ (8004e64 <_strtod_l+0xaf4>)
 8004bf0:	465a      	mov	r2, fp
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8004bf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bfc:	d81b      	bhi.n	8004c36 <_strtod_l+0x8c6>
 8004bfe:	0d1b      	lsrs	r3, r3, #20
 8004c00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	4299      	cmp	r1, r3
 8004c0a:	d119      	bne.n	8004c40 <_strtod_l+0x8d0>
 8004c0c:	4b96      	ldr	r3, [pc, #600]	@ (8004e68 <_strtod_l+0xaf8>)
 8004c0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d102      	bne.n	8004c1a <_strtod_l+0x8aa>
 8004c14:	3101      	adds	r1, #1
 8004c16:	f43f adca 	beq.w	80047ae <_strtod_l+0x43e>
 8004c1a:	4b92      	ldr	r3, [pc, #584]	@ (8004e64 <_strtod_l+0xaf4>)
 8004c1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c1e:	401a      	ands	r2, r3
 8004c20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8004c24:	f04f 0a00 	mov.w	sl, #0
 8004c28:	9b08      	ldr	r3, [sp, #32]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1b8      	bne.n	8004ba0 <_strtod_l+0x830>
 8004c2e:	e5c9      	b.n	80047c4 <_strtod_l+0x454>
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c34:	e7e8      	b.n	8004c08 <_strtod_l+0x898>
 8004c36:	4613      	mov	r3, r2
 8004c38:	e7e6      	b.n	8004c08 <_strtod_l+0x898>
 8004c3a:	ea53 030a 	orrs.w	r3, r3, sl
 8004c3e:	d0a1      	beq.n	8004b84 <_strtod_l+0x814>
 8004c40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004c42:	b1db      	cbz	r3, 8004c7c <_strtod_l+0x90c>
 8004c44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c46:	4213      	tst	r3, r2
 8004c48:	d0ee      	beq.n	8004c28 <_strtod_l+0x8b8>
 8004c4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c4c:	9a08      	ldr	r2, [sp, #32]
 8004c4e:	4650      	mov	r0, sl
 8004c50:	4659      	mov	r1, fp
 8004c52:	b1bb      	cbz	r3, 8004c84 <_strtod_l+0x914>
 8004c54:	f7ff fb6e 	bl	8004334 <sulp>
 8004c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c5c:	ec53 2b10 	vmov	r2, r3, d0
 8004c60:	f7fb fb34 	bl	80002cc <__adddf3>
 8004c64:	4682      	mov	sl, r0
 8004c66:	468b      	mov	fp, r1
 8004c68:	e7de      	b.n	8004c28 <_strtod_l+0x8b8>
 8004c6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8004c6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004c72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004c76:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004c7a:	e7d5      	b.n	8004c28 <_strtod_l+0x8b8>
 8004c7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004c7e:	ea13 0f0a 	tst.w	r3, sl
 8004c82:	e7e1      	b.n	8004c48 <_strtod_l+0x8d8>
 8004c84:	f7ff fb56 	bl	8004334 <sulp>
 8004c88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c8c:	ec53 2b10 	vmov	r2, r3, d0
 8004c90:	f7fb fb1a 	bl	80002c8 <__aeabi_dsub>
 8004c94:	2200      	movs	r2, #0
 8004c96:	2300      	movs	r3, #0
 8004c98:	4682      	mov	sl, r0
 8004c9a:	468b      	mov	fp, r1
 8004c9c:	f7fb ff34 	bl	8000b08 <__aeabi_dcmpeq>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d0c1      	beq.n	8004c28 <_strtod_l+0x8b8>
 8004ca4:	e619      	b.n	80048da <_strtod_l+0x56a>
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f001 fc31 	bl	8006510 <__ratio>
 8004cae:	ec57 6b10 	vmov	r6, r7, d0
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004cb8:	4630      	mov	r0, r6
 8004cba:	4639      	mov	r1, r7
 8004cbc:	f7fb ff38 	bl	8000b30 <__aeabi_dcmple>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d06f      	beq.n	8004da4 <_strtod_l+0xa34>
 8004cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d17a      	bne.n	8004dc0 <_strtod_l+0xa50>
 8004cca:	f1ba 0f00 	cmp.w	sl, #0
 8004cce:	d158      	bne.n	8004d82 <_strtod_l+0xa12>
 8004cd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d15a      	bne.n	8004d90 <_strtod_l+0xa20>
 8004cda:	4b64      	ldr	r3, [pc, #400]	@ (8004e6c <_strtod_l+0xafc>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	4630      	mov	r0, r6
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	f7fb ff1b 	bl	8000b1c <__aeabi_dcmplt>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d159      	bne.n	8004d9e <_strtod_l+0xa2e>
 8004cea:	4630      	mov	r0, r6
 8004cec:	4639      	mov	r1, r7
 8004cee:	4b60      	ldr	r3, [pc, #384]	@ (8004e70 <_strtod_l+0xb00>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f7fb fca1 	bl	8000638 <__aeabi_dmul>
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	460f      	mov	r7, r1
 8004cfa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8004cfe:	9606      	str	r6, [sp, #24]
 8004d00:	9307      	str	r3, [sp, #28]
 8004d02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d06:	4d57      	ldr	r5, [pc, #348]	@ (8004e64 <_strtod_l+0xaf4>)
 8004d08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004d0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d0e:	401d      	ands	r5, r3
 8004d10:	4b58      	ldr	r3, [pc, #352]	@ (8004e74 <_strtod_l+0xb04>)
 8004d12:	429d      	cmp	r5, r3
 8004d14:	f040 80b2 	bne.w	8004e7c <_strtod_l+0xb0c>
 8004d18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8004d1e:	ec4b ab10 	vmov	d0, sl, fp
 8004d22:	f001 fb2d 	bl	8006380 <__ulp>
 8004d26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d2a:	ec51 0b10 	vmov	r0, r1, d0
 8004d2e:	f7fb fc83 	bl	8000638 <__aeabi_dmul>
 8004d32:	4652      	mov	r2, sl
 8004d34:	465b      	mov	r3, fp
 8004d36:	f7fb fac9 	bl	80002cc <__adddf3>
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4949      	ldr	r1, [pc, #292]	@ (8004e64 <_strtod_l+0xaf4>)
 8004d3e:	4a4e      	ldr	r2, [pc, #312]	@ (8004e78 <_strtod_l+0xb08>)
 8004d40:	4019      	ands	r1, r3
 8004d42:	4291      	cmp	r1, r2
 8004d44:	4682      	mov	sl, r0
 8004d46:	d942      	bls.n	8004dce <_strtod_l+0xa5e>
 8004d48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004d4a:	4b47      	ldr	r3, [pc, #284]	@ (8004e68 <_strtod_l+0xaf8>)
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d103      	bne.n	8004d58 <_strtod_l+0x9e8>
 8004d50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d52:	3301      	adds	r3, #1
 8004d54:	f43f ad2b 	beq.w	80047ae <_strtod_l+0x43e>
 8004d58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8004e68 <_strtod_l+0xaf8>
 8004d5c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004d60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004d62:	9805      	ldr	r0, [sp, #20]
 8004d64:	f000 ffd8 	bl	8005d18 <_Bfree>
 8004d68:	9805      	ldr	r0, [sp, #20]
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	f000 ffd4 	bl	8005d18 <_Bfree>
 8004d70:	9805      	ldr	r0, [sp, #20]
 8004d72:	4641      	mov	r1, r8
 8004d74:	f000 ffd0 	bl	8005d18 <_Bfree>
 8004d78:	9805      	ldr	r0, [sp, #20]
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	f000 ffcc 	bl	8005d18 <_Bfree>
 8004d80:	e618      	b.n	80049b4 <_strtod_l+0x644>
 8004d82:	f1ba 0f01 	cmp.w	sl, #1
 8004d86:	d103      	bne.n	8004d90 <_strtod_l+0xa20>
 8004d88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f43f ada5 	beq.w	80048da <_strtod_l+0x56a>
 8004d90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8004e40 <_strtod_l+0xad0>
 8004d94:	4f35      	ldr	r7, [pc, #212]	@ (8004e6c <_strtod_l+0xafc>)
 8004d96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004d9a:	2600      	movs	r6, #0
 8004d9c:	e7b1      	b.n	8004d02 <_strtod_l+0x992>
 8004d9e:	4f34      	ldr	r7, [pc, #208]	@ (8004e70 <_strtod_l+0xb00>)
 8004da0:	2600      	movs	r6, #0
 8004da2:	e7aa      	b.n	8004cfa <_strtod_l+0x98a>
 8004da4:	4b32      	ldr	r3, [pc, #200]	@ (8004e70 <_strtod_l+0xb00>)
 8004da6:	4630      	mov	r0, r6
 8004da8:	4639      	mov	r1, r7
 8004daa:	2200      	movs	r2, #0
 8004dac:	f7fb fc44 	bl	8000638 <__aeabi_dmul>
 8004db0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004db2:	4606      	mov	r6, r0
 8004db4:	460f      	mov	r7, r1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d09f      	beq.n	8004cfa <_strtod_l+0x98a>
 8004dba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004dbe:	e7a0      	b.n	8004d02 <_strtod_l+0x992>
 8004dc0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8004e48 <_strtod_l+0xad8>
 8004dc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004dc8:	ec57 6b17 	vmov	r6, r7, d7
 8004dcc:	e799      	b.n	8004d02 <_strtod_l+0x992>
 8004dce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8004dd2:	9b08      	ldr	r3, [sp, #32]
 8004dd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1c1      	bne.n	8004d60 <_strtod_l+0x9f0>
 8004ddc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004de0:	0d1b      	lsrs	r3, r3, #20
 8004de2:	051b      	lsls	r3, r3, #20
 8004de4:	429d      	cmp	r5, r3
 8004de6:	d1bb      	bne.n	8004d60 <_strtod_l+0x9f0>
 8004de8:	4630      	mov	r0, r6
 8004dea:	4639      	mov	r1, r7
 8004dec:	f7fb ff46 	bl	8000c7c <__aeabi_d2lz>
 8004df0:	f7fb fbf4 	bl	80005dc <__aeabi_l2d>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4630      	mov	r0, r6
 8004dfa:	4639      	mov	r1, r7
 8004dfc:	f7fb fa64 	bl	80002c8 <__aeabi_dsub>
 8004e00:	460b      	mov	r3, r1
 8004e02:	4602      	mov	r2, r0
 8004e04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004e08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8004e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e0e:	ea46 060a 	orr.w	r6, r6, sl
 8004e12:	431e      	orrs	r6, r3
 8004e14:	d06f      	beq.n	8004ef6 <_strtod_l+0xb86>
 8004e16:	a30e      	add	r3, pc, #56	@ (adr r3, 8004e50 <_strtod_l+0xae0>)
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f7fb fe7e 	bl	8000b1c <__aeabi_dcmplt>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	f47f accf 	bne.w	80047c4 <_strtod_l+0x454>
 8004e26:	a30c      	add	r3, pc, #48	@ (adr r3, 8004e58 <_strtod_l+0xae8>)
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e30:	f7fb fe92 	bl	8000b58 <__aeabi_dcmpgt>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d093      	beq.n	8004d60 <_strtod_l+0x9f0>
 8004e38:	e4c4      	b.n	80047c4 <_strtod_l+0x454>
 8004e3a:	bf00      	nop
 8004e3c:	f3af 8000 	nop.w
 8004e40:	00000000 	.word	0x00000000
 8004e44:	bff00000 	.word	0xbff00000
 8004e48:	00000000 	.word	0x00000000
 8004e4c:	3ff00000 	.word	0x3ff00000
 8004e50:	94a03595 	.word	0x94a03595
 8004e54:	3fdfffff 	.word	0x3fdfffff
 8004e58:	35afe535 	.word	0x35afe535
 8004e5c:	3fe00000 	.word	0x3fe00000
 8004e60:	000fffff 	.word	0x000fffff
 8004e64:	7ff00000 	.word	0x7ff00000
 8004e68:	7fefffff 	.word	0x7fefffff
 8004e6c:	3ff00000 	.word	0x3ff00000
 8004e70:	3fe00000 	.word	0x3fe00000
 8004e74:	7fe00000 	.word	0x7fe00000
 8004e78:	7c9fffff 	.word	0x7c9fffff
 8004e7c:	9b08      	ldr	r3, [sp, #32]
 8004e7e:	b323      	cbz	r3, 8004eca <_strtod_l+0xb5a>
 8004e80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8004e84:	d821      	bhi.n	8004eca <_strtod_l+0xb5a>
 8004e86:	a328      	add	r3, pc, #160	@ (adr r3, 8004f28 <_strtod_l+0xbb8>)
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	4639      	mov	r1, r7
 8004e90:	f7fb fe4e 	bl	8000b30 <__aeabi_dcmple>
 8004e94:	b1a0      	cbz	r0, 8004ec0 <_strtod_l+0xb50>
 8004e96:	4639      	mov	r1, r7
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f7fb fe67 	bl	8000b6c <__aeabi_d2uiz>
 8004e9e:	2801      	cmp	r0, #1
 8004ea0:	bf38      	it	cc
 8004ea2:	2001      	movcc	r0, #1
 8004ea4:	f7fb fb4e 	bl	8000544 <__aeabi_ui2d>
 8004ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004eaa:	4606      	mov	r6, r0
 8004eac:	460f      	mov	r7, r1
 8004eae:	b9fb      	cbnz	r3, 8004ef0 <_strtod_l+0xb80>
 8004eb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004eb4:	9014      	str	r0, [sp, #80]	@ 0x50
 8004eb6:	9315      	str	r3, [sp, #84]	@ 0x54
 8004eb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8004ebc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004ec0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004ec2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8004ec6:	1b5b      	subs	r3, r3, r5
 8004ec8:	9311      	str	r3, [sp, #68]	@ 0x44
 8004eca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004ece:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8004ed2:	f001 fa55 	bl	8006380 <__ulp>
 8004ed6:	4650      	mov	r0, sl
 8004ed8:	ec53 2b10 	vmov	r2, r3, d0
 8004edc:	4659      	mov	r1, fp
 8004ede:	f7fb fbab 	bl	8000638 <__aeabi_dmul>
 8004ee2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004ee6:	f7fb f9f1 	bl	80002cc <__adddf3>
 8004eea:	4682      	mov	sl, r0
 8004eec:	468b      	mov	fp, r1
 8004eee:	e770      	b.n	8004dd2 <_strtod_l+0xa62>
 8004ef0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8004ef4:	e7e0      	b.n	8004eb8 <_strtod_l+0xb48>
 8004ef6:	a30e      	add	r3, pc, #56	@ (adr r3, 8004f30 <_strtod_l+0xbc0>)
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	f7fb fe0e 	bl	8000b1c <__aeabi_dcmplt>
 8004f00:	e798      	b.n	8004e34 <_strtod_l+0xac4>
 8004f02:	2300      	movs	r3, #0
 8004f04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8004f08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	f7ff ba6d 	b.w	80043ea <_strtod_l+0x7a>
 8004f10:	2a65      	cmp	r2, #101	@ 0x65
 8004f12:	f43f ab66 	beq.w	80045e2 <_strtod_l+0x272>
 8004f16:	2a45      	cmp	r2, #69	@ 0x45
 8004f18:	f43f ab63 	beq.w	80045e2 <_strtod_l+0x272>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f7ff bb9e 	b.w	800465e <_strtod_l+0x2ee>
 8004f22:	bf00      	nop
 8004f24:	f3af 8000 	nop.w
 8004f28:	ffc00000 	.word	0xffc00000
 8004f2c:	41dfffff 	.word	0x41dfffff
 8004f30:	94a03595 	.word	0x94a03595
 8004f34:	3fcfffff 	.word	0x3fcfffff

08004f38 <strtod>:
 8004f38:	460a      	mov	r2, r1
 8004f3a:	4601      	mov	r1, r0
 8004f3c:	4802      	ldr	r0, [pc, #8]	@ (8004f48 <strtod+0x10>)
 8004f3e:	4b03      	ldr	r3, [pc, #12]	@ (8004f4c <strtod+0x14>)
 8004f40:	6800      	ldr	r0, [r0, #0]
 8004f42:	f7ff ba15 	b.w	8004370 <_strtod_l>
 8004f46:	bf00      	nop
 8004f48:	20000184 	.word	0x20000184
 8004f4c:	20000018 	.word	0x20000018

08004f50 <_strtol_l.constprop.0>:
 8004f50:	2b24      	cmp	r3, #36	@ 0x24
 8004f52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f56:	4686      	mov	lr, r0
 8004f58:	4690      	mov	r8, r2
 8004f5a:	d801      	bhi.n	8004f60 <_strtol_l.constprop.0+0x10>
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d106      	bne.n	8004f6e <_strtol_l.constprop.0+0x1e>
 8004f60:	f000 fa12 	bl	8005388 <__errno>
 8004f64:	2316      	movs	r3, #22
 8004f66:	6003      	str	r3, [r0, #0]
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6e:	4834      	ldr	r0, [pc, #208]	@ (8005040 <_strtol_l.constprop.0+0xf0>)
 8004f70:	460d      	mov	r5, r1
 8004f72:	462a      	mov	r2, r5
 8004f74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f78:	5d06      	ldrb	r6, [r0, r4]
 8004f7a:	f016 0608 	ands.w	r6, r6, #8
 8004f7e:	d1f8      	bne.n	8004f72 <_strtol_l.constprop.0+0x22>
 8004f80:	2c2d      	cmp	r4, #45	@ 0x2d
 8004f82:	d12d      	bne.n	8004fe0 <_strtol_l.constprop.0+0x90>
 8004f84:	782c      	ldrb	r4, [r5, #0]
 8004f86:	2601      	movs	r6, #1
 8004f88:	1c95      	adds	r5, r2, #2
 8004f8a:	f033 0210 	bics.w	r2, r3, #16
 8004f8e:	d109      	bne.n	8004fa4 <_strtol_l.constprop.0+0x54>
 8004f90:	2c30      	cmp	r4, #48	@ 0x30
 8004f92:	d12a      	bne.n	8004fea <_strtol_l.constprop.0+0x9a>
 8004f94:	782a      	ldrb	r2, [r5, #0]
 8004f96:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004f9a:	2a58      	cmp	r2, #88	@ 0x58
 8004f9c:	d125      	bne.n	8004fea <_strtol_l.constprop.0+0x9a>
 8004f9e:	786c      	ldrb	r4, [r5, #1]
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	3502      	adds	r5, #2
 8004fa4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004fa8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004fac:	2200      	movs	r2, #0
 8004fae:	fbbc f9f3 	udiv	r9, ip, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	fb03 ca19 	mls	sl, r3, r9, ip
 8004fb8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004fbc:	2f09      	cmp	r7, #9
 8004fbe:	d81b      	bhi.n	8004ff8 <_strtol_l.constprop.0+0xa8>
 8004fc0:	463c      	mov	r4, r7
 8004fc2:	42a3      	cmp	r3, r4
 8004fc4:	dd27      	ble.n	8005016 <_strtol_l.constprop.0+0xc6>
 8004fc6:	1c57      	adds	r7, r2, #1
 8004fc8:	d007      	beq.n	8004fda <_strtol_l.constprop.0+0x8a>
 8004fca:	4581      	cmp	r9, r0
 8004fcc:	d320      	bcc.n	8005010 <_strtol_l.constprop.0+0xc0>
 8004fce:	d101      	bne.n	8004fd4 <_strtol_l.constprop.0+0x84>
 8004fd0:	45a2      	cmp	sl, r4
 8004fd2:	db1d      	blt.n	8005010 <_strtol_l.constprop.0+0xc0>
 8004fd4:	fb00 4003 	mla	r0, r0, r3, r4
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fde:	e7eb      	b.n	8004fb8 <_strtol_l.constprop.0+0x68>
 8004fe0:	2c2b      	cmp	r4, #43	@ 0x2b
 8004fe2:	bf04      	itt	eq
 8004fe4:	782c      	ldrbeq	r4, [r5, #0]
 8004fe6:	1c95      	addeq	r5, r2, #2
 8004fe8:	e7cf      	b.n	8004f8a <_strtol_l.constprop.0+0x3a>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1da      	bne.n	8004fa4 <_strtol_l.constprop.0+0x54>
 8004fee:	2c30      	cmp	r4, #48	@ 0x30
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2308      	moveq	r3, #8
 8004ff4:	230a      	movne	r3, #10
 8004ff6:	e7d5      	b.n	8004fa4 <_strtol_l.constprop.0+0x54>
 8004ff8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004ffc:	2f19      	cmp	r7, #25
 8004ffe:	d801      	bhi.n	8005004 <_strtol_l.constprop.0+0xb4>
 8005000:	3c37      	subs	r4, #55	@ 0x37
 8005002:	e7de      	b.n	8004fc2 <_strtol_l.constprop.0+0x72>
 8005004:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005008:	2f19      	cmp	r7, #25
 800500a:	d804      	bhi.n	8005016 <_strtol_l.constprop.0+0xc6>
 800500c:	3c57      	subs	r4, #87	@ 0x57
 800500e:	e7d8      	b.n	8004fc2 <_strtol_l.constprop.0+0x72>
 8005010:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005014:	e7e1      	b.n	8004fda <_strtol_l.constprop.0+0x8a>
 8005016:	1c53      	adds	r3, r2, #1
 8005018:	d108      	bne.n	800502c <_strtol_l.constprop.0+0xdc>
 800501a:	2322      	movs	r3, #34	@ 0x22
 800501c:	f8ce 3000 	str.w	r3, [lr]
 8005020:	4660      	mov	r0, ip
 8005022:	f1b8 0f00 	cmp.w	r8, #0
 8005026:	d0a0      	beq.n	8004f6a <_strtol_l.constprop.0+0x1a>
 8005028:	1e69      	subs	r1, r5, #1
 800502a:	e006      	b.n	800503a <_strtol_l.constprop.0+0xea>
 800502c:	b106      	cbz	r6, 8005030 <_strtol_l.constprop.0+0xe0>
 800502e:	4240      	negs	r0, r0
 8005030:	f1b8 0f00 	cmp.w	r8, #0
 8005034:	d099      	beq.n	8004f6a <_strtol_l.constprop.0+0x1a>
 8005036:	2a00      	cmp	r2, #0
 8005038:	d1f6      	bne.n	8005028 <_strtol_l.constprop.0+0xd8>
 800503a:	f8c8 1000 	str.w	r1, [r8]
 800503e:	e794      	b.n	8004f6a <_strtol_l.constprop.0+0x1a>
 8005040:	08007529 	.word	0x08007529

08005044 <strtol>:
 8005044:	4613      	mov	r3, r2
 8005046:	460a      	mov	r2, r1
 8005048:	4601      	mov	r1, r0
 800504a:	4802      	ldr	r0, [pc, #8]	@ (8005054 <strtol+0x10>)
 800504c:	6800      	ldr	r0, [r0, #0]
 800504e:	f7ff bf7f 	b.w	8004f50 <_strtol_l.constprop.0>
 8005052:	bf00      	nop
 8005054:	20000184 	.word	0x20000184

08005058 <std>:
 8005058:	2300      	movs	r3, #0
 800505a:	b510      	push	{r4, lr}
 800505c:	4604      	mov	r4, r0
 800505e:	e9c0 3300 	strd	r3, r3, [r0]
 8005062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005066:	6083      	str	r3, [r0, #8]
 8005068:	8181      	strh	r1, [r0, #12]
 800506a:	6643      	str	r3, [r0, #100]	@ 0x64
 800506c:	81c2      	strh	r2, [r0, #14]
 800506e:	6183      	str	r3, [r0, #24]
 8005070:	4619      	mov	r1, r3
 8005072:	2208      	movs	r2, #8
 8005074:	305c      	adds	r0, #92	@ 0x5c
 8005076:	f000 f914 	bl	80052a2 <memset>
 800507a:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <std+0x58>)
 800507c:	6263      	str	r3, [r4, #36]	@ 0x24
 800507e:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <std+0x5c>)
 8005080:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005082:	4b0d      	ldr	r3, [pc, #52]	@ (80050b8 <std+0x60>)
 8005084:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005086:	4b0d      	ldr	r3, [pc, #52]	@ (80050bc <std+0x64>)
 8005088:	6323      	str	r3, [r4, #48]	@ 0x30
 800508a:	4b0d      	ldr	r3, [pc, #52]	@ (80050c0 <std+0x68>)
 800508c:	6224      	str	r4, [r4, #32]
 800508e:	429c      	cmp	r4, r3
 8005090:	d006      	beq.n	80050a0 <std+0x48>
 8005092:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005096:	4294      	cmp	r4, r2
 8005098:	d002      	beq.n	80050a0 <std+0x48>
 800509a:	33d0      	adds	r3, #208	@ 0xd0
 800509c:	429c      	cmp	r4, r3
 800509e:	d105      	bne.n	80050ac <std+0x54>
 80050a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a8:	f000 b998 	b.w	80053dc <__retarget_lock_init_recursive>
 80050ac:	bd10      	pop	{r4, pc}
 80050ae:	bf00      	nop
 80050b0:	0800521d 	.word	0x0800521d
 80050b4:	0800523f 	.word	0x0800523f
 80050b8:	08005277 	.word	0x08005277
 80050bc:	0800529b 	.word	0x0800529b
 80050c0:	20000474 	.word	0x20000474

080050c4 <stdio_exit_handler>:
 80050c4:	4a02      	ldr	r2, [pc, #8]	@ (80050d0 <stdio_exit_handler+0xc>)
 80050c6:	4903      	ldr	r1, [pc, #12]	@ (80050d4 <stdio_exit_handler+0x10>)
 80050c8:	4803      	ldr	r0, [pc, #12]	@ (80050d8 <stdio_exit_handler+0x14>)
 80050ca:	f000 b869 	b.w	80051a0 <_fwalk_sglue>
 80050ce:	bf00      	nop
 80050d0:	2000000c 	.word	0x2000000c
 80050d4:	08006ce9 	.word	0x08006ce9
 80050d8:	20000188 	.word	0x20000188

080050dc <cleanup_stdio>:
 80050dc:	6841      	ldr	r1, [r0, #4]
 80050de:	4b0c      	ldr	r3, [pc, #48]	@ (8005110 <cleanup_stdio+0x34>)
 80050e0:	4299      	cmp	r1, r3
 80050e2:	b510      	push	{r4, lr}
 80050e4:	4604      	mov	r4, r0
 80050e6:	d001      	beq.n	80050ec <cleanup_stdio+0x10>
 80050e8:	f001 fdfe 	bl	8006ce8 <_fflush_r>
 80050ec:	68a1      	ldr	r1, [r4, #8]
 80050ee:	4b09      	ldr	r3, [pc, #36]	@ (8005114 <cleanup_stdio+0x38>)
 80050f0:	4299      	cmp	r1, r3
 80050f2:	d002      	beq.n	80050fa <cleanup_stdio+0x1e>
 80050f4:	4620      	mov	r0, r4
 80050f6:	f001 fdf7 	bl	8006ce8 <_fflush_r>
 80050fa:	68e1      	ldr	r1, [r4, #12]
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <cleanup_stdio+0x3c>)
 80050fe:	4299      	cmp	r1, r3
 8005100:	d004      	beq.n	800510c <cleanup_stdio+0x30>
 8005102:	4620      	mov	r0, r4
 8005104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005108:	f001 bdee 	b.w	8006ce8 <_fflush_r>
 800510c:	bd10      	pop	{r4, pc}
 800510e:	bf00      	nop
 8005110:	20000474 	.word	0x20000474
 8005114:	200004dc 	.word	0x200004dc
 8005118:	20000544 	.word	0x20000544

0800511c <global_stdio_init.part.0>:
 800511c:	b510      	push	{r4, lr}
 800511e:	4b0b      	ldr	r3, [pc, #44]	@ (800514c <global_stdio_init.part.0+0x30>)
 8005120:	4c0b      	ldr	r4, [pc, #44]	@ (8005150 <global_stdio_init.part.0+0x34>)
 8005122:	4a0c      	ldr	r2, [pc, #48]	@ (8005154 <global_stdio_init.part.0+0x38>)
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	4620      	mov	r0, r4
 8005128:	2200      	movs	r2, #0
 800512a:	2104      	movs	r1, #4
 800512c:	f7ff ff94 	bl	8005058 <std>
 8005130:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005134:	2201      	movs	r2, #1
 8005136:	2109      	movs	r1, #9
 8005138:	f7ff ff8e 	bl	8005058 <std>
 800513c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005140:	2202      	movs	r2, #2
 8005142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005146:	2112      	movs	r1, #18
 8005148:	f7ff bf86 	b.w	8005058 <std>
 800514c:	200005ac 	.word	0x200005ac
 8005150:	20000474 	.word	0x20000474
 8005154:	080050c5 	.word	0x080050c5

08005158 <__sfp_lock_acquire>:
 8005158:	4801      	ldr	r0, [pc, #4]	@ (8005160 <__sfp_lock_acquire+0x8>)
 800515a:	f000 b940 	b.w	80053de <__retarget_lock_acquire_recursive>
 800515e:	bf00      	nop
 8005160:	200005b5 	.word	0x200005b5

08005164 <__sfp_lock_release>:
 8005164:	4801      	ldr	r0, [pc, #4]	@ (800516c <__sfp_lock_release+0x8>)
 8005166:	f000 b93b 	b.w	80053e0 <__retarget_lock_release_recursive>
 800516a:	bf00      	nop
 800516c:	200005b5 	.word	0x200005b5

08005170 <__sinit>:
 8005170:	b510      	push	{r4, lr}
 8005172:	4604      	mov	r4, r0
 8005174:	f7ff fff0 	bl	8005158 <__sfp_lock_acquire>
 8005178:	6a23      	ldr	r3, [r4, #32]
 800517a:	b11b      	cbz	r3, 8005184 <__sinit+0x14>
 800517c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005180:	f7ff bff0 	b.w	8005164 <__sfp_lock_release>
 8005184:	4b04      	ldr	r3, [pc, #16]	@ (8005198 <__sinit+0x28>)
 8005186:	6223      	str	r3, [r4, #32]
 8005188:	4b04      	ldr	r3, [pc, #16]	@ (800519c <__sinit+0x2c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1f5      	bne.n	800517c <__sinit+0xc>
 8005190:	f7ff ffc4 	bl	800511c <global_stdio_init.part.0>
 8005194:	e7f2      	b.n	800517c <__sinit+0xc>
 8005196:	bf00      	nop
 8005198:	080050dd 	.word	0x080050dd
 800519c:	200005ac 	.word	0x200005ac

080051a0 <_fwalk_sglue>:
 80051a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a4:	4607      	mov	r7, r0
 80051a6:	4688      	mov	r8, r1
 80051a8:	4614      	mov	r4, r2
 80051aa:	2600      	movs	r6, #0
 80051ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051b0:	f1b9 0901 	subs.w	r9, r9, #1
 80051b4:	d505      	bpl.n	80051c2 <_fwalk_sglue+0x22>
 80051b6:	6824      	ldr	r4, [r4, #0]
 80051b8:	2c00      	cmp	r4, #0
 80051ba:	d1f7      	bne.n	80051ac <_fwalk_sglue+0xc>
 80051bc:	4630      	mov	r0, r6
 80051be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c2:	89ab      	ldrh	r3, [r5, #12]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d907      	bls.n	80051d8 <_fwalk_sglue+0x38>
 80051c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051cc:	3301      	adds	r3, #1
 80051ce:	d003      	beq.n	80051d8 <_fwalk_sglue+0x38>
 80051d0:	4629      	mov	r1, r5
 80051d2:	4638      	mov	r0, r7
 80051d4:	47c0      	blx	r8
 80051d6:	4306      	orrs	r6, r0
 80051d8:	3568      	adds	r5, #104	@ 0x68
 80051da:	e7e9      	b.n	80051b0 <_fwalk_sglue+0x10>

080051dc <siprintf>:
 80051dc:	b40e      	push	{r1, r2, r3}
 80051de:	b500      	push	{lr}
 80051e0:	b09c      	sub	sp, #112	@ 0x70
 80051e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80051e4:	9002      	str	r0, [sp, #8]
 80051e6:	9006      	str	r0, [sp, #24]
 80051e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80051ec:	4809      	ldr	r0, [pc, #36]	@ (8005214 <siprintf+0x38>)
 80051ee:	9107      	str	r1, [sp, #28]
 80051f0:	9104      	str	r1, [sp, #16]
 80051f2:	4909      	ldr	r1, [pc, #36]	@ (8005218 <siprintf+0x3c>)
 80051f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051f8:	9105      	str	r1, [sp, #20]
 80051fa:	6800      	ldr	r0, [r0, #0]
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	a902      	add	r1, sp, #8
 8005200:	f001 fa64 	bl	80066cc <_svfiprintf_r>
 8005204:	9b02      	ldr	r3, [sp, #8]
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	b01c      	add	sp, #112	@ 0x70
 800520c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005210:	b003      	add	sp, #12
 8005212:	4770      	bx	lr
 8005214:	20000184 	.word	0x20000184
 8005218:	ffff0208 	.word	0xffff0208

0800521c <__sread>:
 800521c:	b510      	push	{r4, lr}
 800521e:	460c      	mov	r4, r1
 8005220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005224:	f000 f88c 	bl	8005340 <_read_r>
 8005228:	2800      	cmp	r0, #0
 800522a:	bfab      	itete	ge
 800522c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800522e:	89a3      	ldrhlt	r3, [r4, #12]
 8005230:	181b      	addge	r3, r3, r0
 8005232:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005236:	bfac      	ite	ge
 8005238:	6563      	strge	r3, [r4, #84]	@ 0x54
 800523a:	81a3      	strhlt	r3, [r4, #12]
 800523c:	bd10      	pop	{r4, pc}

0800523e <__swrite>:
 800523e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005242:	461f      	mov	r7, r3
 8005244:	898b      	ldrh	r3, [r1, #12]
 8005246:	05db      	lsls	r3, r3, #23
 8005248:	4605      	mov	r5, r0
 800524a:	460c      	mov	r4, r1
 800524c:	4616      	mov	r6, r2
 800524e:	d505      	bpl.n	800525c <__swrite+0x1e>
 8005250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005254:	2302      	movs	r3, #2
 8005256:	2200      	movs	r2, #0
 8005258:	f000 f860 	bl	800531c <_lseek_r>
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005262:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005266:	81a3      	strh	r3, [r4, #12]
 8005268:	4632      	mov	r2, r6
 800526a:	463b      	mov	r3, r7
 800526c:	4628      	mov	r0, r5
 800526e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005272:	f000 b877 	b.w	8005364 <_write_r>

08005276 <__sseek>:
 8005276:	b510      	push	{r4, lr}
 8005278:	460c      	mov	r4, r1
 800527a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527e:	f000 f84d 	bl	800531c <_lseek_r>
 8005282:	1c43      	adds	r3, r0, #1
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	bf15      	itete	ne
 8005288:	6560      	strne	r0, [r4, #84]	@ 0x54
 800528a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800528e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005292:	81a3      	strheq	r3, [r4, #12]
 8005294:	bf18      	it	ne
 8005296:	81a3      	strhne	r3, [r4, #12]
 8005298:	bd10      	pop	{r4, pc}

0800529a <__sclose>:
 800529a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529e:	f000 b82d 	b.w	80052fc <_close_r>

080052a2 <memset>:
 80052a2:	4402      	add	r2, r0
 80052a4:	4603      	mov	r3, r0
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d100      	bne.n	80052ac <memset+0xa>
 80052aa:	4770      	bx	lr
 80052ac:	f803 1b01 	strb.w	r1, [r3], #1
 80052b0:	e7f9      	b.n	80052a6 <memset+0x4>

080052b2 <strncmp>:
 80052b2:	b510      	push	{r4, lr}
 80052b4:	b16a      	cbz	r2, 80052d2 <strncmp+0x20>
 80052b6:	3901      	subs	r1, #1
 80052b8:	1884      	adds	r4, r0, r2
 80052ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d103      	bne.n	80052ce <strncmp+0x1c>
 80052c6:	42a0      	cmp	r0, r4
 80052c8:	d001      	beq.n	80052ce <strncmp+0x1c>
 80052ca:	2a00      	cmp	r2, #0
 80052cc:	d1f5      	bne.n	80052ba <strncmp+0x8>
 80052ce:	1ad0      	subs	r0, r2, r3
 80052d0:	bd10      	pop	{r4, pc}
 80052d2:	4610      	mov	r0, r2
 80052d4:	e7fc      	b.n	80052d0 <strncmp+0x1e>

080052d6 <strncpy>:
 80052d6:	b510      	push	{r4, lr}
 80052d8:	3901      	subs	r1, #1
 80052da:	4603      	mov	r3, r0
 80052dc:	b132      	cbz	r2, 80052ec <strncpy+0x16>
 80052de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80052e2:	f803 4b01 	strb.w	r4, [r3], #1
 80052e6:	3a01      	subs	r2, #1
 80052e8:	2c00      	cmp	r4, #0
 80052ea:	d1f7      	bne.n	80052dc <strncpy+0x6>
 80052ec:	441a      	add	r2, r3
 80052ee:	2100      	movs	r1, #0
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d100      	bne.n	80052f6 <strncpy+0x20>
 80052f4:	bd10      	pop	{r4, pc}
 80052f6:	f803 1b01 	strb.w	r1, [r3], #1
 80052fa:	e7f9      	b.n	80052f0 <strncpy+0x1a>

080052fc <_close_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4d06      	ldr	r5, [pc, #24]	@ (8005318 <_close_r+0x1c>)
 8005300:	2300      	movs	r3, #0
 8005302:	4604      	mov	r4, r0
 8005304:	4608      	mov	r0, r1
 8005306:	602b      	str	r3, [r5, #0]
 8005308:	f7fc fce8 	bl	8001cdc <_close>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d102      	bne.n	8005316 <_close_r+0x1a>
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	b103      	cbz	r3, 8005316 <_close_r+0x1a>
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	200005b0 	.word	0x200005b0

0800531c <_lseek_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4d07      	ldr	r5, [pc, #28]	@ (800533c <_lseek_r+0x20>)
 8005320:	4604      	mov	r4, r0
 8005322:	4608      	mov	r0, r1
 8005324:	4611      	mov	r1, r2
 8005326:	2200      	movs	r2, #0
 8005328:	602a      	str	r2, [r5, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	f7fc fcfd 	bl	8001d2a <_lseek>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d102      	bne.n	800533a <_lseek_r+0x1e>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	b103      	cbz	r3, 800533a <_lseek_r+0x1e>
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	bd38      	pop	{r3, r4, r5, pc}
 800533c:	200005b0 	.word	0x200005b0

08005340 <_read_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4d07      	ldr	r5, [pc, #28]	@ (8005360 <_read_r+0x20>)
 8005344:	4604      	mov	r4, r0
 8005346:	4608      	mov	r0, r1
 8005348:	4611      	mov	r1, r2
 800534a:	2200      	movs	r2, #0
 800534c:	602a      	str	r2, [r5, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f7fc fc8b 	bl	8001c6a <_read>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	d102      	bne.n	800535e <_read_r+0x1e>
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	b103      	cbz	r3, 800535e <_read_r+0x1e>
 800535c:	6023      	str	r3, [r4, #0]
 800535e:	bd38      	pop	{r3, r4, r5, pc}
 8005360:	200005b0 	.word	0x200005b0

08005364 <_write_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4d07      	ldr	r5, [pc, #28]	@ (8005384 <_write_r+0x20>)
 8005368:	4604      	mov	r4, r0
 800536a:	4608      	mov	r0, r1
 800536c:	4611      	mov	r1, r2
 800536e:	2200      	movs	r2, #0
 8005370:	602a      	str	r2, [r5, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	f7fc fc96 	bl	8001ca4 <_write>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d102      	bne.n	8005382 <_write_r+0x1e>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	b103      	cbz	r3, 8005382 <_write_r+0x1e>
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	200005b0 	.word	0x200005b0

08005388 <__errno>:
 8005388:	4b01      	ldr	r3, [pc, #4]	@ (8005390 <__errno+0x8>)
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20000184 	.word	0x20000184

08005394 <__libc_init_array>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	4d0d      	ldr	r5, [pc, #52]	@ (80053cc <__libc_init_array+0x38>)
 8005398:	4c0d      	ldr	r4, [pc, #52]	@ (80053d0 <__libc_init_array+0x3c>)
 800539a:	1b64      	subs	r4, r4, r5
 800539c:	10a4      	asrs	r4, r4, #2
 800539e:	2600      	movs	r6, #0
 80053a0:	42a6      	cmp	r6, r4
 80053a2:	d109      	bne.n	80053b8 <__libc_init_array+0x24>
 80053a4:	4d0b      	ldr	r5, [pc, #44]	@ (80053d4 <__libc_init_array+0x40>)
 80053a6:	4c0c      	ldr	r4, [pc, #48]	@ (80053d8 <__libc_init_array+0x44>)
 80053a8:	f002 f816 	bl	80073d8 <_init>
 80053ac:	1b64      	subs	r4, r4, r5
 80053ae:	10a4      	asrs	r4, r4, #2
 80053b0:	2600      	movs	r6, #0
 80053b2:	42a6      	cmp	r6, r4
 80053b4:	d105      	bne.n	80053c2 <__libc_init_array+0x2e>
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053bc:	4798      	blx	r3
 80053be:	3601      	adds	r6, #1
 80053c0:	e7ee      	b.n	80053a0 <__libc_init_array+0xc>
 80053c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c6:	4798      	blx	r3
 80053c8:	3601      	adds	r6, #1
 80053ca:	e7f2      	b.n	80053b2 <__libc_init_array+0x1e>
 80053cc:	08007888 	.word	0x08007888
 80053d0:	08007888 	.word	0x08007888
 80053d4:	08007888 	.word	0x08007888
 80053d8:	0800788c 	.word	0x0800788c

080053dc <__retarget_lock_init_recursive>:
 80053dc:	4770      	bx	lr

080053de <__retarget_lock_acquire_recursive>:
 80053de:	4770      	bx	lr

080053e0 <__retarget_lock_release_recursive>:
 80053e0:	4770      	bx	lr

080053e2 <memcpy>:
 80053e2:	440a      	add	r2, r1
 80053e4:	4291      	cmp	r1, r2
 80053e6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80053ea:	d100      	bne.n	80053ee <memcpy+0xc>
 80053ec:	4770      	bx	lr
 80053ee:	b510      	push	{r4, lr}
 80053f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f8:	4291      	cmp	r1, r2
 80053fa:	d1f9      	bne.n	80053f0 <memcpy+0xe>
 80053fc:	bd10      	pop	{r4, pc}
	...

08005400 <nan>:
 8005400:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005408 <nan+0x8>
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	00000000 	.word	0x00000000
 800540c:	7ff80000 	.word	0x7ff80000

08005410 <_free_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4605      	mov	r5, r0
 8005414:	2900      	cmp	r1, #0
 8005416:	d041      	beq.n	800549c <_free_r+0x8c>
 8005418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800541c:	1f0c      	subs	r4, r1, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	bfb8      	it	lt
 8005422:	18e4      	addlt	r4, r4, r3
 8005424:	f000 fc2c 	bl	8005c80 <__malloc_lock>
 8005428:	4a1d      	ldr	r2, [pc, #116]	@ (80054a0 <_free_r+0x90>)
 800542a:	6813      	ldr	r3, [r2, #0]
 800542c:	b933      	cbnz	r3, 800543c <_free_r+0x2c>
 800542e:	6063      	str	r3, [r4, #4]
 8005430:	6014      	str	r4, [r2, #0]
 8005432:	4628      	mov	r0, r5
 8005434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005438:	f000 bc28 	b.w	8005c8c <__malloc_unlock>
 800543c:	42a3      	cmp	r3, r4
 800543e:	d908      	bls.n	8005452 <_free_r+0x42>
 8005440:	6820      	ldr	r0, [r4, #0]
 8005442:	1821      	adds	r1, r4, r0
 8005444:	428b      	cmp	r3, r1
 8005446:	bf01      	itttt	eq
 8005448:	6819      	ldreq	r1, [r3, #0]
 800544a:	685b      	ldreq	r3, [r3, #4]
 800544c:	1809      	addeq	r1, r1, r0
 800544e:	6021      	streq	r1, [r4, #0]
 8005450:	e7ed      	b.n	800542e <_free_r+0x1e>
 8005452:	461a      	mov	r2, r3
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	b10b      	cbz	r3, 800545c <_free_r+0x4c>
 8005458:	42a3      	cmp	r3, r4
 800545a:	d9fa      	bls.n	8005452 <_free_r+0x42>
 800545c:	6811      	ldr	r1, [r2, #0]
 800545e:	1850      	adds	r0, r2, r1
 8005460:	42a0      	cmp	r0, r4
 8005462:	d10b      	bne.n	800547c <_free_r+0x6c>
 8005464:	6820      	ldr	r0, [r4, #0]
 8005466:	4401      	add	r1, r0
 8005468:	1850      	adds	r0, r2, r1
 800546a:	4283      	cmp	r3, r0
 800546c:	6011      	str	r1, [r2, #0]
 800546e:	d1e0      	bne.n	8005432 <_free_r+0x22>
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	6053      	str	r3, [r2, #4]
 8005476:	4408      	add	r0, r1
 8005478:	6010      	str	r0, [r2, #0]
 800547a:	e7da      	b.n	8005432 <_free_r+0x22>
 800547c:	d902      	bls.n	8005484 <_free_r+0x74>
 800547e:	230c      	movs	r3, #12
 8005480:	602b      	str	r3, [r5, #0]
 8005482:	e7d6      	b.n	8005432 <_free_r+0x22>
 8005484:	6820      	ldr	r0, [r4, #0]
 8005486:	1821      	adds	r1, r4, r0
 8005488:	428b      	cmp	r3, r1
 800548a:	bf04      	itt	eq
 800548c:	6819      	ldreq	r1, [r3, #0]
 800548e:	685b      	ldreq	r3, [r3, #4]
 8005490:	6063      	str	r3, [r4, #4]
 8005492:	bf04      	itt	eq
 8005494:	1809      	addeq	r1, r1, r0
 8005496:	6021      	streq	r1, [r4, #0]
 8005498:	6054      	str	r4, [r2, #4]
 800549a:	e7ca      	b.n	8005432 <_free_r+0x22>
 800549c:	bd38      	pop	{r3, r4, r5, pc}
 800549e:	bf00      	nop
 80054a0:	200005bc 	.word	0x200005bc

080054a4 <rshift>:
 80054a4:	6903      	ldr	r3, [r0, #16]
 80054a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80054aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80054b2:	f100 0414 	add.w	r4, r0, #20
 80054b6:	dd45      	ble.n	8005544 <rshift+0xa0>
 80054b8:	f011 011f 	ands.w	r1, r1, #31
 80054bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80054c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80054c4:	d10c      	bne.n	80054e0 <rshift+0x3c>
 80054c6:	f100 0710 	add.w	r7, r0, #16
 80054ca:	4629      	mov	r1, r5
 80054cc:	42b1      	cmp	r1, r6
 80054ce:	d334      	bcc.n	800553a <rshift+0x96>
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	1eea      	subs	r2, r5, #3
 80054d6:	4296      	cmp	r6, r2
 80054d8:	bf38      	it	cc
 80054da:	2300      	movcc	r3, #0
 80054dc:	4423      	add	r3, r4
 80054de:	e015      	b.n	800550c <rshift+0x68>
 80054e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80054e4:	f1c1 0820 	rsb	r8, r1, #32
 80054e8:	40cf      	lsrs	r7, r1
 80054ea:	f105 0e04 	add.w	lr, r5, #4
 80054ee:	46a1      	mov	r9, r4
 80054f0:	4576      	cmp	r6, lr
 80054f2:	46f4      	mov	ip, lr
 80054f4:	d815      	bhi.n	8005522 <rshift+0x7e>
 80054f6:	1a9a      	subs	r2, r3, r2
 80054f8:	0092      	lsls	r2, r2, #2
 80054fa:	3a04      	subs	r2, #4
 80054fc:	3501      	adds	r5, #1
 80054fe:	42ae      	cmp	r6, r5
 8005500:	bf38      	it	cc
 8005502:	2200      	movcc	r2, #0
 8005504:	18a3      	adds	r3, r4, r2
 8005506:	50a7      	str	r7, [r4, r2]
 8005508:	b107      	cbz	r7, 800550c <rshift+0x68>
 800550a:	3304      	adds	r3, #4
 800550c:	1b1a      	subs	r2, r3, r4
 800550e:	42a3      	cmp	r3, r4
 8005510:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005514:	bf08      	it	eq
 8005516:	2300      	moveq	r3, #0
 8005518:	6102      	str	r2, [r0, #16]
 800551a:	bf08      	it	eq
 800551c:	6143      	streq	r3, [r0, #20]
 800551e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005522:	f8dc c000 	ldr.w	ip, [ip]
 8005526:	fa0c fc08 	lsl.w	ip, ip, r8
 800552a:	ea4c 0707 	orr.w	r7, ip, r7
 800552e:	f849 7b04 	str.w	r7, [r9], #4
 8005532:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005536:	40cf      	lsrs	r7, r1
 8005538:	e7da      	b.n	80054f0 <rshift+0x4c>
 800553a:	f851 cb04 	ldr.w	ip, [r1], #4
 800553e:	f847 cf04 	str.w	ip, [r7, #4]!
 8005542:	e7c3      	b.n	80054cc <rshift+0x28>
 8005544:	4623      	mov	r3, r4
 8005546:	e7e1      	b.n	800550c <rshift+0x68>

08005548 <__hexdig_fun>:
 8005548:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800554c:	2b09      	cmp	r3, #9
 800554e:	d802      	bhi.n	8005556 <__hexdig_fun+0xe>
 8005550:	3820      	subs	r0, #32
 8005552:	b2c0      	uxtb	r0, r0
 8005554:	4770      	bx	lr
 8005556:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800555a:	2b05      	cmp	r3, #5
 800555c:	d801      	bhi.n	8005562 <__hexdig_fun+0x1a>
 800555e:	3847      	subs	r0, #71	@ 0x47
 8005560:	e7f7      	b.n	8005552 <__hexdig_fun+0xa>
 8005562:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8005566:	2b05      	cmp	r3, #5
 8005568:	d801      	bhi.n	800556e <__hexdig_fun+0x26>
 800556a:	3827      	subs	r0, #39	@ 0x27
 800556c:	e7f1      	b.n	8005552 <__hexdig_fun+0xa>
 800556e:	2000      	movs	r0, #0
 8005570:	4770      	bx	lr
	...

08005574 <__gethex>:
 8005574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005578:	b085      	sub	sp, #20
 800557a:	468a      	mov	sl, r1
 800557c:	9302      	str	r3, [sp, #8]
 800557e:	680b      	ldr	r3, [r1, #0]
 8005580:	9001      	str	r0, [sp, #4]
 8005582:	4690      	mov	r8, r2
 8005584:	1c9c      	adds	r4, r3, #2
 8005586:	46a1      	mov	r9, r4
 8005588:	f814 0b01 	ldrb.w	r0, [r4], #1
 800558c:	2830      	cmp	r0, #48	@ 0x30
 800558e:	d0fa      	beq.n	8005586 <__gethex+0x12>
 8005590:	eba9 0303 	sub.w	r3, r9, r3
 8005594:	f1a3 0b02 	sub.w	fp, r3, #2
 8005598:	f7ff ffd6 	bl	8005548 <__hexdig_fun>
 800559c:	4605      	mov	r5, r0
 800559e:	2800      	cmp	r0, #0
 80055a0:	d168      	bne.n	8005674 <__gethex+0x100>
 80055a2:	49a0      	ldr	r1, [pc, #640]	@ (8005824 <__gethex+0x2b0>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	4648      	mov	r0, r9
 80055a8:	f7ff fe83 	bl	80052b2 <strncmp>
 80055ac:	4607      	mov	r7, r0
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d167      	bne.n	8005682 <__gethex+0x10e>
 80055b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80055b6:	4626      	mov	r6, r4
 80055b8:	f7ff ffc6 	bl	8005548 <__hexdig_fun>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d062      	beq.n	8005686 <__gethex+0x112>
 80055c0:	4623      	mov	r3, r4
 80055c2:	7818      	ldrb	r0, [r3, #0]
 80055c4:	2830      	cmp	r0, #48	@ 0x30
 80055c6:	4699      	mov	r9, r3
 80055c8:	f103 0301 	add.w	r3, r3, #1
 80055cc:	d0f9      	beq.n	80055c2 <__gethex+0x4e>
 80055ce:	f7ff ffbb 	bl	8005548 <__hexdig_fun>
 80055d2:	fab0 f580 	clz	r5, r0
 80055d6:	096d      	lsrs	r5, r5, #5
 80055d8:	f04f 0b01 	mov.w	fp, #1
 80055dc:	464a      	mov	r2, r9
 80055de:	4616      	mov	r6, r2
 80055e0:	3201      	adds	r2, #1
 80055e2:	7830      	ldrb	r0, [r6, #0]
 80055e4:	f7ff ffb0 	bl	8005548 <__hexdig_fun>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d1f8      	bne.n	80055de <__gethex+0x6a>
 80055ec:	498d      	ldr	r1, [pc, #564]	@ (8005824 <__gethex+0x2b0>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	4630      	mov	r0, r6
 80055f2:	f7ff fe5e 	bl	80052b2 <strncmp>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d13f      	bne.n	800567a <__gethex+0x106>
 80055fa:	b944      	cbnz	r4, 800560e <__gethex+0x9a>
 80055fc:	1c74      	adds	r4, r6, #1
 80055fe:	4622      	mov	r2, r4
 8005600:	4616      	mov	r6, r2
 8005602:	3201      	adds	r2, #1
 8005604:	7830      	ldrb	r0, [r6, #0]
 8005606:	f7ff ff9f 	bl	8005548 <__hexdig_fun>
 800560a:	2800      	cmp	r0, #0
 800560c:	d1f8      	bne.n	8005600 <__gethex+0x8c>
 800560e:	1ba4      	subs	r4, r4, r6
 8005610:	00a7      	lsls	r7, r4, #2
 8005612:	7833      	ldrb	r3, [r6, #0]
 8005614:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005618:	2b50      	cmp	r3, #80	@ 0x50
 800561a:	d13e      	bne.n	800569a <__gethex+0x126>
 800561c:	7873      	ldrb	r3, [r6, #1]
 800561e:	2b2b      	cmp	r3, #43	@ 0x2b
 8005620:	d033      	beq.n	800568a <__gethex+0x116>
 8005622:	2b2d      	cmp	r3, #45	@ 0x2d
 8005624:	d034      	beq.n	8005690 <__gethex+0x11c>
 8005626:	1c71      	adds	r1, r6, #1
 8005628:	2400      	movs	r4, #0
 800562a:	7808      	ldrb	r0, [r1, #0]
 800562c:	f7ff ff8c 	bl	8005548 <__hexdig_fun>
 8005630:	1e43      	subs	r3, r0, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b18      	cmp	r3, #24
 8005636:	d830      	bhi.n	800569a <__gethex+0x126>
 8005638:	f1a0 0210 	sub.w	r2, r0, #16
 800563c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005640:	f7ff ff82 	bl	8005548 <__hexdig_fun>
 8005644:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8005648:	fa5f fc8c 	uxtb.w	ip, ip
 800564c:	f1bc 0f18 	cmp.w	ip, #24
 8005650:	f04f 030a 	mov.w	r3, #10
 8005654:	d91e      	bls.n	8005694 <__gethex+0x120>
 8005656:	b104      	cbz	r4, 800565a <__gethex+0xe6>
 8005658:	4252      	negs	r2, r2
 800565a:	4417      	add	r7, r2
 800565c:	f8ca 1000 	str.w	r1, [sl]
 8005660:	b1ed      	cbz	r5, 800569e <__gethex+0x12a>
 8005662:	f1bb 0f00 	cmp.w	fp, #0
 8005666:	bf0c      	ite	eq
 8005668:	2506      	moveq	r5, #6
 800566a:	2500      	movne	r5, #0
 800566c:	4628      	mov	r0, r5
 800566e:	b005      	add	sp, #20
 8005670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005674:	2500      	movs	r5, #0
 8005676:	462c      	mov	r4, r5
 8005678:	e7b0      	b.n	80055dc <__gethex+0x68>
 800567a:	2c00      	cmp	r4, #0
 800567c:	d1c7      	bne.n	800560e <__gethex+0x9a>
 800567e:	4627      	mov	r7, r4
 8005680:	e7c7      	b.n	8005612 <__gethex+0x9e>
 8005682:	464e      	mov	r6, r9
 8005684:	462f      	mov	r7, r5
 8005686:	2501      	movs	r5, #1
 8005688:	e7c3      	b.n	8005612 <__gethex+0x9e>
 800568a:	2400      	movs	r4, #0
 800568c:	1cb1      	adds	r1, r6, #2
 800568e:	e7cc      	b.n	800562a <__gethex+0xb6>
 8005690:	2401      	movs	r4, #1
 8005692:	e7fb      	b.n	800568c <__gethex+0x118>
 8005694:	fb03 0002 	mla	r0, r3, r2, r0
 8005698:	e7ce      	b.n	8005638 <__gethex+0xc4>
 800569a:	4631      	mov	r1, r6
 800569c:	e7de      	b.n	800565c <__gethex+0xe8>
 800569e:	eba6 0309 	sub.w	r3, r6, r9
 80056a2:	3b01      	subs	r3, #1
 80056a4:	4629      	mov	r1, r5
 80056a6:	2b07      	cmp	r3, #7
 80056a8:	dc0a      	bgt.n	80056c0 <__gethex+0x14c>
 80056aa:	9801      	ldr	r0, [sp, #4]
 80056ac:	f000 faf4 	bl	8005c98 <_Balloc>
 80056b0:	4604      	mov	r4, r0
 80056b2:	b940      	cbnz	r0, 80056c6 <__gethex+0x152>
 80056b4:	4b5c      	ldr	r3, [pc, #368]	@ (8005828 <__gethex+0x2b4>)
 80056b6:	4602      	mov	r2, r0
 80056b8:	21e4      	movs	r1, #228	@ 0xe4
 80056ba:	485c      	ldr	r0, [pc, #368]	@ (800582c <__gethex+0x2b8>)
 80056bc:	f001 fb66 	bl	8006d8c <__assert_func>
 80056c0:	3101      	adds	r1, #1
 80056c2:	105b      	asrs	r3, r3, #1
 80056c4:	e7ef      	b.n	80056a6 <__gethex+0x132>
 80056c6:	f100 0a14 	add.w	sl, r0, #20
 80056ca:	2300      	movs	r3, #0
 80056cc:	4655      	mov	r5, sl
 80056ce:	469b      	mov	fp, r3
 80056d0:	45b1      	cmp	r9, r6
 80056d2:	d337      	bcc.n	8005744 <__gethex+0x1d0>
 80056d4:	f845 bb04 	str.w	fp, [r5], #4
 80056d8:	eba5 050a 	sub.w	r5, r5, sl
 80056dc:	10ad      	asrs	r5, r5, #2
 80056de:	6125      	str	r5, [r4, #16]
 80056e0:	4658      	mov	r0, fp
 80056e2:	f000 fbcb 	bl	8005e7c <__hi0bits>
 80056e6:	016d      	lsls	r5, r5, #5
 80056e8:	f8d8 6000 	ldr.w	r6, [r8]
 80056ec:	1a2d      	subs	r5, r5, r0
 80056ee:	42b5      	cmp	r5, r6
 80056f0:	dd54      	ble.n	800579c <__gethex+0x228>
 80056f2:	1bad      	subs	r5, r5, r6
 80056f4:	4629      	mov	r1, r5
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 ff5f 	bl	80065ba <__any_on>
 80056fc:	4681      	mov	r9, r0
 80056fe:	b178      	cbz	r0, 8005720 <__gethex+0x1ac>
 8005700:	1e6b      	subs	r3, r5, #1
 8005702:	1159      	asrs	r1, r3, #5
 8005704:	f003 021f 	and.w	r2, r3, #31
 8005708:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800570c:	f04f 0901 	mov.w	r9, #1
 8005710:	fa09 f202 	lsl.w	r2, r9, r2
 8005714:	420a      	tst	r2, r1
 8005716:	d003      	beq.n	8005720 <__gethex+0x1ac>
 8005718:	454b      	cmp	r3, r9
 800571a:	dc36      	bgt.n	800578a <__gethex+0x216>
 800571c:	f04f 0902 	mov.w	r9, #2
 8005720:	4629      	mov	r1, r5
 8005722:	4620      	mov	r0, r4
 8005724:	f7ff febe 	bl	80054a4 <rshift>
 8005728:	442f      	add	r7, r5
 800572a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800572e:	42bb      	cmp	r3, r7
 8005730:	da42      	bge.n	80057b8 <__gethex+0x244>
 8005732:	9801      	ldr	r0, [sp, #4]
 8005734:	4621      	mov	r1, r4
 8005736:	f000 faef 	bl	8005d18 <_Bfree>
 800573a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800573c:	2300      	movs	r3, #0
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	25a3      	movs	r5, #163	@ 0xa3
 8005742:	e793      	b.n	800566c <__gethex+0xf8>
 8005744:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005748:	2a2e      	cmp	r2, #46	@ 0x2e
 800574a:	d012      	beq.n	8005772 <__gethex+0x1fe>
 800574c:	2b20      	cmp	r3, #32
 800574e:	d104      	bne.n	800575a <__gethex+0x1e6>
 8005750:	f845 bb04 	str.w	fp, [r5], #4
 8005754:	f04f 0b00 	mov.w	fp, #0
 8005758:	465b      	mov	r3, fp
 800575a:	7830      	ldrb	r0, [r6, #0]
 800575c:	9303      	str	r3, [sp, #12]
 800575e:	f7ff fef3 	bl	8005548 <__hexdig_fun>
 8005762:	9b03      	ldr	r3, [sp, #12]
 8005764:	f000 000f 	and.w	r0, r0, #15
 8005768:	4098      	lsls	r0, r3
 800576a:	ea4b 0b00 	orr.w	fp, fp, r0
 800576e:	3304      	adds	r3, #4
 8005770:	e7ae      	b.n	80056d0 <__gethex+0x15c>
 8005772:	45b1      	cmp	r9, r6
 8005774:	d8ea      	bhi.n	800574c <__gethex+0x1d8>
 8005776:	492b      	ldr	r1, [pc, #172]	@ (8005824 <__gethex+0x2b0>)
 8005778:	9303      	str	r3, [sp, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	4630      	mov	r0, r6
 800577e:	f7ff fd98 	bl	80052b2 <strncmp>
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	2800      	cmp	r0, #0
 8005786:	d1e1      	bne.n	800574c <__gethex+0x1d8>
 8005788:	e7a2      	b.n	80056d0 <__gethex+0x15c>
 800578a:	1ea9      	subs	r1, r5, #2
 800578c:	4620      	mov	r0, r4
 800578e:	f000 ff14 	bl	80065ba <__any_on>
 8005792:	2800      	cmp	r0, #0
 8005794:	d0c2      	beq.n	800571c <__gethex+0x1a8>
 8005796:	f04f 0903 	mov.w	r9, #3
 800579a:	e7c1      	b.n	8005720 <__gethex+0x1ac>
 800579c:	da09      	bge.n	80057b2 <__gethex+0x23e>
 800579e:	1b75      	subs	r5, r6, r5
 80057a0:	4621      	mov	r1, r4
 80057a2:	9801      	ldr	r0, [sp, #4]
 80057a4:	462a      	mov	r2, r5
 80057a6:	f000 fccf 	bl	8006148 <__lshift>
 80057aa:	1b7f      	subs	r7, r7, r5
 80057ac:	4604      	mov	r4, r0
 80057ae:	f100 0a14 	add.w	sl, r0, #20
 80057b2:	f04f 0900 	mov.w	r9, #0
 80057b6:	e7b8      	b.n	800572a <__gethex+0x1b6>
 80057b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80057bc:	42bd      	cmp	r5, r7
 80057be:	dd6f      	ble.n	80058a0 <__gethex+0x32c>
 80057c0:	1bed      	subs	r5, r5, r7
 80057c2:	42ae      	cmp	r6, r5
 80057c4:	dc34      	bgt.n	8005830 <__gethex+0x2bc>
 80057c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d022      	beq.n	8005814 <__gethex+0x2a0>
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d024      	beq.n	800581c <__gethex+0x2a8>
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d115      	bne.n	8005802 <__gethex+0x28e>
 80057d6:	42ae      	cmp	r6, r5
 80057d8:	d113      	bne.n	8005802 <__gethex+0x28e>
 80057da:	2e01      	cmp	r6, #1
 80057dc:	d10b      	bne.n	80057f6 <__gethex+0x282>
 80057de:	9a02      	ldr	r2, [sp, #8]
 80057e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	2301      	movs	r3, #1
 80057e8:	6123      	str	r3, [r4, #16]
 80057ea:	f8ca 3000 	str.w	r3, [sl]
 80057ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057f0:	2562      	movs	r5, #98	@ 0x62
 80057f2:	601c      	str	r4, [r3, #0]
 80057f4:	e73a      	b.n	800566c <__gethex+0xf8>
 80057f6:	1e71      	subs	r1, r6, #1
 80057f8:	4620      	mov	r0, r4
 80057fa:	f000 fede 	bl	80065ba <__any_on>
 80057fe:	2800      	cmp	r0, #0
 8005800:	d1ed      	bne.n	80057de <__gethex+0x26a>
 8005802:	9801      	ldr	r0, [sp, #4]
 8005804:	4621      	mov	r1, r4
 8005806:	f000 fa87 	bl	8005d18 <_Bfree>
 800580a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800580c:	2300      	movs	r3, #0
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	2550      	movs	r5, #80	@ 0x50
 8005812:	e72b      	b.n	800566c <__gethex+0xf8>
 8005814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f3      	bne.n	8005802 <__gethex+0x28e>
 800581a:	e7e0      	b.n	80057de <__gethex+0x26a>
 800581c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1dd      	bne.n	80057de <__gethex+0x26a>
 8005822:	e7ee      	b.n	8005802 <__gethex+0x28e>
 8005824:	080074c4 	.word	0x080074c4
 8005828:	08007631 	.word	0x08007631
 800582c:	08007642 	.word	0x08007642
 8005830:	1e6f      	subs	r7, r5, #1
 8005832:	f1b9 0f00 	cmp.w	r9, #0
 8005836:	d130      	bne.n	800589a <__gethex+0x326>
 8005838:	b127      	cbz	r7, 8005844 <__gethex+0x2d0>
 800583a:	4639      	mov	r1, r7
 800583c:	4620      	mov	r0, r4
 800583e:	f000 febc 	bl	80065ba <__any_on>
 8005842:	4681      	mov	r9, r0
 8005844:	117a      	asrs	r2, r7, #5
 8005846:	2301      	movs	r3, #1
 8005848:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800584c:	f007 071f 	and.w	r7, r7, #31
 8005850:	40bb      	lsls	r3, r7
 8005852:	4213      	tst	r3, r2
 8005854:	4629      	mov	r1, r5
 8005856:	4620      	mov	r0, r4
 8005858:	bf18      	it	ne
 800585a:	f049 0902 	orrne.w	r9, r9, #2
 800585e:	f7ff fe21 	bl	80054a4 <rshift>
 8005862:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8005866:	1b76      	subs	r6, r6, r5
 8005868:	2502      	movs	r5, #2
 800586a:	f1b9 0f00 	cmp.w	r9, #0
 800586e:	d047      	beq.n	8005900 <__gethex+0x38c>
 8005870:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d015      	beq.n	80058a4 <__gethex+0x330>
 8005878:	2b03      	cmp	r3, #3
 800587a:	d017      	beq.n	80058ac <__gethex+0x338>
 800587c:	2b01      	cmp	r3, #1
 800587e:	d109      	bne.n	8005894 <__gethex+0x320>
 8005880:	f019 0f02 	tst.w	r9, #2
 8005884:	d006      	beq.n	8005894 <__gethex+0x320>
 8005886:	f8da 3000 	ldr.w	r3, [sl]
 800588a:	ea49 0903 	orr.w	r9, r9, r3
 800588e:	f019 0f01 	tst.w	r9, #1
 8005892:	d10e      	bne.n	80058b2 <__gethex+0x33e>
 8005894:	f045 0510 	orr.w	r5, r5, #16
 8005898:	e032      	b.n	8005900 <__gethex+0x38c>
 800589a:	f04f 0901 	mov.w	r9, #1
 800589e:	e7d1      	b.n	8005844 <__gethex+0x2d0>
 80058a0:	2501      	movs	r5, #1
 80058a2:	e7e2      	b.n	800586a <__gethex+0x2f6>
 80058a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058a6:	f1c3 0301 	rsb	r3, r3, #1
 80058aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <__gethex+0x320>
 80058b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80058b6:	f104 0314 	add.w	r3, r4, #20
 80058ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80058be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80058c2:	f04f 0c00 	mov.w	ip, #0
 80058c6:	4618      	mov	r0, r3
 80058c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80058cc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80058d0:	d01b      	beq.n	800590a <__gethex+0x396>
 80058d2:	3201      	adds	r2, #1
 80058d4:	6002      	str	r2, [r0, #0]
 80058d6:	2d02      	cmp	r5, #2
 80058d8:	f104 0314 	add.w	r3, r4, #20
 80058dc:	d13c      	bne.n	8005958 <__gethex+0x3e4>
 80058de:	f8d8 2000 	ldr.w	r2, [r8]
 80058e2:	3a01      	subs	r2, #1
 80058e4:	42b2      	cmp	r2, r6
 80058e6:	d109      	bne.n	80058fc <__gethex+0x388>
 80058e8:	1171      	asrs	r1, r6, #5
 80058ea:	2201      	movs	r2, #1
 80058ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058f0:	f006 061f 	and.w	r6, r6, #31
 80058f4:	fa02 f606 	lsl.w	r6, r2, r6
 80058f8:	421e      	tst	r6, r3
 80058fa:	d13a      	bne.n	8005972 <__gethex+0x3fe>
 80058fc:	f045 0520 	orr.w	r5, r5, #32
 8005900:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005902:	601c      	str	r4, [r3, #0]
 8005904:	9b02      	ldr	r3, [sp, #8]
 8005906:	601f      	str	r7, [r3, #0]
 8005908:	e6b0      	b.n	800566c <__gethex+0xf8>
 800590a:	4299      	cmp	r1, r3
 800590c:	f843 cc04 	str.w	ip, [r3, #-4]
 8005910:	d8d9      	bhi.n	80058c6 <__gethex+0x352>
 8005912:	68a3      	ldr	r3, [r4, #8]
 8005914:	459b      	cmp	fp, r3
 8005916:	db17      	blt.n	8005948 <__gethex+0x3d4>
 8005918:	6861      	ldr	r1, [r4, #4]
 800591a:	9801      	ldr	r0, [sp, #4]
 800591c:	3101      	adds	r1, #1
 800591e:	f000 f9bb 	bl	8005c98 <_Balloc>
 8005922:	4681      	mov	r9, r0
 8005924:	b918      	cbnz	r0, 800592e <__gethex+0x3ba>
 8005926:	4b1a      	ldr	r3, [pc, #104]	@ (8005990 <__gethex+0x41c>)
 8005928:	4602      	mov	r2, r0
 800592a:	2184      	movs	r1, #132	@ 0x84
 800592c:	e6c5      	b.n	80056ba <__gethex+0x146>
 800592e:	6922      	ldr	r2, [r4, #16]
 8005930:	3202      	adds	r2, #2
 8005932:	f104 010c 	add.w	r1, r4, #12
 8005936:	0092      	lsls	r2, r2, #2
 8005938:	300c      	adds	r0, #12
 800593a:	f7ff fd52 	bl	80053e2 <memcpy>
 800593e:	4621      	mov	r1, r4
 8005940:	9801      	ldr	r0, [sp, #4]
 8005942:	f000 f9e9 	bl	8005d18 <_Bfree>
 8005946:	464c      	mov	r4, r9
 8005948:	6923      	ldr	r3, [r4, #16]
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005950:	6122      	str	r2, [r4, #16]
 8005952:	2201      	movs	r2, #1
 8005954:	615a      	str	r2, [r3, #20]
 8005956:	e7be      	b.n	80058d6 <__gethex+0x362>
 8005958:	6922      	ldr	r2, [r4, #16]
 800595a:	455a      	cmp	r2, fp
 800595c:	dd0b      	ble.n	8005976 <__gethex+0x402>
 800595e:	2101      	movs	r1, #1
 8005960:	4620      	mov	r0, r4
 8005962:	f7ff fd9f 	bl	80054a4 <rshift>
 8005966:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800596a:	3701      	adds	r7, #1
 800596c:	42bb      	cmp	r3, r7
 800596e:	f6ff aee0 	blt.w	8005732 <__gethex+0x1be>
 8005972:	2501      	movs	r5, #1
 8005974:	e7c2      	b.n	80058fc <__gethex+0x388>
 8005976:	f016 061f 	ands.w	r6, r6, #31
 800597a:	d0fa      	beq.n	8005972 <__gethex+0x3fe>
 800597c:	4453      	add	r3, sl
 800597e:	f1c6 0620 	rsb	r6, r6, #32
 8005982:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005986:	f000 fa79 	bl	8005e7c <__hi0bits>
 800598a:	42b0      	cmp	r0, r6
 800598c:	dbe7      	blt.n	800595e <__gethex+0x3ea>
 800598e:	e7f0      	b.n	8005972 <__gethex+0x3fe>
 8005990:	08007631 	.word	0x08007631

08005994 <L_shift>:
 8005994:	f1c2 0208 	rsb	r2, r2, #8
 8005998:	0092      	lsls	r2, r2, #2
 800599a:	b570      	push	{r4, r5, r6, lr}
 800599c:	f1c2 0620 	rsb	r6, r2, #32
 80059a0:	6843      	ldr	r3, [r0, #4]
 80059a2:	6804      	ldr	r4, [r0, #0]
 80059a4:	fa03 f506 	lsl.w	r5, r3, r6
 80059a8:	432c      	orrs	r4, r5
 80059aa:	40d3      	lsrs	r3, r2
 80059ac:	6004      	str	r4, [r0, #0]
 80059ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80059b2:	4288      	cmp	r0, r1
 80059b4:	d3f4      	bcc.n	80059a0 <L_shift+0xc>
 80059b6:	bd70      	pop	{r4, r5, r6, pc}

080059b8 <__match>:
 80059b8:	b530      	push	{r4, r5, lr}
 80059ba:	6803      	ldr	r3, [r0, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059c2:	b914      	cbnz	r4, 80059ca <__match+0x12>
 80059c4:	6003      	str	r3, [r0, #0]
 80059c6:	2001      	movs	r0, #1
 80059c8:	bd30      	pop	{r4, r5, pc}
 80059ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80059d2:	2d19      	cmp	r5, #25
 80059d4:	bf98      	it	ls
 80059d6:	3220      	addls	r2, #32
 80059d8:	42a2      	cmp	r2, r4
 80059da:	d0f0      	beq.n	80059be <__match+0x6>
 80059dc:	2000      	movs	r0, #0
 80059de:	e7f3      	b.n	80059c8 <__match+0x10>

080059e0 <__hexnan>:
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	680b      	ldr	r3, [r1, #0]
 80059e6:	6801      	ldr	r1, [r0, #0]
 80059e8:	115e      	asrs	r6, r3, #5
 80059ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80059ee:	f013 031f 	ands.w	r3, r3, #31
 80059f2:	b087      	sub	sp, #28
 80059f4:	bf18      	it	ne
 80059f6:	3604      	addne	r6, #4
 80059f8:	2500      	movs	r5, #0
 80059fa:	1f37      	subs	r7, r6, #4
 80059fc:	4682      	mov	sl, r0
 80059fe:	4690      	mov	r8, r2
 8005a00:	9301      	str	r3, [sp, #4]
 8005a02:	f846 5c04 	str.w	r5, [r6, #-4]
 8005a06:	46b9      	mov	r9, r7
 8005a08:	463c      	mov	r4, r7
 8005a0a:	9502      	str	r5, [sp, #8]
 8005a0c:	46ab      	mov	fp, r5
 8005a0e:	784a      	ldrb	r2, [r1, #1]
 8005a10:	1c4b      	adds	r3, r1, #1
 8005a12:	9303      	str	r3, [sp, #12]
 8005a14:	b342      	cbz	r2, 8005a68 <__hexnan+0x88>
 8005a16:	4610      	mov	r0, r2
 8005a18:	9105      	str	r1, [sp, #20]
 8005a1a:	9204      	str	r2, [sp, #16]
 8005a1c:	f7ff fd94 	bl	8005548 <__hexdig_fun>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d151      	bne.n	8005ac8 <__hexnan+0xe8>
 8005a24:	9a04      	ldr	r2, [sp, #16]
 8005a26:	9905      	ldr	r1, [sp, #20]
 8005a28:	2a20      	cmp	r2, #32
 8005a2a:	d818      	bhi.n	8005a5e <__hexnan+0x7e>
 8005a2c:	9b02      	ldr	r3, [sp, #8]
 8005a2e:	459b      	cmp	fp, r3
 8005a30:	dd13      	ble.n	8005a5a <__hexnan+0x7a>
 8005a32:	454c      	cmp	r4, r9
 8005a34:	d206      	bcs.n	8005a44 <__hexnan+0x64>
 8005a36:	2d07      	cmp	r5, #7
 8005a38:	dc04      	bgt.n	8005a44 <__hexnan+0x64>
 8005a3a:	462a      	mov	r2, r5
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f7ff ffa8 	bl	8005994 <L_shift>
 8005a44:	4544      	cmp	r4, r8
 8005a46:	d952      	bls.n	8005aee <__hexnan+0x10e>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f1a4 0904 	sub.w	r9, r4, #4
 8005a4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005a52:	f8cd b008 	str.w	fp, [sp, #8]
 8005a56:	464c      	mov	r4, r9
 8005a58:	461d      	mov	r5, r3
 8005a5a:	9903      	ldr	r1, [sp, #12]
 8005a5c:	e7d7      	b.n	8005a0e <__hexnan+0x2e>
 8005a5e:	2a29      	cmp	r2, #41	@ 0x29
 8005a60:	d157      	bne.n	8005b12 <__hexnan+0x132>
 8005a62:	3102      	adds	r1, #2
 8005a64:	f8ca 1000 	str.w	r1, [sl]
 8005a68:	f1bb 0f00 	cmp.w	fp, #0
 8005a6c:	d051      	beq.n	8005b12 <__hexnan+0x132>
 8005a6e:	454c      	cmp	r4, r9
 8005a70:	d206      	bcs.n	8005a80 <__hexnan+0xa0>
 8005a72:	2d07      	cmp	r5, #7
 8005a74:	dc04      	bgt.n	8005a80 <__hexnan+0xa0>
 8005a76:	462a      	mov	r2, r5
 8005a78:	4649      	mov	r1, r9
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f7ff ff8a 	bl	8005994 <L_shift>
 8005a80:	4544      	cmp	r4, r8
 8005a82:	d936      	bls.n	8005af2 <__hexnan+0x112>
 8005a84:	f1a8 0204 	sub.w	r2, r8, #4
 8005a88:	4623      	mov	r3, r4
 8005a8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8005a8e:	f842 1f04 	str.w	r1, [r2, #4]!
 8005a92:	429f      	cmp	r7, r3
 8005a94:	d2f9      	bcs.n	8005a8a <__hexnan+0xaa>
 8005a96:	1b3b      	subs	r3, r7, r4
 8005a98:	f023 0303 	bic.w	r3, r3, #3
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	3401      	adds	r4, #1
 8005aa0:	3e03      	subs	r6, #3
 8005aa2:	42b4      	cmp	r4, r6
 8005aa4:	bf88      	it	hi
 8005aa6:	2304      	movhi	r3, #4
 8005aa8:	4443      	add	r3, r8
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f843 2b04 	str.w	r2, [r3], #4
 8005ab0:	429f      	cmp	r7, r3
 8005ab2:	d2fb      	bcs.n	8005aac <__hexnan+0xcc>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	b91b      	cbnz	r3, 8005ac0 <__hexnan+0xe0>
 8005ab8:	4547      	cmp	r7, r8
 8005aba:	d128      	bne.n	8005b0e <__hexnan+0x12e>
 8005abc:	2301      	movs	r3, #1
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	2005      	movs	r0, #5
 8005ac2:	b007      	add	sp, #28
 8005ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac8:	3501      	adds	r5, #1
 8005aca:	2d08      	cmp	r5, #8
 8005acc:	f10b 0b01 	add.w	fp, fp, #1
 8005ad0:	dd06      	ble.n	8005ae0 <__hexnan+0x100>
 8005ad2:	4544      	cmp	r4, r8
 8005ad4:	d9c1      	bls.n	8005a5a <__hexnan+0x7a>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f844 3c04 	str.w	r3, [r4, #-4]
 8005adc:	2501      	movs	r5, #1
 8005ade:	3c04      	subs	r4, #4
 8005ae0:	6822      	ldr	r2, [r4, #0]
 8005ae2:	f000 000f 	and.w	r0, r0, #15
 8005ae6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005aea:	6020      	str	r0, [r4, #0]
 8005aec:	e7b5      	b.n	8005a5a <__hexnan+0x7a>
 8005aee:	2508      	movs	r5, #8
 8005af0:	e7b3      	b.n	8005a5a <__hexnan+0x7a>
 8005af2:	9b01      	ldr	r3, [sp, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0dd      	beq.n	8005ab4 <__hexnan+0xd4>
 8005af8:	f1c3 0320 	rsb	r3, r3, #32
 8005afc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b00:	40da      	lsrs	r2, r3
 8005b02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005b06:	4013      	ands	r3, r2
 8005b08:	f846 3c04 	str.w	r3, [r6, #-4]
 8005b0c:	e7d2      	b.n	8005ab4 <__hexnan+0xd4>
 8005b0e:	3f04      	subs	r7, #4
 8005b10:	e7d0      	b.n	8005ab4 <__hexnan+0xd4>
 8005b12:	2004      	movs	r0, #4
 8005b14:	e7d5      	b.n	8005ac2 <__hexnan+0xe2>
	...

08005b18 <sbrk_aligned>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8005b58 <sbrk_aligned+0x40>)
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	6831      	ldr	r1, [r6, #0]
 8005b20:	4605      	mov	r5, r0
 8005b22:	b911      	cbnz	r1, 8005b2a <sbrk_aligned+0x12>
 8005b24:	f001 f922 	bl	8006d6c <_sbrk_r>
 8005b28:	6030      	str	r0, [r6, #0]
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f001 f91d 	bl	8006d6c <_sbrk_r>
 8005b32:	1c43      	adds	r3, r0, #1
 8005b34:	d103      	bne.n	8005b3e <sbrk_aligned+0x26>
 8005b36:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
 8005b3e:	1cc4      	adds	r4, r0, #3
 8005b40:	f024 0403 	bic.w	r4, r4, #3
 8005b44:	42a0      	cmp	r0, r4
 8005b46:	d0f8      	beq.n	8005b3a <sbrk_aligned+0x22>
 8005b48:	1a21      	subs	r1, r4, r0
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f001 f90e 	bl	8006d6c <_sbrk_r>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d1f2      	bne.n	8005b3a <sbrk_aligned+0x22>
 8005b54:	e7ef      	b.n	8005b36 <sbrk_aligned+0x1e>
 8005b56:	bf00      	nop
 8005b58:	200005b8 	.word	0x200005b8

08005b5c <_malloc_r>:
 8005b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b60:	1ccd      	adds	r5, r1, #3
 8005b62:	f025 0503 	bic.w	r5, r5, #3
 8005b66:	3508      	adds	r5, #8
 8005b68:	2d0c      	cmp	r5, #12
 8005b6a:	bf38      	it	cc
 8005b6c:	250c      	movcc	r5, #12
 8005b6e:	2d00      	cmp	r5, #0
 8005b70:	4606      	mov	r6, r0
 8005b72:	db01      	blt.n	8005b78 <_malloc_r+0x1c>
 8005b74:	42a9      	cmp	r1, r5
 8005b76:	d904      	bls.n	8005b82 <_malloc_r+0x26>
 8005b78:	230c      	movs	r3, #12
 8005b7a:	6033      	str	r3, [r6, #0]
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c58 <_malloc_r+0xfc>
 8005b86:	f000 f87b 	bl	8005c80 <__malloc_lock>
 8005b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8e:	461c      	mov	r4, r3
 8005b90:	bb44      	cbnz	r4, 8005be4 <_malloc_r+0x88>
 8005b92:	4629      	mov	r1, r5
 8005b94:	4630      	mov	r0, r6
 8005b96:	f7ff ffbf 	bl	8005b18 <sbrk_aligned>
 8005b9a:	1c43      	adds	r3, r0, #1
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	d158      	bne.n	8005c52 <_malloc_r+0xf6>
 8005ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8005ba4:	4627      	mov	r7, r4
 8005ba6:	2f00      	cmp	r7, #0
 8005ba8:	d143      	bne.n	8005c32 <_malloc_r+0xd6>
 8005baa:	2c00      	cmp	r4, #0
 8005bac:	d04b      	beq.n	8005c46 <_malloc_r+0xea>
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	eb04 0903 	add.w	r9, r4, r3
 8005bb8:	f001 f8d8 	bl	8006d6c <_sbrk_r>
 8005bbc:	4581      	cmp	r9, r0
 8005bbe:	d142      	bne.n	8005c46 <_malloc_r+0xea>
 8005bc0:	6821      	ldr	r1, [r4, #0]
 8005bc2:	1a6d      	subs	r5, r5, r1
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f7ff ffa6 	bl	8005b18 <sbrk_aligned>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d03a      	beq.n	8005c46 <_malloc_r+0xea>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	442b      	add	r3, r5
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	bb62      	cbnz	r2, 8005c38 <_malloc_r+0xdc>
 8005bde:	f8c8 7000 	str.w	r7, [r8]
 8005be2:	e00f      	b.n	8005c04 <_malloc_r+0xa8>
 8005be4:	6822      	ldr	r2, [r4, #0]
 8005be6:	1b52      	subs	r2, r2, r5
 8005be8:	d420      	bmi.n	8005c2c <_malloc_r+0xd0>
 8005bea:	2a0b      	cmp	r2, #11
 8005bec:	d917      	bls.n	8005c1e <_malloc_r+0xc2>
 8005bee:	1961      	adds	r1, r4, r5
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	6025      	str	r5, [r4, #0]
 8005bf4:	bf18      	it	ne
 8005bf6:	6059      	strne	r1, [r3, #4]
 8005bf8:	6863      	ldr	r3, [r4, #4]
 8005bfa:	bf08      	it	eq
 8005bfc:	f8c8 1000 	streq.w	r1, [r8]
 8005c00:	5162      	str	r2, [r4, r5]
 8005c02:	604b      	str	r3, [r1, #4]
 8005c04:	4630      	mov	r0, r6
 8005c06:	f000 f841 	bl	8005c8c <__malloc_unlock>
 8005c0a:	f104 000b 	add.w	r0, r4, #11
 8005c0e:	1d23      	adds	r3, r4, #4
 8005c10:	f020 0007 	bic.w	r0, r0, #7
 8005c14:	1ac2      	subs	r2, r0, r3
 8005c16:	bf1c      	itt	ne
 8005c18:	1a1b      	subne	r3, r3, r0
 8005c1a:	50a3      	strne	r3, [r4, r2]
 8005c1c:	e7af      	b.n	8005b7e <_malloc_r+0x22>
 8005c1e:	6862      	ldr	r2, [r4, #4]
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	bf0c      	ite	eq
 8005c24:	f8c8 2000 	streq.w	r2, [r8]
 8005c28:	605a      	strne	r2, [r3, #4]
 8005c2a:	e7eb      	b.n	8005c04 <_malloc_r+0xa8>
 8005c2c:	4623      	mov	r3, r4
 8005c2e:	6864      	ldr	r4, [r4, #4]
 8005c30:	e7ae      	b.n	8005b90 <_malloc_r+0x34>
 8005c32:	463c      	mov	r4, r7
 8005c34:	687f      	ldr	r7, [r7, #4]
 8005c36:	e7b6      	b.n	8005ba6 <_malloc_r+0x4a>
 8005c38:	461a      	mov	r2, r3
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	d1fb      	bne.n	8005c38 <_malloc_r+0xdc>
 8005c40:	2300      	movs	r3, #0
 8005c42:	6053      	str	r3, [r2, #4]
 8005c44:	e7de      	b.n	8005c04 <_malloc_r+0xa8>
 8005c46:	230c      	movs	r3, #12
 8005c48:	6033      	str	r3, [r6, #0]
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f000 f81e 	bl	8005c8c <__malloc_unlock>
 8005c50:	e794      	b.n	8005b7c <_malloc_r+0x20>
 8005c52:	6005      	str	r5, [r0, #0]
 8005c54:	e7d6      	b.n	8005c04 <_malloc_r+0xa8>
 8005c56:	bf00      	nop
 8005c58:	200005bc 	.word	0x200005bc

08005c5c <__ascii_mbtowc>:
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	b901      	cbnz	r1, 8005c62 <__ascii_mbtowc+0x6>
 8005c60:	a901      	add	r1, sp, #4
 8005c62:	b142      	cbz	r2, 8005c76 <__ascii_mbtowc+0x1a>
 8005c64:	b14b      	cbz	r3, 8005c7a <__ascii_mbtowc+0x1e>
 8005c66:	7813      	ldrb	r3, [r2, #0]
 8005c68:	600b      	str	r3, [r1, #0]
 8005c6a:	7812      	ldrb	r2, [r2, #0]
 8005c6c:	1e10      	subs	r0, r2, #0
 8005c6e:	bf18      	it	ne
 8005c70:	2001      	movne	r0, #1
 8005c72:	b002      	add	sp, #8
 8005c74:	4770      	bx	lr
 8005c76:	4610      	mov	r0, r2
 8005c78:	e7fb      	b.n	8005c72 <__ascii_mbtowc+0x16>
 8005c7a:	f06f 0001 	mvn.w	r0, #1
 8005c7e:	e7f8      	b.n	8005c72 <__ascii_mbtowc+0x16>

08005c80 <__malloc_lock>:
 8005c80:	4801      	ldr	r0, [pc, #4]	@ (8005c88 <__malloc_lock+0x8>)
 8005c82:	f7ff bbac 	b.w	80053de <__retarget_lock_acquire_recursive>
 8005c86:	bf00      	nop
 8005c88:	200005b4 	.word	0x200005b4

08005c8c <__malloc_unlock>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	@ (8005c94 <__malloc_unlock+0x8>)
 8005c8e:	f7ff bba7 	b.w	80053e0 <__retarget_lock_release_recursive>
 8005c92:	bf00      	nop
 8005c94:	200005b4 	.word	0x200005b4

08005c98 <_Balloc>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	69c6      	ldr	r6, [r0, #28]
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	b976      	cbnz	r6, 8005cc0 <_Balloc+0x28>
 8005ca2:	2010      	movs	r0, #16
 8005ca4:	f001 f8a4 	bl	8006df0 <malloc>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	61e0      	str	r0, [r4, #28]
 8005cac:	b920      	cbnz	r0, 8005cb8 <_Balloc+0x20>
 8005cae:	4b18      	ldr	r3, [pc, #96]	@ (8005d10 <_Balloc+0x78>)
 8005cb0:	4818      	ldr	r0, [pc, #96]	@ (8005d14 <_Balloc+0x7c>)
 8005cb2:	216b      	movs	r1, #107	@ 0x6b
 8005cb4:	f001 f86a 	bl	8006d8c <__assert_func>
 8005cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cbc:	6006      	str	r6, [r0, #0]
 8005cbe:	60c6      	str	r6, [r0, #12]
 8005cc0:	69e6      	ldr	r6, [r4, #28]
 8005cc2:	68f3      	ldr	r3, [r6, #12]
 8005cc4:	b183      	cbz	r3, 8005ce8 <_Balloc+0x50>
 8005cc6:	69e3      	ldr	r3, [r4, #28]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cce:	b9b8      	cbnz	r0, 8005d00 <_Balloc+0x68>
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	fa01 f605 	lsl.w	r6, r1, r5
 8005cd6:	1d72      	adds	r2, r6, #5
 8005cd8:	0092      	lsls	r2, r2, #2
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f001 f874 	bl	8006dc8 <_calloc_r>
 8005ce0:	b160      	cbz	r0, 8005cfc <_Balloc+0x64>
 8005ce2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ce6:	e00e      	b.n	8005d06 <_Balloc+0x6e>
 8005ce8:	2221      	movs	r2, #33	@ 0x21
 8005cea:	2104      	movs	r1, #4
 8005cec:	4620      	mov	r0, r4
 8005cee:	f001 f86b 	bl	8006dc8 <_calloc_r>
 8005cf2:	69e3      	ldr	r3, [r4, #28]
 8005cf4:	60f0      	str	r0, [r6, #12]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e4      	bne.n	8005cc6 <_Balloc+0x2e>
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	6802      	ldr	r2, [r0, #0]
 8005d02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d06:	2300      	movs	r3, #0
 8005d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d0c:	e7f7      	b.n	8005cfe <_Balloc+0x66>
 8005d0e:	bf00      	nop
 8005d10:	080076a2 	.word	0x080076a2
 8005d14:	080076b9 	.word	0x080076b9

08005d18 <_Bfree>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	69c6      	ldr	r6, [r0, #28]
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	b976      	cbnz	r6, 8005d40 <_Bfree+0x28>
 8005d22:	2010      	movs	r0, #16
 8005d24:	f001 f864 	bl	8006df0 <malloc>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	61e8      	str	r0, [r5, #28]
 8005d2c:	b920      	cbnz	r0, 8005d38 <_Bfree+0x20>
 8005d2e:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <_Bfree+0x3c>)
 8005d30:	4809      	ldr	r0, [pc, #36]	@ (8005d58 <_Bfree+0x40>)
 8005d32:	218f      	movs	r1, #143	@ 0x8f
 8005d34:	f001 f82a 	bl	8006d8c <__assert_func>
 8005d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d3c:	6006      	str	r6, [r0, #0]
 8005d3e:	60c6      	str	r6, [r0, #12]
 8005d40:	b13c      	cbz	r4, 8005d52 <_Bfree+0x3a>
 8005d42:	69eb      	ldr	r3, [r5, #28]
 8005d44:	6862      	ldr	r2, [r4, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d4c:	6021      	str	r1, [r4, #0]
 8005d4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	080076a2 	.word	0x080076a2
 8005d58:	080076b9 	.word	0x080076b9

08005d5c <__multadd>:
 8005d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d60:	690d      	ldr	r5, [r1, #16]
 8005d62:	4607      	mov	r7, r0
 8005d64:	460c      	mov	r4, r1
 8005d66:	461e      	mov	r6, r3
 8005d68:	f101 0c14 	add.w	ip, r1, #20
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f8dc 3000 	ldr.w	r3, [ip]
 8005d72:	b299      	uxth	r1, r3
 8005d74:	fb02 6101 	mla	r1, r2, r1, r6
 8005d78:	0c1e      	lsrs	r6, r3, #16
 8005d7a:	0c0b      	lsrs	r3, r1, #16
 8005d7c:	fb02 3306 	mla	r3, r2, r6, r3
 8005d80:	b289      	uxth	r1, r1
 8005d82:	3001      	adds	r0, #1
 8005d84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d88:	4285      	cmp	r5, r0
 8005d8a:	f84c 1b04 	str.w	r1, [ip], #4
 8005d8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d92:	dcec      	bgt.n	8005d6e <__multadd+0x12>
 8005d94:	b30e      	cbz	r6, 8005dda <__multadd+0x7e>
 8005d96:	68a3      	ldr	r3, [r4, #8]
 8005d98:	42ab      	cmp	r3, r5
 8005d9a:	dc19      	bgt.n	8005dd0 <__multadd+0x74>
 8005d9c:	6861      	ldr	r1, [r4, #4]
 8005d9e:	4638      	mov	r0, r7
 8005da0:	3101      	adds	r1, #1
 8005da2:	f7ff ff79 	bl	8005c98 <_Balloc>
 8005da6:	4680      	mov	r8, r0
 8005da8:	b928      	cbnz	r0, 8005db6 <__multadd+0x5a>
 8005daa:	4602      	mov	r2, r0
 8005dac:	4b0c      	ldr	r3, [pc, #48]	@ (8005de0 <__multadd+0x84>)
 8005dae:	480d      	ldr	r0, [pc, #52]	@ (8005de4 <__multadd+0x88>)
 8005db0:	21ba      	movs	r1, #186	@ 0xba
 8005db2:	f000 ffeb 	bl	8006d8c <__assert_func>
 8005db6:	6922      	ldr	r2, [r4, #16]
 8005db8:	3202      	adds	r2, #2
 8005dba:	f104 010c 	add.w	r1, r4, #12
 8005dbe:	0092      	lsls	r2, r2, #2
 8005dc0:	300c      	adds	r0, #12
 8005dc2:	f7ff fb0e 	bl	80053e2 <memcpy>
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4638      	mov	r0, r7
 8005dca:	f7ff ffa5 	bl	8005d18 <_Bfree>
 8005dce:	4644      	mov	r4, r8
 8005dd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	615e      	str	r6, [r3, #20]
 8005dd8:	6125      	str	r5, [r4, #16]
 8005dda:	4620      	mov	r0, r4
 8005ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de0:	08007631 	.word	0x08007631
 8005de4:	080076b9 	.word	0x080076b9

08005de8 <__s2b>:
 8005de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dec:	460c      	mov	r4, r1
 8005dee:	4615      	mov	r5, r2
 8005df0:	461f      	mov	r7, r3
 8005df2:	2209      	movs	r2, #9
 8005df4:	3308      	adds	r3, #8
 8005df6:	4606      	mov	r6, r0
 8005df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	2201      	movs	r2, #1
 8005e00:	429a      	cmp	r2, r3
 8005e02:	db09      	blt.n	8005e18 <__s2b+0x30>
 8005e04:	4630      	mov	r0, r6
 8005e06:	f7ff ff47 	bl	8005c98 <_Balloc>
 8005e0a:	b940      	cbnz	r0, 8005e1e <__s2b+0x36>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	4b19      	ldr	r3, [pc, #100]	@ (8005e74 <__s2b+0x8c>)
 8005e10:	4819      	ldr	r0, [pc, #100]	@ (8005e78 <__s2b+0x90>)
 8005e12:	21d3      	movs	r1, #211	@ 0xd3
 8005e14:	f000 ffba 	bl	8006d8c <__assert_func>
 8005e18:	0052      	lsls	r2, r2, #1
 8005e1a:	3101      	adds	r1, #1
 8005e1c:	e7f0      	b.n	8005e00 <__s2b+0x18>
 8005e1e:	9b08      	ldr	r3, [sp, #32]
 8005e20:	6143      	str	r3, [r0, #20]
 8005e22:	2d09      	cmp	r5, #9
 8005e24:	f04f 0301 	mov.w	r3, #1
 8005e28:	6103      	str	r3, [r0, #16]
 8005e2a:	dd16      	ble.n	8005e5a <__s2b+0x72>
 8005e2c:	f104 0909 	add.w	r9, r4, #9
 8005e30:	46c8      	mov	r8, r9
 8005e32:	442c      	add	r4, r5
 8005e34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e38:	4601      	mov	r1, r0
 8005e3a:	3b30      	subs	r3, #48	@ 0x30
 8005e3c:	220a      	movs	r2, #10
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f7ff ff8c 	bl	8005d5c <__multadd>
 8005e44:	45a0      	cmp	r8, r4
 8005e46:	d1f5      	bne.n	8005e34 <__s2b+0x4c>
 8005e48:	f1a5 0408 	sub.w	r4, r5, #8
 8005e4c:	444c      	add	r4, r9
 8005e4e:	1b2d      	subs	r5, r5, r4
 8005e50:	1963      	adds	r3, r4, r5
 8005e52:	42bb      	cmp	r3, r7
 8005e54:	db04      	blt.n	8005e60 <__s2b+0x78>
 8005e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e5a:	340a      	adds	r4, #10
 8005e5c:	2509      	movs	r5, #9
 8005e5e:	e7f6      	b.n	8005e4e <__s2b+0x66>
 8005e60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e64:	4601      	mov	r1, r0
 8005e66:	3b30      	subs	r3, #48	@ 0x30
 8005e68:	220a      	movs	r2, #10
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	f7ff ff76 	bl	8005d5c <__multadd>
 8005e70:	e7ee      	b.n	8005e50 <__s2b+0x68>
 8005e72:	bf00      	nop
 8005e74:	08007631 	.word	0x08007631
 8005e78:	080076b9 	.word	0x080076b9

08005e7c <__hi0bits>:
 8005e7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005e80:	4603      	mov	r3, r0
 8005e82:	bf36      	itet	cc
 8005e84:	0403      	lslcc	r3, r0, #16
 8005e86:	2000      	movcs	r0, #0
 8005e88:	2010      	movcc	r0, #16
 8005e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e8e:	bf3c      	itt	cc
 8005e90:	021b      	lslcc	r3, r3, #8
 8005e92:	3008      	addcc	r0, #8
 8005e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e98:	bf3c      	itt	cc
 8005e9a:	011b      	lslcc	r3, r3, #4
 8005e9c:	3004      	addcc	r0, #4
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	bf3c      	itt	cc
 8005ea4:	009b      	lslcc	r3, r3, #2
 8005ea6:	3002      	addcc	r0, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	db05      	blt.n	8005eb8 <__hi0bits+0x3c>
 8005eac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005eb0:	f100 0001 	add.w	r0, r0, #1
 8005eb4:	bf08      	it	eq
 8005eb6:	2020      	moveq	r0, #32
 8005eb8:	4770      	bx	lr

08005eba <__lo0bits>:
 8005eba:	6803      	ldr	r3, [r0, #0]
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	f013 0007 	ands.w	r0, r3, #7
 8005ec2:	d00b      	beq.n	8005edc <__lo0bits+0x22>
 8005ec4:	07d9      	lsls	r1, r3, #31
 8005ec6:	d421      	bmi.n	8005f0c <__lo0bits+0x52>
 8005ec8:	0798      	lsls	r0, r3, #30
 8005eca:	bf49      	itett	mi
 8005ecc:	085b      	lsrmi	r3, r3, #1
 8005ece:	089b      	lsrpl	r3, r3, #2
 8005ed0:	2001      	movmi	r0, #1
 8005ed2:	6013      	strmi	r3, [r2, #0]
 8005ed4:	bf5c      	itt	pl
 8005ed6:	6013      	strpl	r3, [r2, #0]
 8005ed8:	2002      	movpl	r0, #2
 8005eda:	4770      	bx	lr
 8005edc:	b299      	uxth	r1, r3
 8005ede:	b909      	cbnz	r1, 8005ee4 <__lo0bits+0x2a>
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	2010      	movs	r0, #16
 8005ee4:	b2d9      	uxtb	r1, r3
 8005ee6:	b909      	cbnz	r1, 8005eec <__lo0bits+0x32>
 8005ee8:	3008      	adds	r0, #8
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	0719      	lsls	r1, r3, #28
 8005eee:	bf04      	itt	eq
 8005ef0:	091b      	lsreq	r3, r3, #4
 8005ef2:	3004      	addeq	r0, #4
 8005ef4:	0799      	lsls	r1, r3, #30
 8005ef6:	bf04      	itt	eq
 8005ef8:	089b      	lsreq	r3, r3, #2
 8005efa:	3002      	addeq	r0, #2
 8005efc:	07d9      	lsls	r1, r3, #31
 8005efe:	d403      	bmi.n	8005f08 <__lo0bits+0x4e>
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	f100 0001 	add.w	r0, r0, #1
 8005f06:	d003      	beq.n	8005f10 <__lo0bits+0x56>
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	4770      	bx	lr
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	4770      	bx	lr
 8005f10:	2020      	movs	r0, #32
 8005f12:	4770      	bx	lr

08005f14 <__i2b>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	460c      	mov	r4, r1
 8005f18:	2101      	movs	r1, #1
 8005f1a:	f7ff febd 	bl	8005c98 <_Balloc>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	b928      	cbnz	r0, 8005f2e <__i2b+0x1a>
 8005f22:	4b05      	ldr	r3, [pc, #20]	@ (8005f38 <__i2b+0x24>)
 8005f24:	4805      	ldr	r0, [pc, #20]	@ (8005f3c <__i2b+0x28>)
 8005f26:	f240 1145 	movw	r1, #325	@ 0x145
 8005f2a:	f000 ff2f 	bl	8006d8c <__assert_func>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	6144      	str	r4, [r0, #20]
 8005f32:	6103      	str	r3, [r0, #16]
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	bf00      	nop
 8005f38:	08007631 	.word	0x08007631
 8005f3c:	080076b9 	.word	0x080076b9

08005f40 <__multiply>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	4614      	mov	r4, r2
 8005f46:	690a      	ldr	r2, [r1, #16]
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	bfa8      	it	ge
 8005f4e:	4623      	movge	r3, r4
 8005f50:	460f      	mov	r7, r1
 8005f52:	bfa4      	itt	ge
 8005f54:	460c      	movge	r4, r1
 8005f56:	461f      	movge	r7, r3
 8005f58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005f5c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005f60:	68a3      	ldr	r3, [r4, #8]
 8005f62:	6861      	ldr	r1, [r4, #4]
 8005f64:	eb0a 0609 	add.w	r6, sl, r9
 8005f68:	42b3      	cmp	r3, r6
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	bfb8      	it	lt
 8005f6e:	3101      	addlt	r1, #1
 8005f70:	f7ff fe92 	bl	8005c98 <_Balloc>
 8005f74:	b930      	cbnz	r0, 8005f84 <__multiply+0x44>
 8005f76:	4602      	mov	r2, r0
 8005f78:	4b44      	ldr	r3, [pc, #272]	@ (800608c <__multiply+0x14c>)
 8005f7a:	4845      	ldr	r0, [pc, #276]	@ (8006090 <__multiply+0x150>)
 8005f7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005f80:	f000 ff04 	bl	8006d8c <__assert_func>
 8005f84:	f100 0514 	add.w	r5, r0, #20
 8005f88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f8c:	462b      	mov	r3, r5
 8005f8e:	2200      	movs	r2, #0
 8005f90:	4543      	cmp	r3, r8
 8005f92:	d321      	bcc.n	8005fd8 <__multiply+0x98>
 8005f94:	f107 0114 	add.w	r1, r7, #20
 8005f98:	f104 0214 	add.w	r2, r4, #20
 8005f9c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005fa0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005fa4:	9302      	str	r3, [sp, #8]
 8005fa6:	1b13      	subs	r3, r2, r4
 8005fa8:	3b15      	subs	r3, #21
 8005faa:	f023 0303 	bic.w	r3, r3, #3
 8005fae:	3304      	adds	r3, #4
 8005fb0:	f104 0715 	add.w	r7, r4, #21
 8005fb4:	42ba      	cmp	r2, r7
 8005fb6:	bf38      	it	cc
 8005fb8:	2304      	movcc	r3, #4
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	9b02      	ldr	r3, [sp, #8]
 8005fbe:	9103      	str	r1, [sp, #12]
 8005fc0:	428b      	cmp	r3, r1
 8005fc2:	d80c      	bhi.n	8005fde <__multiply+0x9e>
 8005fc4:	2e00      	cmp	r6, #0
 8005fc6:	dd03      	ble.n	8005fd0 <__multiply+0x90>
 8005fc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d05b      	beq.n	8006088 <__multiply+0x148>
 8005fd0:	6106      	str	r6, [r0, #16]
 8005fd2:	b005      	add	sp, #20
 8005fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd8:	f843 2b04 	str.w	r2, [r3], #4
 8005fdc:	e7d8      	b.n	8005f90 <__multiply+0x50>
 8005fde:	f8b1 a000 	ldrh.w	sl, [r1]
 8005fe2:	f1ba 0f00 	cmp.w	sl, #0
 8005fe6:	d024      	beq.n	8006032 <__multiply+0xf2>
 8005fe8:	f104 0e14 	add.w	lr, r4, #20
 8005fec:	46a9      	mov	r9, r5
 8005fee:	f04f 0c00 	mov.w	ip, #0
 8005ff2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ff6:	f8d9 3000 	ldr.w	r3, [r9]
 8005ffa:	fa1f fb87 	uxth.w	fp, r7
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	fb0a 330b 	mla	r3, sl, fp, r3
 8006004:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006008:	f8d9 7000 	ldr.w	r7, [r9]
 800600c:	4463      	add	r3, ip
 800600e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006012:	fb0a c70b 	mla	r7, sl, fp, ip
 8006016:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800601a:	b29b      	uxth	r3, r3
 800601c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006020:	4572      	cmp	r2, lr
 8006022:	f849 3b04 	str.w	r3, [r9], #4
 8006026:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800602a:	d8e2      	bhi.n	8005ff2 <__multiply+0xb2>
 800602c:	9b01      	ldr	r3, [sp, #4]
 800602e:	f845 c003 	str.w	ip, [r5, r3]
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006038:	3104      	adds	r1, #4
 800603a:	f1b9 0f00 	cmp.w	r9, #0
 800603e:	d021      	beq.n	8006084 <__multiply+0x144>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	f104 0c14 	add.w	ip, r4, #20
 8006046:	46ae      	mov	lr, r5
 8006048:	f04f 0a00 	mov.w	sl, #0
 800604c:	f8bc b000 	ldrh.w	fp, [ip]
 8006050:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006054:	fb09 770b 	mla	r7, r9, fp, r7
 8006058:	4457      	add	r7, sl
 800605a:	b29b      	uxth	r3, r3
 800605c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006060:	f84e 3b04 	str.w	r3, [lr], #4
 8006064:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006068:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800606c:	f8be 3000 	ldrh.w	r3, [lr]
 8006070:	fb09 330a 	mla	r3, r9, sl, r3
 8006074:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006078:	4562      	cmp	r2, ip
 800607a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800607e:	d8e5      	bhi.n	800604c <__multiply+0x10c>
 8006080:	9f01      	ldr	r7, [sp, #4]
 8006082:	51eb      	str	r3, [r5, r7]
 8006084:	3504      	adds	r5, #4
 8006086:	e799      	b.n	8005fbc <__multiply+0x7c>
 8006088:	3e01      	subs	r6, #1
 800608a:	e79b      	b.n	8005fc4 <__multiply+0x84>
 800608c:	08007631 	.word	0x08007631
 8006090:	080076b9 	.word	0x080076b9

08006094 <__pow5mult>:
 8006094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006098:	4615      	mov	r5, r2
 800609a:	f012 0203 	ands.w	r2, r2, #3
 800609e:	4607      	mov	r7, r0
 80060a0:	460e      	mov	r6, r1
 80060a2:	d007      	beq.n	80060b4 <__pow5mult+0x20>
 80060a4:	4c25      	ldr	r4, [pc, #148]	@ (800613c <__pow5mult+0xa8>)
 80060a6:	3a01      	subs	r2, #1
 80060a8:	2300      	movs	r3, #0
 80060aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060ae:	f7ff fe55 	bl	8005d5c <__multadd>
 80060b2:	4606      	mov	r6, r0
 80060b4:	10ad      	asrs	r5, r5, #2
 80060b6:	d03d      	beq.n	8006134 <__pow5mult+0xa0>
 80060b8:	69fc      	ldr	r4, [r7, #28]
 80060ba:	b97c      	cbnz	r4, 80060dc <__pow5mult+0x48>
 80060bc:	2010      	movs	r0, #16
 80060be:	f000 fe97 	bl	8006df0 <malloc>
 80060c2:	4602      	mov	r2, r0
 80060c4:	61f8      	str	r0, [r7, #28]
 80060c6:	b928      	cbnz	r0, 80060d4 <__pow5mult+0x40>
 80060c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006140 <__pow5mult+0xac>)
 80060ca:	481e      	ldr	r0, [pc, #120]	@ (8006144 <__pow5mult+0xb0>)
 80060cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80060d0:	f000 fe5c 	bl	8006d8c <__assert_func>
 80060d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060d8:	6004      	str	r4, [r0, #0]
 80060da:	60c4      	str	r4, [r0, #12]
 80060dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80060e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060e4:	b94c      	cbnz	r4, 80060fa <__pow5mult+0x66>
 80060e6:	f240 2171 	movw	r1, #625	@ 0x271
 80060ea:	4638      	mov	r0, r7
 80060ec:	f7ff ff12 	bl	8005f14 <__i2b>
 80060f0:	2300      	movs	r3, #0
 80060f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80060f6:	4604      	mov	r4, r0
 80060f8:	6003      	str	r3, [r0, #0]
 80060fa:	f04f 0900 	mov.w	r9, #0
 80060fe:	07eb      	lsls	r3, r5, #31
 8006100:	d50a      	bpl.n	8006118 <__pow5mult+0x84>
 8006102:	4631      	mov	r1, r6
 8006104:	4622      	mov	r2, r4
 8006106:	4638      	mov	r0, r7
 8006108:	f7ff ff1a 	bl	8005f40 <__multiply>
 800610c:	4631      	mov	r1, r6
 800610e:	4680      	mov	r8, r0
 8006110:	4638      	mov	r0, r7
 8006112:	f7ff fe01 	bl	8005d18 <_Bfree>
 8006116:	4646      	mov	r6, r8
 8006118:	106d      	asrs	r5, r5, #1
 800611a:	d00b      	beq.n	8006134 <__pow5mult+0xa0>
 800611c:	6820      	ldr	r0, [r4, #0]
 800611e:	b938      	cbnz	r0, 8006130 <__pow5mult+0x9c>
 8006120:	4622      	mov	r2, r4
 8006122:	4621      	mov	r1, r4
 8006124:	4638      	mov	r0, r7
 8006126:	f7ff ff0b 	bl	8005f40 <__multiply>
 800612a:	6020      	str	r0, [r4, #0]
 800612c:	f8c0 9000 	str.w	r9, [r0]
 8006130:	4604      	mov	r4, r0
 8006132:	e7e4      	b.n	80060fe <__pow5mult+0x6a>
 8006134:	4630      	mov	r0, r6
 8006136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800613a:	bf00      	nop
 800613c:	08007714 	.word	0x08007714
 8006140:	080076a2 	.word	0x080076a2
 8006144:	080076b9 	.word	0x080076b9

08006148 <__lshift>:
 8006148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800614c:	460c      	mov	r4, r1
 800614e:	6849      	ldr	r1, [r1, #4]
 8006150:	6923      	ldr	r3, [r4, #16]
 8006152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006156:	68a3      	ldr	r3, [r4, #8]
 8006158:	4607      	mov	r7, r0
 800615a:	4691      	mov	r9, r2
 800615c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006160:	f108 0601 	add.w	r6, r8, #1
 8006164:	42b3      	cmp	r3, r6
 8006166:	db0b      	blt.n	8006180 <__lshift+0x38>
 8006168:	4638      	mov	r0, r7
 800616a:	f7ff fd95 	bl	8005c98 <_Balloc>
 800616e:	4605      	mov	r5, r0
 8006170:	b948      	cbnz	r0, 8006186 <__lshift+0x3e>
 8006172:	4602      	mov	r2, r0
 8006174:	4b28      	ldr	r3, [pc, #160]	@ (8006218 <__lshift+0xd0>)
 8006176:	4829      	ldr	r0, [pc, #164]	@ (800621c <__lshift+0xd4>)
 8006178:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800617c:	f000 fe06 	bl	8006d8c <__assert_func>
 8006180:	3101      	adds	r1, #1
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	e7ee      	b.n	8006164 <__lshift+0x1c>
 8006186:	2300      	movs	r3, #0
 8006188:	f100 0114 	add.w	r1, r0, #20
 800618c:	f100 0210 	add.w	r2, r0, #16
 8006190:	4618      	mov	r0, r3
 8006192:	4553      	cmp	r3, sl
 8006194:	db33      	blt.n	80061fe <__lshift+0xb6>
 8006196:	6920      	ldr	r0, [r4, #16]
 8006198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800619c:	f104 0314 	add.w	r3, r4, #20
 80061a0:	f019 091f 	ands.w	r9, r9, #31
 80061a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061ac:	d02b      	beq.n	8006206 <__lshift+0xbe>
 80061ae:	f1c9 0e20 	rsb	lr, r9, #32
 80061b2:	468a      	mov	sl, r1
 80061b4:	2200      	movs	r2, #0
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	fa00 f009 	lsl.w	r0, r0, r9
 80061bc:	4310      	orrs	r0, r2
 80061be:	f84a 0b04 	str.w	r0, [sl], #4
 80061c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c6:	459c      	cmp	ip, r3
 80061c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80061cc:	d8f3      	bhi.n	80061b6 <__lshift+0x6e>
 80061ce:	ebac 0304 	sub.w	r3, ip, r4
 80061d2:	3b15      	subs	r3, #21
 80061d4:	f023 0303 	bic.w	r3, r3, #3
 80061d8:	3304      	adds	r3, #4
 80061da:	f104 0015 	add.w	r0, r4, #21
 80061de:	4584      	cmp	ip, r0
 80061e0:	bf38      	it	cc
 80061e2:	2304      	movcc	r3, #4
 80061e4:	50ca      	str	r2, [r1, r3]
 80061e6:	b10a      	cbz	r2, 80061ec <__lshift+0xa4>
 80061e8:	f108 0602 	add.w	r6, r8, #2
 80061ec:	3e01      	subs	r6, #1
 80061ee:	4638      	mov	r0, r7
 80061f0:	612e      	str	r6, [r5, #16]
 80061f2:	4621      	mov	r1, r4
 80061f4:	f7ff fd90 	bl	8005d18 <_Bfree>
 80061f8:	4628      	mov	r0, r5
 80061fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006202:	3301      	adds	r3, #1
 8006204:	e7c5      	b.n	8006192 <__lshift+0x4a>
 8006206:	3904      	subs	r1, #4
 8006208:	f853 2b04 	ldr.w	r2, [r3], #4
 800620c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006210:	459c      	cmp	ip, r3
 8006212:	d8f9      	bhi.n	8006208 <__lshift+0xc0>
 8006214:	e7ea      	b.n	80061ec <__lshift+0xa4>
 8006216:	bf00      	nop
 8006218:	08007631 	.word	0x08007631
 800621c:	080076b9 	.word	0x080076b9

08006220 <__mcmp>:
 8006220:	690a      	ldr	r2, [r1, #16]
 8006222:	4603      	mov	r3, r0
 8006224:	6900      	ldr	r0, [r0, #16]
 8006226:	1a80      	subs	r0, r0, r2
 8006228:	b530      	push	{r4, r5, lr}
 800622a:	d10e      	bne.n	800624a <__mcmp+0x2a>
 800622c:	3314      	adds	r3, #20
 800622e:	3114      	adds	r1, #20
 8006230:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006234:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006238:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800623c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006240:	4295      	cmp	r5, r2
 8006242:	d003      	beq.n	800624c <__mcmp+0x2c>
 8006244:	d205      	bcs.n	8006252 <__mcmp+0x32>
 8006246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800624a:	bd30      	pop	{r4, r5, pc}
 800624c:	42a3      	cmp	r3, r4
 800624e:	d3f3      	bcc.n	8006238 <__mcmp+0x18>
 8006250:	e7fb      	b.n	800624a <__mcmp+0x2a>
 8006252:	2001      	movs	r0, #1
 8006254:	e7f9      	b.n	800624a <__mcmp+0x2a>
	...

08006258 <__mdiff>:
 8006258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	4689      	mov	r9, r1
 800625e:	4606      	mov	r6, r0
 8006260:	4611      	mov	r1, r2
 8006262:	4648      	mov	r0, r9
 8006264:	4614      	mov	r4, r2
 8006266:	f7ff ffdb 	bl	8006220 <__mcmp>
 800626a:	1e05      	subs	r5, r0, #0
 800626c:	d112      	bne.n	8006294 <__mdiff+0x3c>
 800626e:	4629      	mov	r1, r5
 8006270:	4630      	mov	r0, r6
 8006272:	f7ff fd11 	bl	8005c98 <_Balloc>
 8006276:	4602      	mov	r2, r0
 8006278:	b928      	cbnz	r0, 8006286 <__mdiff+0x2e>
 800627a:	4b3f      	ldr	r3, [pc, #252]	@ (8006378 <__mdiff+0x120>)
 800627c:	f240 2137 	movw	r1, #567	@ 0x237
 8006280:	483e      	ldr	r0, [pc, #248]	@ (800637c <__mdiff+0x124>)
 8006282:	f000 fd83 	bl	8006d8c <__assert_func>
 8006286:	2301      	movs	r3, #1
 8006288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800628c:	4610      	mov	r0, r2
 800628e:	b003      	add	sp, #12
 8006290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006294:	bfbc      	itt	lt
 8006296:	464b      	movlt	r3, r9
 8006298:	46a1      	movlt	r9, r4
 800629a:	4630      	mov	r0, r6
 800629c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80062a0:	bfba      	itte	lt
 80062a2:	461c      	movlt	r4, r3
 80062a4:	2501      	movlt	r5, #1
 80062a6:	2500      	movge	r5, #0
 80062a8:	f7ff fcf6 	bl	8005c98 <_Balloc>
 80062ac:	4602      	mov	r2, r0
 80062ae:	b918      	cbnz	r0, 80062b8 <__mdiff+0x60>
 80062b0:	4b31      	ldr	r3, [pc, #196]	@ (8006378 <__mdiff+0x120>)
 80062b2:	f240 2145 	movw	r1, #581	@ 0x245
 80062b6:	e7e3      	b.n	8006280 <__mdiff+0x28>
 80062b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80062bc:	6926      	ldr	r6, [r4, #16]
 80062be:	60c5      	str	r5, [r0, #12]
 80062c0:	f109 0310 	add.w	r3, r9, #16
 80062c4:	f109 0514 	add.w	r5, r9, #20
 80062c8:	f104 0e14 	add.w	lr, r4, #20
 80062cc:	f100 0b14 	add.w	fp, r0, #20
 80062d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80062d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	46d9      	mov	r9, fp
 80062dc:	f04f 0c00 	mov.w	ip, #0
 80062e0:	9b01      	ldr	r3, [sp, #4]
 80062e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80062e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80062ea:	9301      	str	r3, [sp, #4]
 80062ec:	fa1f f38a 	uxth.w	r3, sl
 80062f0:	4619      	mov	r1, r3
 80062f2:	b283      	uxth	r3, r0
 80062f4:	1acb      	subs	r3, r1, r3
 80062f6:	0c00      	lsrs	r0, r0, #16
 80062f8:	4463      	add	r3, ip
 80062fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80062fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006302:	b29b      	uxth	r3, r3
 8006304:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006308:	4576      	cmp	r6, lr
 800630a:	f849 3b04 	str.w	r3, [r9], #4
 800630e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006312:	d8e5      	bhi.n	80062e0 <__mdiff+0x88>
 8006314:	1b33      	subs	r3, r6, r4
 8006316:	3b15      	subs	r3, #21
 8006318:	f023 0303 	bic.w	r3, r3, #3
 800631c:	3415      	adds	r4, #21
 800631e:	3304      	adds	r3, #4
 8006320:	42a6      	cmp	r6, r4
 8006322:	bf38      	it	cc
 8006324:	2304      	movcc	r3, #4
 8006326:	441d      	add	r5, r3
 8006328:	445b      	add	r3, fp
 800632a:	461e      	mov	r6, r3
 800632c:	462c      	mov	r4, r5
 800632e:	4544      	cmp	r4, r8
 8006330:	d30e      	bcc.n	8006350 <__mdiff+0xf8>
 8006332:	f108 0103 	add.w	r1, r8, #3
 8006336:	1b49      	subs	r1, r1, r5
 8006338:	f021 0103 	bic.w	r1, r1, #3
 800633c:	3d03      	subs	r5, #3
 800633e:	45a8      	cmp	r8, r5
 8006340:	bf38      	it	cc
 8006342:	2100      	movcc	r1, #0
 8006344:	440b      	add	r3, r1
 8006346:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800634a:	b191      	cbz	r1, 8006372 <__mdiff+0x11a>
 800634c:	6117      	str	r7, [r2, #16]
 800634e:	e79d      	b.n	800628c <__mdiff+0x34>
 8006350:	f854 1b04 	ldr.w	r1, [r4], #4
 8006354:	46e6      	mov	lr, ip
 8006356:	0c08      	lsrs	r0, r1, #16
 8006358:	fa1c fc81 	uxtah	ip, ip, r1
 800635c:	4471      	add	r1, lr
 800635e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006362:	b289      	uxth	r1, r1
 8006364:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006368:	f846 1b04 	str.w	r1, [r6], #4
 800636c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006370:	e7dd      	b.n	800632e <__mdiff+0xd6>
 8006372:	3f01      	subs	r7, #1
 8006374:	e7e7      	b.n	8006346 <__mdiff+0xee>
 8006376:	bf00      	nop
 8006378:	08007631 	.word	0x08007631
 800637c:	080076b9 	.word	0x080076b9

08006380 <__ulp>:
 8006380:	b082      	sub	sp, #8
 8006382:	ed8d 0b00 	vstr	d0, [sp]
 8006386:	9a01      	ldr	r2, [sp, #4]
 8006388:	4b0f      	ldr	r3, [pc, #60]	@ (80063c8 <__ulp+0x48>)
 800638a:	4013      	ands	r3, r2
 800638c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006390:	2b00      	cmp	r3, #0
 8006392:	dc08      	bgt.n	80063a6 <__ulp+0x26>
 8006394:	425b      	negs	r3, r3
 8006396:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800639a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800639e:	da04      	bge.n	80063aa <__ulp+0x2a>
 80063a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80063a4:	4113      	asrs	r3, r2
 80063a6:	2200      	movs	r2, #0
 80063a8:	e008      	b.n	80063bc <__ulp+0x3c>
 80063aa:	f1a2 0314 	sub.w	r3, r2, #20
 80063ae:	2b1e      	cmp	r3, #30
 80063b0:	bfda      	itte	le
 80063b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80063b6:	40da      	lsrle	r2, r3
 80063b8:	2201      	movgt	r2, #1
 80063ba:	2300      	movs	r3, #0
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	ec41 0b10 	vmov	d0, r0, r1
 80063c4:	b002      	add	sp, #8
 80063c6:	4770      	bx	lr
 80063c8:	7ff00000 	.word	0x7ff00000

080063cc <__b2d>:
 80063cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d0:	6906      	ldr	r6, [r0, #16]
 80063d2:	f100 0814 	add.w	r8, r0, #20
 80063d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80063da:	1f37      	subs	r7, r6, #4
 80063dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80063e0:	4610      	mov	r0, r2
 80063e2:	f7ff fd4b 	bl	8005e7c <__hi0bits>
 80063e6:	f1c0 0320 	rsb	r3, r0, #32
 80063ea:	280a      	cmp	r0, #10
 80063ec:	600b      	str	r3, [r1, #0]
 80063ee:	491b      	ldr	r1, [pc, #108]	@ (800645c <__b2d+0x90>)
 80063f0:	dc15      	bgt.n	800641e <__b2d+0x52>
 80063f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80063f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80063fa:	45b8      	cmp	r8, r7
 80063fc:	ea43 0501 	orr.w	r5, r3, r1
 8006400:	bf34      	ite	cc
 8006402:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006406:	2300      	movcs	r3, #0
 8006408:	3015      	adds	r0, #21
 800640a:	fa02 f000 	lsl.w	r0, r2, r0
 800640e:	fa23 f30c 	lsr.w	r3, r3, ip
 8006412:	4303      	orrs	r3, r0
 8006414:	461c      	mov	r4, r3
 8006416:	ec45 4b10 	vmov	d0, r4, r5
 800641a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800641e:	45b8      	cmp	r8, r7
 8006420:	bf3a      	itte	cc
 8006422:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006426:	f1a6 0708 	subcc.w	r7, r6, #8
 800642a:	2300      	movcs	r3, #0
 800642c:	380b      	subs	r0, #11
 800642e:	d012      	beq.n	8006456 <__b2d+0x8a>
 8006430:	f1c0 0120 	rsb	r1, r0, #32
 8006434:	fa23 f401 	lsr.w	r4, r3, r1
 8006438:	4082      	lsls	r2, r0
 800643a:	4322      	orrs	r2, r4
 800643c:	4547      	cmp	r7, r8
 800643e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006442:	bf8c      	ite	hi
 8006444:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006448:	2200      	movls	r2, #0
 800644a:	4083      	lsls	r3, r0
 800644c:	40ca      	lsrs	r2, r1
 800644e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006452:	4313      	orrs	r3, r2
 8006454:	e7de      	b.n	8006414 <__b2d+0x48>
 8006456:	ea42 0501 	orr.w	r5, r2, r1
 800645a:	e7db      	b.n	8006414 <__b2d+0x48>
 800645c:	3ff00000 	.word	0x3ff00000

08006460 <__d2b>:
 8006460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006464:	460f      	mov	r7, r1
 8006466:	2101      	movs	r1, #1
 8006468:	ec59 8b10 	vmov	r8, r9, d0
 800646c:	4616      	mov	r6, r2
 800646e:	f7ff fc13 	bl	8005c98 <_Balloc>
 8006472:	4604      	mov	r4, r0
 8006474:	b930      	cbnz	r0, 8006484 <__d2b+0x24>
 8006476:	4602      	mov	r2, r0
 8006478:	4b23      	ldr	r3, [pc, #140]	@ (8006508 <__d2b+0xa8>)
 800647a:	4824      	ldr	r0, [pc, #144]	@ (800650c <__d2b+0xac>)
 800647c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006480:	f000 fc84 	bl	8006d8c <__assert_func>
 8006484:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800648c:	b10d      	cbz	r5, 8006492 <__d2b+0x32>
 800648e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	f1b8 0300 	subs.w	r3, r8, #0
 8006498:	d023      	beq.n	80064e2 <__d2b+0x82>
 800649a:	4668      	mov	r0, sp
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	f7ff fd0c 	bl	8005eba <__lo0bits>
 80064a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064a6:	b1d0      	cbz	r0, 80064de <__d2b+0x7e>
 80064a8:	f1c0 0320 	rsb	r3, r0, #32
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	430b      	orrs	r3, r1
 80064b2:	40c2      	lsrs	r2, r0
 80064b4:	6163      	str	r3, [r4, #20]
 80064b6:	9201      	str	r2, [sp, #4]
 80064b8:	9b01      	ldr	r3, [sp, #4]
 80064ba:	61a3      	str	r3, [r4, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf0c      	ite	eq
 80064c0:	2201      	moveq	r2, #1
 80064c2:	2202      	movne	r2, #2
 80064c4:	6122      	str	r2, [r4, #16]
 80064c6:	b1a5      	cbz	r5, 80064f2 <__d2b+0x92>
 80064c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80064cc:	4405      	add	r5, r0
 80064ce:	603d      	str	r5, [r7, #0]
 80064d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80064d4:	6030      	str	r0, [r6, #0]
 80064d6:	4620      	mov	r0, r4
 80064d8:	b003      	add	sp, #12
 80064da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064de:	6161      	str	r1, [r4, #20]
 80064e0:	e7ea      	b.n	80064b8 <__d2b+0x58>
 80064e2:	a801      	add	r0, sp, #4
 80064e4:	f7ff fce9 	bl	8005eba <__lo0bits>
 80064e8:	9b01      	ldr	r3, [sp, #4]
 80064ea:	6163      	str	r3, [r4, #20]
 80064ec:	3020      	adds	r0, #32
 80064ee:	2201      	movs	r2, #1
 80064f0:	e7e8      	b.n	80064c4 <__d2b+0x64>
 80064f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80064f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80064fa:	6038      	str	r0, [r7, #0]
 80064fc:	6918      	ldr	r0, [r3, #16]
 80064fe:	f7ff fcbd 	bl	8005e7c <__hi0bits>
 8006502:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006506:	e7e5      	b.n	80064d4 <__d2b+0x74>
 8006508:	08007631 	.word	0x08007631
 800650c:	080076b9 	.word	0x080076b9

08006510 <__ratio>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	b085      	sub	sp, #20
 8006516:	e9cd 1000 	strd	r1, r0, [sp]
 800651a:	a902      	add	r1, sp, #8
 800651c:	f7ff ff56 	bl	80063cc <__b2d>
 8006520:	9800      	ldr	r0, [sp, #0]
 8006522:	a903      	add	r1, sp, #12
 8006524:	ec55 4b10 	vmov	r4, r5, d0
 8006528:	f7ff ff50 	bl	80063cc <__b2d>
 800652c:	9b01      	ldr	r3, [sp, #4]
 800652e:	6919      	ldr	r1, [r3, #16]
 8006530:	9b00      	ldr	r3, [sp, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	1ac9      	subs	r1, r1, r3
 8006536:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800653a:	1a9b      	subs	r3, r3, r2
 800653c:	ec5b ab10 	vmov	sl, fp, d0
 8006540:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006544:	2b00      	cmp	r3, #0
 8006546:	bfce      	itee	gt
 8006548:	462a      	movgt	r2, r5
 800654a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800654e:	465a      	movle	r2, fp
 8006550:	462f      	mov	r7, r5
 8006552:	46d9      	mov	r9, fp
 8006554:	bfcc      	ite	gt
 8006556:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800655a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800655e:	464b      	mov	r3, r9
 8006560:	4652      	mov	r2, sl
 8006562:	4620      	mov	r0, r4
 8006564:	4639      	mov	r1, r7
 8006566:	f7fa f991 	bl	800088c <__aeabi_ddiv>
 800656a:	ec41 0b10 	vmov	d0, r0, r1
 800656e:	b005      	add	sp, #20
 8006570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006574 <__copybits>:
 8006574:	3901      	subs	r1, #1
 8006576:	b570      	push	{r4, r5, r6, lr}
 8006578:	1149      	asrs	r1, r1, #5
 800657a:	6914      	ldr	r4, [r2, #16]
 800657c:	3101      	adds	r1, #1
 800657e:	f102 0314 	add.w	r3, r2, #20
 8006582:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006586:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800658a:	1f05      	subs	r5, r0, #4
 800658c:	42a3      	cmp	r3, r4
 800658e:	d30c      	bcc.n	80065aa <__copybits+0x36>
 8006590:	1aa3      	subs	r3, r4, r2
 8006592:	3b11      	subs	r3, #17
 8006594:	f023 0303 	bic.w	r3, r3, #3
 8006598:	3211      	adds	r2, #17
 800659a:	42a2      	cmp	r2, r4
 800659c:	bf88      	it	hi
 800659e:	2300      	movhi	r3, #0
 80065a0:	4418      	add	r0, r3
 80065a2:	2300      	movs	r3, #0
 80065a4:	4288      	cmp	r0, r1
 80065a6:	d305      	bcc.n	80065b4 <__copybits+0x40>
 80065a8:	bd70      	pop	{r4, r5, r6, pc}
 80065aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80065ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80065b2:	e7eb      	b.n	800658c <__copybits+0x18>
 80065b4:	f840 3b04 	str.w	r3, [r0], #4
 80065b8:	e7f4      	b.n	80065a4 <__copybits+0x30>

080065ba <__any_on>:
 80065ba:	f100 0214 	add.w	r2, r0, #20
 80065be:	6900      	ldr	r0, [r0, #16]
 80065c0:	114b      	asrs	r3, r1, #5
 80065c2:	4298      	cmp	r0, r3
 80065c4:	b510      	push	{r4, lr}
 80065c6:	db11      	blt.n	80065ec <__any_on+0x32>
 80065c8:	dd0a      	ble.n	80065e0 <__any_on+0x26>
 80065ca:	f011 011f 	ands.w	r1, r1, #31
 80065ce:	d007      	beq.n	80065e0 <__any_on+0x26>
 80065d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80065d4:	fa24 f001 	lsr.w	r0, r4, r1
 80065d8:	fa00 f101 	lsl.w	r1, r0, r1
 80065dc:	428c      	cmp	r4, r1
 80065de:	d10b      	bne.n	80065f8 <__any_on+0x3e>
 80065e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d803      	bhi.n	80065f0 <__any_on+0x36>
 80065e8:	2000      	movs	r0, #0
 80065ea:	bd10      	pop	{r4, pc}
 80065ec:	4603      	mov	r3, r0
 80065ee:	e7f7      	b.n	80065e0 <__any_on+0x26>
 80065f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80065f4:	2900      	cmp	r1, #0
 80065f6:	d0f5      	beq.n	80065e4 <__any_on+0x2a>
 80065f8:	2001      	movs	r0, #1
 80065fa:	e7f6      	b.n	80065ea <__any_on+0x30>

080065fc <__ascii_wctomb>:
 80065fc:	4603      	mov	r3, r0
 80065fe:	4608      	mov	r0, r1
 8006600:	b141      	cbz	r1, 8006614 <__ascii_wctomb+0x18>
 8006602:	2aff      	cmp	r2, #255	@ 0xff
 8006604:	d904      	bls.n	8006610 <__ascii_wctomb+0x14>
 8006606:	228a      	movs	r2, #138	@ 0x8a
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800660e:	4770      	bx	lr
 8006610:	700a      	strb	r2, [r1, #0]
 8006612:	2001      	movs	r0, #1
 8006614:	4770      	bx	lr

08006616 <__ssputs_r>:
 8006616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800661a:	688e      	ldr	r6, [r1, #8]
 800661c:	461f      	mov	r7, r3
 800661e:	42be      	cmp	r6, r7
 8006620:	680b      	ldr	r3, [r1, #0]
 8006622:	4682      	mov	sl, r0
 8006624:	460c      	mov	r4, r1
 8006626:	4690      	mov	r8, r2
 8006628:	d82d      	bhi.n	8006686 <__ssputs_r+0x70>
 800662a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800662e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006632:	d026      	beq.n	8006682 <__ssputs_r+0x6c>
 8006634:	6965      	ldr	r5, [r4, #20]
 8006636:	6909      	ldr	r1, [r1, #16]
 8006638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800663c:	eba3 0901 	sub.w	r9, r3, r1
 8006640:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006644:	1c7b      	adds	r3, r7, #1
 8006646:	444b      	add	r3, r9
 8006648:	106d      	asrs	r5, r5, #1
 800664a:	429d      	cmp	r5, r3
 800664c:	bf38      	it	cc
 800664e:	461d      	movcc	r5, r3
 8006650:	0553      	lsls	r3, r2, #21
 8006652:	d527      	bpl.n	80066a4 <__ssputs_r+0x8e>
 8006654:	4629      	mov	r1, r5
 8006656:	f7ff fa81 	bl	8005b5c <_malloc_r>
 800665a:	4606      	mov	r6, r0
 800665c:	b360      	cbz	r0, 80066b8 <__ssputs_r+0xa2>
 800665e:	6921      	ldr	r1, [r4, #16]
 8006660:	464a      	mov	r2, r9
 8006662:	f7fe febe 	bl	80053e2 <memcpy>
 8006666:	89a3      	ldrh	r3, [r4, #12]
 8006668:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800666c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	6126      	str	r6, [r4, #16]
 8006674:	6165      	str	r5, [r4, #20]
 8006676:	444e      	add	r6, r9
 8006678:	eba5 0509 	sub.w	r5, r5, r9
 800667c:	6026      	str	r6, [r4, #0]
 800667e:	60a5      	str	r5, [r4, #8]
 8006680:	463e      	mov	r6, r7
 8006682:	42be      	cmp	r6, r7
 8006684:	d900      	bls.n	8006688 <__ssputs_r+0x72>
 8006686:	463e      	mov	r6, r7
 8006688:	6820      	ldr	r0, [r4, #0]
 800668a:	4632      	mov	r2, r6
 800668c:	4641      	mov	r1, r8
 800668e:	f000 fb53 	bl	8006d38 <memmove>
 8006692:	68a3      	ldr	r3, [r4, #8]
 8006694:	1b9b      	subs	r3, r3, r6
 8006696:	60a3      	str	r3, [r4, #8]
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	4433      	add	r3, r6
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	2000      	movs	r0, #0
 80066a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a4:	462a      	mov	r2, r5
 80066a6:	f000 fbab 	bl	8006e00 <_realloc_r>
 80066aa:	4606      	mov	r6, r0
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d1e0      	bne.n	8006672 <__ssputs_r+0x5c>
 80066b0:	6921      	ldr	r1, [r4, #16]
 80066b2:	4650      	mov	r0, sl
 80066b4:	f7fe feac 	bl	8005410 <_free_r>
 80066b8:	230c      	movs	r3, #12
 80066ba:	f8ca 3000 	str.w	r3, [sl]
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066c4:	81a3      	strh	r3, [r4, #12]
 80066c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066ca:	e7e9      	b.n	80066a0 <__ssputs_r+0x8a>

080066cc <_svfiprintf_r>:
 80066cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d0:	4698      	mov	r8, r3
 80066d2:	898b      	ldrh	r3, [r1, #12]
 80066d4:	061b      	lsls	r3, r3, #24
 80066d6:	b09d      	sub	sp, #116	@ 0x74
 80066d8:	4607      	mov	r7, r0
 80066da:	460d      	mov	r5, r1
 80066dc:	4614      	mov	r4, r2
 80066de:	d510      	bpl.n	8006702 <_svfiprintf_r+0x36>
 80066e0:	690b      	ldr	r3, [r1, #16]
 80066e2:	b973      	cbnz	r3, 8006702 <_svfiprintf_r+0x36>
 80066e4:	2140      	movs	r1, #64	@ 0x40
 80066e6:	f7ff fa39 	bl	8005b5c <_malloc_r>
 80066ea:	6028      	str	r0, [r5, #0]
 80066ec:	6128      	str	r0, [r5, #16]
 80066ee:	b930      	cbnz	r0, 80066fe <_svfiprintf_r+0x32>
 80066f0:	230c      	movs	r3, #12
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066f8:	b01d      	add	sp, #116	@ 0x74
 80066fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066fe:	2340      	movs	r3, #64	@ 0x40
 8006700:	616b      	str	r3, [r5, #20]
 8006702:	2300      	movs	r3, #0
 8006704:	9309      	str	r3, [sp, #36]	@ 0x24
 8006706:	2320      	movs	r3, #32
 8006708:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800670c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006710:	2330      	movs	r3, #48	@ 0x30
 8006712:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80068b0 <_svfiprintf_r+0x1e4>
 8006716:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800671a:	f04f 0901 	mov.w	r9, #1
 800671e:	4623      	mov	r3, r4
 8006720:	469a      	mov	sl, r3
 8006722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006726:	b10a      	cbz	r2, 800672c <_svfiprintf_r+0x60>
 8006728:	2a25      	cmp	r2, #37	@ 0x25
 800672a:	d1f9      	bne.n	8006720 <_svfiprintf_r+0x54>
 800672c:	ebba 0b04 	subs.w	fp, sl, r4
 8006730:	d00b      	beq.n	800674a <_svfiprintf_r+0x7e>
 8006732:	465b      	mov	r3, fp
 8006734:	4622      	mov	r2, r4
 8006736:	4629      	mov	r1, r5
 8006738:	4638      	mov	r0, r7
 800673a:	f7ff ff6c 	bl	8006616 <__ssputs_r>
 800673e:	3001      	adds	r0, #1
 8006740:	f000 80a7 	beq.w	8006892 <_svfiprintf_r+0x1c6>
 8006744:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006746:	445a      	add	r2, fp
 8006748:	9209      	str	r2, [sp, #36]	@ 0x24
 800674a:	f89a 3000 	ldrb.w	r3, [sl]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 809f 	beq.w	8006892 <_svfiprintf_r+0x1c6>
 8006754:	2300      	movs	r3, #0
 8006756:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800675a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800675e:	f10a 0a01 	add.w	sl, sl, #1
 8006762:	9304      	str	r3, [sp, #16]
 8006764:	9307      	str	r3, [sp, #28]
 8006766:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800676a:	931a      	str	r3, [sp, #104]	@ 0x68
 800676c:	4654      	mov	r4, sl
 800676e:	2205      	movs	r2, #5
 8006770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006774:	484e      	ldr	r0, [pc, #312]	@ (80068b0 <_svfiprintf_r+0x1e4>)
 8006776:	f7f9 fd53 	bl	8000220 <memchr>
 800677a:	9a04      	ldr	r2, [sp, #16]
 800677c:	b9d8      	cbnz	r0, 80067b6 <_svfiprintf_r+0xea>
 800677e:	06d0      	lsls	r0, r2, #27
 8006780:	bf44      	itt	mi
 8006782:	2320      	movmi	r3, #32
 8006784:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006788:	0711      	lsls	r1, r2, #28
 800678a:	bf44      	itt	mi
 800678c:	232b      	movmi	r3, #43	@ 0x2b
 800678e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006792:	f89a 3000 	ldrb.w	r3, [sl]
 8006796:	2b2a      	cmp	r3, #42	@ 0x2a
 8006798:	d015      	beq.n	80067c6 <_svfiprintf_r+0xfa>
 800679a:	9a07      	ldr	r2, [sp, #28]
 800679c:	4654      	mov	r4, sl
 800679e:	2000      	movs	r0, #0
 80067a0:	f04f 0c0a 	mov.w	ip, #10
 80067a4:	4621      	mov	r1, r4
 80067a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067aa:	3b30      	subs	r3, #48	@ 0x30
 80067ac:	2b09      	cmp	r3, #9
 80067ae:	d94b      	bls.n	8006848 <_svfiprintf_r+0x17c>
 80067b0:	b1b0      	cbz	r0, 80067e0 <_svfiprintf_r+0x114>
 80067b2:	9207      	str	r2, [sp, #28]
 80067b4:	e014      	b.n	80067e0 <_svfiprintf_r+0x114>
 80067b6:	eba0 0308 	sub.w	r3, r0, r8
 80067ba:	fa09 f303 	lsl.w	r3, r9, r3
 80067be:	4313      	orrs	r3, r2
 80067c0:	9304      	str	r3, [sp, #16]
 80067c2:	46a2      	mov	sl, r4
 80067c4:	e7d2      	b.n	800676c <_svfiprintf_r+0xa0>
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	1d19      	adds	r1, r3, #4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	9103      	str	r1, [sp, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bfbb      	ittet	lt
 80067d2:	425b      	neglt	r3, r3
 80067d4:	f042 0202 	orrlt.w	r2, r2, #2
 80067d8:	9307      	strge	r3, [sp, #28]
 80067da:	9307      	strlt	r3, [sp, #28]
 80067dc:	bfb8      	it	lt
 80067de:	9204      	strlt	r2, [sp, #16]
 80067e0:	7823      	ldrb	r3, [r4, #0]
 80067e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80067e4:	d10a      	bne.n	80067fc <_svfiprintf_r+0x130>
 80067e6:	7863      	ldrb	r3, [r4, #1]
 80067e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80067ea:	d132      	bne.n	8006852 <_svfiprintf_r+0x186>
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	1d1a      	adds	r2, r3, #4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	9203      	str	r2, [sp, #12]
 80067f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067f8:	3402      	adds	r4, #2
 80067fa:	9305      	str	r3, [sp, #20]
 80067fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80068c0 <_svfiprintf_r+0x1f4>
 8006800:	7821      	ldrb	r1, [r4, #0]
 8006802:	2203      	movs	r2, #3
 8006804:	4650      	mov	r0, sl
 8006806:	f7f9 fd0b 	bl	8000220 <memchr>
 800680a:	b138      	cbz	r0, 800681c <_svfiprintf_r+0x150>
 800680c:	9b04      	ldr	r3, [sp, #16]
 800680e:	eba0 000a 	sub.w	r0, r0, sl
 8006812:	2240      	movs	r2, #64	@ 0x40
 8006814:	4082      	lsls	r2, r0
 8006816:	4313      	orrs	r3, r2
 8006818:	3401      	adds	r4, #1
 800681a:	9304      	str	r3, [sp, #16]
 800681c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006820:	4824      	ldr	r0, [pc, #144]	@ (80068b4 <_svfiprintf_r+0x1e8>)
 8006822:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006826:	2206      	movs	r2, #6
 8006828:	f7f9 fcfa 	bl	8000220 <memchr>
 800682c:	2800      	cmp	r0, #0
 800682e:	d036      	beq.n	800689e <_svfiprintf_r+0x1d2>
 8006830:	4b21      	ldr	r3, [pc, #132]	@ (80068b8 <_svfiprintf_r+0x1ec>)
 8006832:	bb1b      	cbnz	r3, 800687c <_svfiprintf_r+0x1b0>
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	3307      	adds	r3, #7
 8006838:	f023 0307 	bic.w	r3, r3, #7
 800683c:	3308      	adds	r3, #8
 800683e:	9303      	str	r3, [sp, #12]
 8006840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006842:	4433      	add	r3, r6
 8006844:	9309      	str	r3, [sp, #36]	@ 0x24
 8006846:	e76a      	b.n	800671e <_svfiprintf_r+0x52>
 8006848:	fb0c 3202 	mla	r2, ip, r2, r3
 800684c:	460c      	mov	r4, r1
 800684e:	2001      	movs	r0, #1
 8006850:	e7a8      	b.n	80067a4 <_svfiprintf_r+0xd8>
 8006852:	2300      	movs	r3, #0
 8006854:	3401      	adds	r4, #1
 8006856:	9305      	str	r3, [sp, #20]
 8006858:	4619      	mov	r1, r3
 800685a:	f04f 0c0a 	mov.w	ip, #10
 800685e:	4620      	mov	r0, r4
 8006860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006864:	3a30      	subs	r2, #48	@ 0x30
 8006866:	2a09      	cmp	r2, #9
 8006868:	d903      	bls.n	8006872 <_svfiprintf_r+0x1a6>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0c6      	beq.n	80067fc <_svfiprintf_r+0x130>
 800686e:	9105      	str	r1, [sp, #20]
 8006870:	e7c4      	b.n	80067fc <_svfiprintf_r+0x130>
 8006872:	fb0c 2101 	mla	r1, ip, r1, r2
 8006876:	4604      	mov	r4, r0
 8006878:	2301      	movs	r3, #1
 800687a:	e7f0      	b.n	800685e <_svfiprintf_r+0x192>
 800687c:	ab03      	add	r3, sp, #12
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	462a      	mov	r2, r5
 8006882:	4b0e      	ldr	r3, [pc, #56]	@ (80068bc <_svfiprintf_r+0x1f0>)
 8006884:	a904      	add	r1, sp, #16
 8006886:	4638      	mov	r0, r7
 8006888:	f3af 8000 	nop.w
 800688c:	1c42      	adds	r2, r0, #1
 800688e:	4606      	mov	r6, r0
 8006890:	d1d6      	bne.n	8006840 <_svfiprintf_r+0x174>
 8006892:	89ab      	ldrh	r3, [r5, #12]
 8006894:	065b      	lsls	r3, r3, #25
 8006896:	f53f af2d 	bmi.w	80066f4 <_svfiprintf_r+0x28>
 800689a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800689c:	e72c      	b.n	80066f8 <_svfiprintf_r+0x2c>
 800689e:	ab03      	add	r3, sp, #12
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	462a      	mov	r2, r5
 80068a4:	4b05      	ldr	r3, [pc, #20]	@ (80068bc <_svfiprintf_r+0x1f0>)
 80068a6:	a904      	add	r1, sp, #16
 80068a8:	4638      	mov	r0, r7
 80068aa:	f000 f879 	bl	80069a0 <_printf_i>
 80068ae:	e7ed      	b.n	800688c <_svfiprintf_r+0x1c0>
 80068b0:	08007810 	.word	0x08007810
 80068b4:	0800781a 	.word	0x0800781a
 80068b8:	00000000 	.word	0x00000000
 80068bc:	08006617 	.word	0x08006617
 80068c0:	08007816 	.word	0x08007816

080068c4 <_printf_common>:
 80068c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c8:	4616      	mov	r6, r2
 80068ca:	4698      	mov	r8, r3
 80068cc:	688a      	ldr	r2, [r1, #8]
 80068ce:	690b      	ldr	r3, [r1, #16]
 80068d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068d4:	4293      	cmp	r3, r2
 80068d6:	bfb8      	it	lt
 80068d8:	4613      	movlt	r3, r2
 80068da:	6033      	str	r3, [r6, #0]
 80068dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068e0:	4607      	mov	r7, r0
 80068e2:	460c      	mov	r4, r1
 80068e4:	b10a      	cbz	r2, 80068ea <_printf_common+0x26>
 80068e6:	3301      	adds	r3, #1
 80068e8:	6033      	str	r3, [r6, #0]
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	0699      	lsls	r1, r3, #26
 80068ee:	bf42      	ittt	mi
 80068f0:	6833      	ldrmi	r3, [r6, #0]
 80068f2:	3302      	addmi	r3, #2
 80068f4:	6033      	strmi	r3, [r6, #0]
 80068f6:	6825      	ldr	r5, [r4, #0]
 80068f8:	f015 0506 	ands.w	r5, r5, #6
 80068fc:	d106      	bne.n	800690c <_printf_common+0x48>
 80068fe:	f104 0a19 	add.w	sl, r4, #25
 8006902:	68e3      	ldr	r3, [r4, #12]
 8006904:	6832      	ldr	r2, [r6, #0]
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	42ab      	cmp	r3, r5
 800690a:	dc26      	bgt.n	800695a <_printf_common+0x96>
 800690c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006910:	6822      	ldr	r2, [r4, #0]
 8006912:	3b00      	subs	r3, #0
 8006914:	bf18      	it	ne
 8006916:	2301      	movne	r3, #1
 8006918:	0692      	lsls	r2, r2, #26
 800691a:	d42b      	bmi.n	8006974 <_printf_common+0xb0>
 800691c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006920:	4641      	mov	r1, r8
 8006922:	4638      	mov	r0, r7
 8006924:	47c8      	blx	r9
 8006926:	3001      	adds	r0, #1
 8006928:	d01e      	beq.n	8006968 <_printf_common+0xa4>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	6922      	ldr	r2, [r4, #16]
 800692e:	f003 0306 	and.w	r3, r3, #6
 8006932:	2b04      	cmp	r3, #4
 8006934:	bf02      	ittt	eq
 8006936:	68e5      	ldreq	r5, [r4, #12]
 8006938:	6833      	ldreq	r3, [r6, #0]
 800693a:	1aed      	subeq	r5, r5, r3
 800693c:	68a3      	ldr	r3, [r4, #8]
 800693e:	bf0c      	ite	eq
 8006940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006944:	2500      	movne	r5, #0
 8006946:	4293      	cmp	r3, r2
 8006948:	bfc4      	itt	gt
 800694a:	1a9b      	subgt	r3, r3, r2
 800694c:	18ed      	addgt	r5, r5, r3
 800694e:	2600      	movs	r6, #0
 8006950:	341a      	adds	r4, #26
 8006952:	42b5      	cmp	r5, r6
 8006954:	d11a      	bne.n	800698c <_printf_common+0xc8>
 8006956:	2000      	movs	r0, #0
 8006958:	e008      	b.n	800696c <_printf_common+0xa8>
 800695a:	2301      	movs	r3, #1
 800695c:	4652      	mov	r2, sl
 800695e:	4641      	mov	r1, r8
 8006960:	4638      	mov	r0, r7
 8006962:	47c8      	blx	r9
 8006964:	3001      	adds	r0, #1
 8006966:	d103      	bne.n	8006970 <_printf_common+0xac>
 8006968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800696c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006970:	3501      	adds	r5, #1
 8006972:	e7c6      	b.n	8006902 <_printf_common+0x3e>
 8006974:	18e1      	adds	r1, r4, r3
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	2030      	movs	r0, #48	@ 0x30
 800697a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800697e:	4422      	add	r2, r4
 8006980:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006984:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006988:	3302      	adds	r3, #2
 800698a:	e7c7      	b.n	800691c <_printf_common+0x58>
 800698c:	2301      	movs	r3, #1
 800698e:	4622      	mov	r2, r4
 8006990:	4641      	mov	r1, r8
 8006992:	4638      	mov	r0, r7
 8006994:	47c8      	blx	r9
 8006996:	3001      	adds	r0, #1
 8006998:	d0e6      	beq.n	8006968 <_printf_common+0xa4>
 800699a:	3601      	adds	r6, #1
 800699c:	e7d9      	b.n	8006952 <_printf_common+0x8e>
	...

080069a0 <_printf_i>:
 80069a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	7e0f      	ldrb	r7, [r1, #24]
 80069a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069a8:	2f78      	cmp	r7, #120	@ 0x78
 80069aa:	4691      	mov	r9, r2
 80069ac:	4680      	mov	r8, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	469a      	mov	sl, r3
 80069b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069b6:	d807      	bhi.n	80069c8 <_printf_i+0x28>
 80069b8:	2f62      	cmp	r7, #98	@ 0x62
 80069ba:	d80a      	bhi.n	80069d2 <_printf_i+0x32>
 80069bc:	2f00      	cmp	r7, #0
 80069be:	f000 80d2 	beq.w	8006b66 <_printf_i+0x1c6>
 80069c2:	2f58      	cmp	r7, #88	@ 0x58
 80069c4:	f000 80b9 	beq.w	8006b3a <_printf_i+0x19a>
 80069c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069d0:	e03a      	b.n	8006a48 <_printf_i+0xa8>
 80069d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069d6:	2b15      	cmp	r3, #21
 80069d8:	d8f6      	bhi.n	80069c8 <_printf_i+0x28>
 80069da:	a101      	add	r1, pc, #4	@ (adr r1, 80069e0 <_printf_i+0x40>)
 80069dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069e0:	08006a39 	.word	0x08006a39
 80069e4:	08006a4d 	.word	0x08006a4d
 80069e8:	080069c9 	.word	0x080069c9
 80069ec:	080069c9 	.word	0x080069c9
 80069f0:	080069c9 	.word	0x080069c9
 80069f4:	080069c9 	.word	0x080069c9
 80069f8:	08006a4d 	.word	0x08006a4d
 80069fc:	080069c9 	.word	0x080069c9
 8006a00:	080069c9 	.word	0x080069c9
 8006a04:	080069c9 	.word	0x080069c9
 8006a08:	080069c9 	.word	0x080069c9
 8006a0c:	08006b4d 	.word	0x08006b4d
 8006a10:	08006a77 	.word	0x08006a77
 8006a14:	08006b07 	.word	0x08006b07
 8006a18:	080069c9 	.word	0x080069c9
 8006a1c:	080069c9 	.word	0x080069c9
 8006a20:	08006b6f 	.word	0x08006b6f
 8006a24:	080069c9 	.word	0x080069c9
 8006a28:	08006a77 	.word	0x08006a77
 8006a2c:	080069c9 	.word	0x080069c9
 8006a30:	080069c9 	.word	0x080069c9
 8006a34:	08006b0f 	.word	0x08006b0f
 8006a38:	6833      	ldr	r3, [r6, #0]
 8006a3a:	1d1a      	adds	r2, r3, #4
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6032      	str	r2, [r6, #0]
 8006a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e09d      	b.n	8006b88 <_printf_i+0x1e8>
 8006a4c:	6833      	ldr	r3, [r6, #0]
 8006a4e:	6820      	ldr	r0, [r4, #0]
 8006a50:	1d19      	adds	r1, r3, #4
 8006a52:	6031      	str	r1, [r6, #0]
 8006a54:	0606      	lsls	r6, r0, #24
 8006a56:	d501      	bpl.n	8006a5c <_printf_i+0xbc>
 8006a58:	681d      	ldr	r5, [r3, #0]
 8006a5a:	e003      	b.n	8006a64 <_printf_i+0xc4>
 8006a5c:	0645      	lsls	r5, r0, #25
 8006a5e:	d5fb      	bpl.n	8006a58 <_printf_i+0xb8>
 8006a60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a64:	2d00      	cmp	r5, #0
 8006a66:	da03      	bge.n	8006a70 <_printf_i+0xd0>
 8006a68:	232d      	movs	r3, #45	@ 0x2d
 8006a6a:	426d      	negs	r5, r5
 8006a6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a70:	4859      	ldr	r0, [pc, #356]	@ (8006bd8 <_printf_i+0x238>)
 8006a72:	230a      	movs	r3, #10
 8006a74:	e011      	b.n	8006a9a <_printf_i+0xfa>
 8006a76:	6821      	ldr	r1, [r4, #0]
 8006a78:	6833      	ldr	r3, [r6, #0]
 8006a7a:	0608      	lsls	r0, r1, #24
 8006a7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a80:	d402      	bmi.n	8006a88 <_printf_i+0xe8>
 8006a82:	0649      	lsls	r1, r1, #25
 8006a84:	bf48      	it	mi
 8006a86:	b2ad      	uxthmi	r5, r5
 8006a88:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a8a:	4853      	ldr	r0, [pc, #332]	@ (8006bd8 <_printf_i+0x238>)
 8006a8c:	6033      	str	r3, [r6, #0]
 8006a8e:	bf14      	ite	ne
 8006a90:	230a      	movne	r3, #10
 8006a92:	2308      	moveq	r3, #8
 8006a94:	2100      	movs	r1, #0
 8006a96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a9a:	6866      	ldr	r6, [r4, #4]
 8006a9c:	60a6      	str	r6, [r4, #8]
 8006a9e:	2e00      	cmp	r6, #0
 8006aa0:	bfa2      	ittt	ge
 8006aa2:	6821      	ldrge	r1, [r4, #0]
 8006aa4:	f021 0104 	bicge.w	r1, r1, #4
 8006aa8:	6021      	strge	r1, [r4, #0]
 8006aaa:	b90d      	cbnz	r5, 8006ab0 <_printf_i+0x110>
 8006aac:	2e00      	cmp	r6, #0
 8006aae:	d04b      	beq.n	8006b48 <_printf_i+0x1a8>
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ab6:	fb03 5711 	mls	r7, r3, r1, r5
 8006aba:	5dc7      	ldrb	r7, [r0, r7]
 8006abc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ac0:	462f      	mov	r7, r5
 8006ac2:	42bb      	cmp	r3, r7
 8006ac4:	460d      	mov	r5, r1
 8006ac6:	d9f4      	bls.n	8006ab2 <_printf_i+0x112>
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d10b      	bne.n	8006ae4 <_printf_i+0x144>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	07df      	lsls	r7, r3, #31
 8006ad0:	d508      	bpl.n	8006ae4 <_printf_i+0x144>
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	6861      	ldr	r1, [r4, #4]
 8006ad6:	4299      	cmp	r1, r3
 8006ad8:	bfde      	ittt	le
 8006ada:	2330      	movle	r3, #48	@ 0x30
 8006adc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ae0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006ae4:	1b92      	subs	r2, r2, r6
 8006ae6:	6122      	str	r2, [r4, #16]
 8006ae8:	f8cd a000 	str.w	sl, [sp]
 8006aec:	464b      	mov	r3, r9
 8006aee:	aa03      	add	r2, sp, #12
 8006af0:	4621      	mov	r1, r4
 8006af2:	4640      	mov	r0, r8
 8006af4:	f7ff fee6 	bl	80068c4 <_printf_common>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d14a      	bne.n	8006b92 <_printf_i+0x1f2>
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b00:	b004      	add	sp, #16
 8006b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	f043 0320 	orr.w	r3, r3, #32
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	4833      	ldr	r0, [pc, #204]	@ (8006bdc <_printf_i+0x23c>)
 8006b10:	2778      	movs	r7, #120	@ 0x78
 8006b12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	6831      	ldr	r1, [r6, #0]
 8006b1a:	061f      	lsls	r7, r3, #24
 8006b1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b20:	d402      	bmi.n	8006b28 <_printf_i+0x188>
 8006b22:	065f      	lsls	r7, r3, #25
 8006b24:	bf48      	it	mi
 8006b26:	b2ad      	uxthmi	r5, r5
 8006b28:	6031      	str	r1, [r6, #0]
 8006b2a:	07d9      	lsls	r1, r3, #31
 8006b2c:	bf44      	itt	mi
 8006b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b32:	6023      	strmi	r3, [r4, #0]
 8006b34:	b11d      	cbz	r5, 8006b3e <_printf_i+0x19e>
 8006b36:	2310      	movs	r3, #16
 8006b38:	e7ac      	b.n	8006a94 <_printf_i+0xf4>
 8006b3a:	4827      	ldr	r0, [pc, #156]	@ (8006bd8 <_printf_i+0x238>)
 8006b3c:	e7e9      	b.n	8006b12 <_printf_i+0x172>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	f023 0320 	bic.w	r3, r3, #32
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	e7f6      	b.n	8006b36 <_printf_i+0x196>
 8006b48:	4616      	mov	r6, r2
 8006b4a:	e7bd      	b.n	8006ac8 <_printf_i+0x128>
 8006b4c:	6833      	ldr	r3, [r6, #0]
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	6961      	ldr	r1, [r4, #20]
 8006b52:	1d18      	adds	r0, r3, #4
 8006b54:	6030      	str	r0, [r6, #0]
 8006b56:	062e      	lsls	r6, r5, #24
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	d501      	bpl.n	8006b60 <_printf_i+0x1c0>
 8006b5c:	6019      	str	r1, [r3, #0]
 8006b5e:	e002      	b.n	8006b66 <_printf_i+0x1c6>
 8006b60:	0668      	lsls	r0, r5, #25
 8006b62:	d5fb      	bpl.n	8006b5c <_printf_i+0x1bc>
 8006b64:	8019      	strh	r1, [r3, #0]
 8006b66:	2300      	movs	r3, #0
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	4616      	mov	r6, r2
 8006b6c:	e7bc      	b.n	8006ae8 <_printf_i+0x148>
 8006b6e:	6833      	ldr	r3, [r6, #0]
 8006b70:	1d1a      	adds	r2, r3, #4
 8006b72:	6032      	str	r2, [r6, #0]
 8006b74:	681e      	ldr	r6, [r3, #0]
 8006b76:	6862      	ldr	r2, [r4, #4]
 8006b78:	2100      	movs	r1, #0
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f7f9 fb50 	bl	8000220 <memchr>
 8006b80:	b108      	cbz	r0, 8006b86 <_printf_i+0x1e6>
 8006b82:	1b80      	subs	r0, r0, r6
 8006b84:	6060      	str	r0, [r4, #4]
 8006b86:	6863      	ldr	r3, [r4, #4]
 8006b88:	6123      	str	r3, [r4, #16]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b90:	e7aa      	b.n	8006ae8 <_printf_i+0x148>
 8006b92:	6923      	ldr	r3, [r4, #16]
 8006b94:	4632      	mov	r2, r6
 8006b96:	4649      	mov	r1, r9
 8006b98:	4640      	mov	r0, r8
 8006b9a:	47d0      	blx	sl
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d0ad      	beq.n	8006afc <_printf_i+0x15c>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	079b      	lsls	r3, r3, #30
 8006ba4:	d413      	bmi.n	8006bce <_printf_i+0x22e>
 8006ba6:	68e0      	ldr	r0, [r4, #12]
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	4298      	cmp	r0, r3
 8006bac:	bfb8      	it	lt
 8006bae:	4618      	movlt	r0, r3
 8006bb0:	e7a6      	b.n	8006b00 <_printf_i+0x160>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4632      	mov	r2, r6
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	4640      	mov	r0, r8
 8006bba:	47d0      	blx	sl
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d09d      	beq.n	8006afc <_printf_i+0x15c>
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	68e3      	ldr	r3, [r4, #12]
 8006bc4:	9903      	ldr	r1, [sp, #12]
 8006bc6:	1a5b      	subs	r3, r3, r1
 8006bc8:	42ab      	cmp	r3, r5
 8006bca:	dcf2      	bgt.n	8006bb2 <_printf_i+0x212>
 8006bcc:	e7eb      	b.n	8006ba6 <_printf_i+0x206>
 8006bce:	2500      	movs	r5, #0
 8006bd0:	f104 0619 	add.w	r6, r4, #25
 8006bd4:	e7f5      	b.n	8006bc2 <_printf_i+0x222>
 8006bd6:	bf00      	nop
 8006bd8:	08007821 	.word	0x08007821
 8006bdc:	08007832 	.word	0x08007832

08006be0 <__sflush_r>:
 8006be0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be8:	0716      	lsls	r6, r2, #28
 8006bea:	4605      	mov	r5, r0
 8006bec:	460c      	mov	r4, r1
 8006bee:	d454      	bmi.n	8006c9a <__sflush_r+0xba>
 8006bf0:	684b      	ldr	r3, [r1, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dc02      	bgt.n	8006bfc <__sflush_r+0x1c>
 8006bf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dd48      	ble.n	8006c8e <__sflush_r+0xae>
 8006bfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bfe:	2e00      	cmp	r6, #0
 8006c00:	d045      	beq.n	8006c8e <__sflush_r+0xae>
 8006c02:	2300      	movs	r3, #0
 8006c04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c08:	682f      	ldr	r7, [r5, #0]
 8006c0a:	6a21      	ldr	r1, [r4, #32]
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	d030      	beq.n	8006c72 <__sflush_r+0x92>
 8006c10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	0759      	lsls	r1, r3, #29
 8006c16:	d505      	bpl.n	8006c24 <__sflush_r+0x44>
 8006c18:	6863      	ldr	r3, [r4, #4]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c1e:	b10b      	cbz	r3, 8006c24 <__sflush_r+0x44>
 8006c20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c22:	1ad2      	subs	r2, r2, r3
 8006c24:	2300      	movs	r3, #0
 8006c26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c28:	6a21      	ldr	r1, [r4, #32]
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	47b0      	blx	r6
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	d106      	bne.n	8006c42 <__sflush_r+0x62>
 8006c34:	6829      	ldr	r1, [r5, #0]
 8006c36:	291d      	cmp	r1, #29
 8006c38:	d82b      	bhi.n	8006c92 <__sflush_r+0xb2>
 8006c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006ce4 <__sflush_r+0x104>)
 8006c3c:	410a      	asrs	r2, r1
 8006c3e:	07d6      	lsls	r6, r2, #31
 8006c40:	d427      	bmi.n	8006c92 <__sflush_r+0xb2>
 8006c42:	2200      	movs	r2, #0
 8006c44:	6062      	str	r2, [r4, #4]
 8006c46:	04d9      	lsls	r1, r3, #19
 8006c48:	6922      	ldr	r2, [r4, #16]
 8006c4a:	6022      	str	r2, [r4, #0]
 8006c4c:	d504      	bpl.n	8006c58 <__sflush_r+0x78>
 8006c4e:	1c42      	adds	r2, r0, #1
 8006c50:	d101      	bne.n	8006c56 <__sflush_r+0x76>
 8006c52:	682b      	ldr	r3, [r5, #0]
 8006c54:	b903      	cbnz	r3, 8006c58 <__sflush_r+0x78>
 8006c56:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c5a:	602f      	str	r7, [r5, #0]
 8006c5c:	b1b9      	cbz	r1, 8006c8e <__sflush_r+0xae>
 8006c5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c62:	4299      	cmp	r1, r3
 8006c64:	d002      	beq.n	8006c6c <__sflush_r+0x8c>
 8006c66:	4628      	mov	r0, r5
 8006c68:	f7fe fbd2 	bl	8005410 <_free_r>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c70:	e00d      	b.n	8006c8e <__sflush_r+0xae>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4628      	mov	r0, r5
 8006c76:	47b0      	blx	r6
 8006c78:	4602      	mov	r2, r0
 8006c7a:	1c50      	adds	r0, r2, #1
 8006c7c:	d1c9      	bne.n	8006c12 <__sflush_r+0x32>
 8006c7e:	682b      	ldr	r3, [r5, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0c6      	beq.n	8006c12 <__sflush_r+0x32>
 8006c84:	2b1d      	cmp	r3, #29
 8006c86:	d001      	beq.n	8006c8c <__sflush_r+0xac>
 8006c88:	2b16      	cmp	r3, #22
 8006c8a:	d11e      	bne.n	8006cca <__sflush_r+0xea>
 8006c8c:	602f      	str	r7, [r5, #0]
 8006c8e:	2000      	movs	r0, #0
 8006c90:	e022      	b.n	8006cd8 <__sflush_r+0xf8>
 8006c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c96:	b21b      	sxth	r3, r3
 8006c98:	e01b      	b.n	8006cd2 <__sflush_r+0xf2>
 8006c9a:	690f      	ldr	r7, [r1, #16]
 8006c9c:	2f00      	cmp	r7, #0
 8006c9e:	d0f6      	beq.n	8006c8e <__sflush_r+0xae>
 8006ca0:	0793      	lsls	r3, r2, #30
 8006ca2:	680e      	ldr	r6, [r1, #0]
 8006ca4:	bf08      	it	eq
 8006ca6:	694b      	ldreq	r3, [r1, #20]
 8006ca8:	600f      	str	r7, [r1, #0]
 8006caa:	bf18      	it	ne
 8006cac:	2300      	movne	r3, #0
 8006cae:	eba6 0807 	sub.w	r8, r6, r7
 8006cb2:	608b      	str	r3, [r1, #8]
 8006cb4:	f1b8 0f00 	cmp.w	r8, #0
 8006cb8:	dde9      	ble.n	8006c8e <__sflush_r+0xae>
 8006cba:	6a21      	ldr	r1, [r4, #32]
 8006cbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006cbe:	4643      	mov	r3, r8
 8006cc0:	463a      	mov	r2, r7
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	47b0      	blx	r6
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	dc08      	bgt.n	8006cdc <__sflush_r+0xfc>
 8006cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cd2:	81a3      	strh	r3, [r4, #12]
 8006cd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cdc:	4407      	add	r7, r0
 8006cde:	eba8 0800 	sub.w	r8, r8, r0
 8006ce2:	e7e7      	b.n	8006cb4 <__sflush_r+0xd4>
 8006ce4:	dfbffffe 	.word	0xdfbffffe

08006ce8 <_fflush_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	690b      	ldr	r3, [r1, #16]
 8006cec:	4605      	mov	r5, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	b913      	cbnz	r3, 8006cf8 <_fflush_r+0x10>
 8006cf2:	2500      	movs	r5, #0
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	b118      	cbz	r0, 8006d02 <_fflush_r+0x1a>
 8006cfa:	6a03      	ldr	r3, [r0, #32]
 8006cfc:	b90b      	cbnz	r3, 8006d02 <_fflush_r+0x1a>
 8006cfe:	f7fe fa37 	bl	8005170 <__sinit>
 8006d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0f3      	beq.n	8006cf2 <_fflush_r+0xa>
 8006d0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d0c:	07d0      	lsls	r0, r2, #31
 8006d0e:	d404      	bmi.n	8006d1a <_fflush_r+0x32>
 8006d10:	0599      	lsls	r1, r3, #22
 8006d12:	d402      	bmi.n	8006d1a <_fflush_r+0x32>
 8006d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d16:	f7fe fb62 	bl	80053de <__retarget_lock_acquire_recursive>
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	f7ff ff5f 	bl	8006be0 <__sflush_r>
 8006d22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d24:	07da      	lsls	r2, r3, #31
 8006d26:	4605      	mov	r5, r0
 8006d28:	d4e4      	bmi.n	8006cf4 <_fflush_r+0xc>
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	059b      	lsls	r3, r3, #22
 8006d2e:	d4e1      	bmi.n	8006cf4 <_fflush_r+0xc>
 8006d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d32:	f7fe fb55 	bl	80053e0 <__retarget_lock_release_recursive>
 8006d36:	e7dd      	b.n	8006cf4 <_fflush_r+0xc>

08006d38 <memmove>:
 8006d38:	4288      	cmp	r0, r1
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	eb01 0402 	add.w	r4, r1, r2
 8006d40:	d902      	bls.n	8006d48 <memmove+0x10>
 8006d42:	4284      	cmp	r4, r0
 8006d44:	4623      	mov	r3, r4
 8006d46:	d807      	bhi.n	8006d58 <memmove+0x20>
 8006d48:	1e43      	subs	r3, r0, #1
 8006d4a:	42a1      	cmp	r1, r4
 8006d4c:	d008      	beq.n	8006d60 <memmove+0x28>
 8006d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d56:	e7f8      	b.n	8006d4a <memmove+0x12>
 8006d58:	4402      	add	r2, r0
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	428a      	cmp	r2, r1
 8006d5e:	d100      	bne.n	8006d62 <memmove+0x2a>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d6a:	e7f7      	b.n	8006d5c <memmove+0x24>

08006d6c <_sbrk_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d06      	ldr	r5, [pc, #24]	@ (8006d88 <_sbrk_r+0x1c>)
 8006d70:	2300      	movs	r3, #0
 8006d72:	4604      	mov	r4, r0
 8006d74:	4608      	mov	r0, r1
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	f7fa ffe4 	bl	8001d44 <_sbrk>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_sbrk_r+0x1a>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_sbrk_r+0x1a>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	200005b0 	.word	0x200005b0

08006d8c <__assert_func>:
 8006d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d8e:	4614      	mov	r4, r2
 8006d90:	461a      	mov	r2, r3
 8006d92:	4b09      	ldr	r3, [pc, #36]	@ (8006db8 <__assert_func+0x2c>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4605      	mov	r5, r0
 8006d98:	68d8      	ldr	r0, [r3, #12]
 8006d9a:	b954      	cbnz	r4, 8006db2 <__assert_func+0x26>
 8006d9c:	4b07      	ldr	r3, [pc, #28]	@ (8006dbc <__assert_func+0x30>)
 8006d9e:	461c      	mov	r4, r3
 8006da0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006da4:	9100      	str	r1, [sp, #0]
 8006da6:	462b      	mov	r3, r5
 8006da8:	4905      	ldr	r1, [pc, #20]	@ (8006dc0 <__assert_func+0x34>)
 8006daa:	f000 f857 	bl	8006e5c <fiprintf>
 8006dae:	f000 f867 	bl	8006e80 <abort>
 8006db2:	4b04      	ldr	r3, [pc, #16]	@ (8006dc4 <__assert_func+0x38>)
 8006db4:	e7f4      	b.n	8006da0 <__assert_func+0x14>
 8006db6:	bf00      	nop
 8006db8:	20000184 	.word	0x20000184
 8006dbc:	0800787e 	.word	0x0800787e
 8006dc0:	08007850 	.word	0x08007850
 8006dc4:	08007843 	.word	0x08007843

08006dc8 <_calloc_r>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	fba1 5402 	umull	r5, r4, r1, r2
 8006dce:	b93c      	cbnz	r4, 8006de0 <_calloc_r+0x18>
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	f7fe fec3 	bl	8005b5c <_malloc_r>
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	b928      	cbnz	r0, 8006de6 <_calloc_r+0x1e>
 8006dda:	2600      	movs	r6, #0
 8006ddc:	4630      	mov	r0, r6
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	220c      	movs	r2, #12
 8006de2:	6002      	str	r2, [r0, #0]
 8006de4:	e7f9      	b.n	8006dda <_calloc_r+0x12>
 8006de6:	462a      	mov	r2, r5
 8006de8:	4621      	mov	r1, r4
 8006dea:	f7fe fa5a 	bl	80052a2 <memset>
 8006dee:	e7f5      	b.n	8006ddc <_calloc_r+0x14>

08006df0 <malloc>:
 8006df0:	4b02      	ldr	r3, [pc, #8]	@ (8006dfc <malloc+0xc>)
 8006df2:	4601      	mov	r1, r0
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	f7fe beb1 	b.w	8005b5c <_malloc_r>
 8006dfa:	bf00      	nop
 8006dfc:	20000184 	.word	0x20000184

08006e00 <_realloc_r>:
 8006e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e04:	4680      	mov	r8, r0
 8006e06:	4615      	mov	r5, r2
 8006e08:	460c      	mov	r4, r1
 8006e0a:	b921      	cbnz	r1, 8006e16 <_realloc_r+0x16>
 8006e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e10:	4611      	mov	r1, r2
 8006e12:	f7fe bea3 	b.w	8005b5c <_malloc_r>
 8006e16:	b92a      	cbnz	r2, 8006e24 <_realloc_r+0x24>
 8006e18:	f7fe fafa 	bl	8005410 <_free_r>
 8006e1c:	2400      	movs	r4, #0
 8006e1e:	4620      	mov	r0, r4
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e24:	f000 f833 	bl	8006e8e <_malloc_usable_size_r>
 8006e28:	4285      	cmp	r5, r0
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	d802      	bhi.n	8006e34 <_realloc_r+0x34>
 8006e2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006e32:	d8f4      	bhi.n	8006e1e <_realloc_r+0x1e>
 8006e34:	4629      	mov	r1, r5
 8006e36:	4640      	mov	r0, r8
 8006e38:	f7fe fe90 	bl	8005b5c <_malloc_r>
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d0ec      	beq.n	8006e1c <_realloc_r+0x1c>
 8006e42:	42b5      	cmp	r5, r6
 8006e44:	462a      	mov	r2, r5
 8006e46:	4621      	mov	r1, r4
 8006e48:	bf28      	it	cs
 8006e4a:	4632      	movcs	r2, r6
 8006e4c:	f7fe fac9 	bl	80053e2 <memcpy>
 8006e50:	4621      	mov	r1, r4
 8006e52:	4640      	mov	r0, r8
 8006e54:	f7fe fadc 	bl	8005410 <_free_r>
 8006e58:	463c      	mov	r4, r7
 8006e5a:	e7e0      	b.n	8006e1e <_realloc_r+0x1e>

08006e5c <fiprintf>:
 8006e5c:	b40e      	push	{r1, r2, r3}
 8006e5e:	b503      	push	{r0, r1, lr}
 8006e60:	4601      	mov	r1, r0
 8006e62:	ab03      	add	r3, sp, #12
 8006e64:	4805      	ldr	r0, [pc, #20]	@ (8006e7c <fiprintf+0x20>)
 8006e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e6a:	6800      	ldr	r0, [r0, #0]
 8006e6c:	9301      	str	r3, [sp, #4]
 8006e6e:	f000 f83f 	bl	8006ef0 <_vfiprintf_r>
 8006e72:	b002      	add	sp, #8
 8006e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e78:	b003      	add	sp, #12
 8006e7a:	4770      	bx	lr
 8006e7c:	20000184 	.word	0x20000184

08006e80 <abort>:
 8006e80:	b508      	push	{r3, lr}
 8006e82:	2006      	movs	r0, #6
 8006e84:	f000 fa08 	bl	8007298 <raise>
 8006e88:	2001      	movs	r0, #1
 8006e8a:	f7fa fee3 	bl	8001c54 <_exit>

08006e8e <_malloc_usable_size_r>:
 8006e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e92:	1f18      	subs	r0, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bfbc      	itt	lt
 8006e98:	580b      	ldrlt	r3, [r1, r0]
 8006e9a:	18c0      	addlt	r0, r0, r3
 8006e9c:	4770      	bx	lr

08006e9e <__sfputc_r>:
 8006e9e:	6893      	ldr	r3, [r2, #8]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	b410      	push	{r4}
 8006ea6:	6093      	str	r3, [r2, #8]
 8006ea8:	da08      	bge.n	8006ebc <__sfputc_r+0x1e>
 8006eaa:	6994      	ldr	r4, [r2, #24]
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	db01      	blt.n	8006eb4 <__sfputc_r+0x16>
 8006eb0:	290a      	cmp	r1, #10
 8006eb2:	d103      	bne.n	8006ebc <__sfputc_r+0x1e>
 8006eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eb8:	f000 b932 	b.w	8007120 <__swbuf_r>
 8006ebc:	6813      	ldr	r3, [r2, #0]
 8006ebe:	1c58      	adds	r0, r3, #1
 8006ec0:	6010      	str	r0, [r2, #0]
 8006ec2:	7019      	strb	r1, [r3, #0]
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <__sfputs_r>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	4606      	mov	r6, r0
 8006ed0:	460f      	mov	r7, r1
 8006ed2:	4614      	mov	r4, r2
 8006ed4:	18d5      	adds	r5, r2, r3
 8006ed6:	42ac      	cmp	r4, r5
 8006ed8:	d101      	bne.n	8006ede <__sfputs_r+0x12>
 8006eda:	2000      	movs	r0, #0
 8006edc:	e007      	b.n	8006eee <__sfputs_r+0x22>
 8006ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee2:	463a      	mov	r2, r7
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f7ff ffda 	bl	8006e9e <__sfputc_r>
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	d1f3      	bne.n	8006ed6 <__sfputs_r+0xa>
 8006eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ef0 <_vfiprintf_r>:
 8006ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	460d      	mov	r5, r1
 8006ef6:	b09d      	sub	sp, #116	@ 0x74
 8006ef8:	4614      	mov	r4, r2
 8006efa:	4698      	mov	r8, r3
 8006efc:	4606      	mov	r6, r0
 8006efe:	b118      	cbz	r0, 8006f08 <_vfiprintf_r+0x18>
 8006f00:	6a03      	ldr	r3, [r0, #32]
 8006f02:	b90b      	cbnz	r3, 8006f08 <_vfiprintf_r+0x18>
 8006f04:	f7fe f934 	bl	8005170 <__sinit>
 8006f08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f0a:	07d9      	lsls	r1, r3, #31
 8006f0c:	d405      	bmi.n	8006f1a <_vfiprintf_r+0x2a>
 8006f0e:	89ab      	ldrh	r3, [r5, #12]
 8006f10:	059a      	lsls	r2, r3, #22
 8006f12:	d402      	bmi.n	8006f1a <_vfiprintf_r+0x2a>
 8006f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f16:	f7fe fa62 	bl	80053de <__retarget_lock_acquire_recursive>
 8006f1a:	89ab      	ldrh	r3, [r5, #12]
 8006f1c:	071b      	lsls	r3, r3, #28
 8006f1e:	d501      	bpl.n	8006f24 <_vfiprintf_r+0x34>
 8006f20:	692b      	ldr	r3, [r5, #16]
 8006f22:	b99b      	cbnz	r3, 8006f4c <_vfiprintf_r+0x5c>
 8006f24:	4629      	mov	r1, r5
 8006f26:	4630      	mov	r0, r6
 8006f28:	f000 f938 	bl	800719c <__swsetup_r>
 8006f2c:	b170      	cbz	r0, 8006f4c <_vfiprintf_r+0x5c>
 8006f2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f30:	07dc      	lsls	r4, r3, #31
 8006f32:	d504      	bpl.n	8006f3e <_vfiprintf_r+0x4e>
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f38:	b01d      	add	sp, #116	@ 0x74
 8006f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	0598      	lsls	r0, r3, #22
 8006f42:	d4f7      	bmi.n	8006f34 <_vfiprintf_r+0x44>
 8006f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f46:	f7fe fa4b 	bl	80053e0 <__retarget_lock_release_recursive>
 8006f4a:	e7f3      	b.n	8006f34 <_vfiprintf_r+0x44>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f50:	2320      	movs	r3, #32
 8006f52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f5a:	2330      	movs	r3, #48	@ 0x30
 8006f5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800710c <_vfiprintf_r+0x21c>
 8006f60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f64:	f04f 0901 	mov.w	r9, #1
 8006f68:	4623      	mov	r3, r4
 8006f6a:	469a      	mov	sl, r3
 8006f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f70:	b10a      	cbz	r2, 8006f76 <_vfiprintf_r+0x86>
 8006f72:	2a25      	cmp	r2, #37	@ 0x25
 8006f74:	d1f9      	bne.n	8006f6a <_vfiprintf_r+0x7a>
 8006f76:	ebba 0b04 	subs.w	fp, sl, r4
 8006f7a:	d00b      	beq.n	8006f94 <_vfiprintf_r+0xa4>
 8006f7c:	465b      	mov	r3, fp
 8006f7e:	4622      	mov	r2, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	4630      	mov	r0, r6
 8006f84:	f7ff ffa2 	bl	8006ecc <__sfputs_r>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f000 80a7 	beq.w	80070dc <_vfiprintf_r+0x1ec>
 8006f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f90:	445a      	add	r2, fp
 8006f92:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f94:	f89a 3000 	ldrb.w	r3, [sl]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 809f 	beq.w	80070dc <_vfiprintf_r+0x1ec>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fa8:	f10a 0a01 	add.w	sl, sl, #1
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	9307      	str	r3, [sp, #28]
 8006fb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fb6:	4654      	mov	r4, sl
 8006fb8:	2205      	movs	r2, #5
 8006fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fbe:	4853      	ldr	r0, [pc, #332]	@ (800710c <_vfiprintf_r+0x21c>)
 8006fc0:	f7f9 f92e 	bl	8000220 <memchr>
 8006fc4:	9a04      	ldr	r2, [sp, #16]
 8006fc6:	b9d8      	cbnz	r0, 8007000 <_vfiprintf_r+0x110>
 8006fc8:	06d1      	lsls	r1, r2, #27
 8006fca:	bf44      	itt	mi
 8006fcc:	2320      	movmi	r3, #32
 8006fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fd2:	0713      	lsls	r3, r2, #28
 8006fd4:	bf44      	itt	mi
 8006fd6:	232b      	movmi	r3, #43	@ 0x2b
 8006fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fe2:	d015      	beq.n	8007010 <_vfiprintf_r+0x120>
 8006fe4:	9a07      	ldr	r2, [sp, #28]
 8006fe6:	4654      	mov	r4, sl
 8006fe8:	2000      	movs	r0, #0
 8006fea:	f04f 0c0a 	mov.w	ip, #10
 8006fee:	4621      	mov	r1, r4
 8006ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ff4:	3b30      	subs	r3, #48	@ 0x30
 8006ff6:	2b09      	cmp	r3, #9
 8006ff8:	d94b      	bls.n	8007092 <_vfiprintf_r+0x1a2>
 8006ffa:	b1b0      	cbz	r0, 800702a <_vfiprintf_r+0x13a>
 8006ffc:	9207      	str	r2, [sp, #28]
 8006ffe:	e014      	b.n	800702a <_vfiprintf_r+0x13a>
 8007000:	eba0 0308 	sub.w	r3, r0, r8
 8007004:	fa09 f303 	lsl.w	r3, r9, r3
 8007008:	4313      	orrs	r3, r2
 800700a:	9304      	str	r3, [sp, #16]
 800700c:	46a2      	mov	sl, r4
 800700e:	e7d2      	b.n	8006fb6 <_vfiprintf_r+0xc6>
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	1d19      	adds	r1, r3, #4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	9103      	str	r1, [sp, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	bfbb      	ittet	lt
 800701c:	425b      	neglt	r3, r3
 800701e:	f042 0202 	orrlt.w	r2, r2, #2
 8007022:	9307      	strge	r3, [sp, #28]
 8007024:	9307      	strlt	r3, [sp, #28]
 8007026:	bfb8      	it	lt
 8007028:	9204      	strlt	r2, [sp, #16]
 800702a:	7823      	ldrb	r3, [r4, #0]
 800702c:	2b2e      	cmp	r3, #46	@ 0x2e
 800702e:	d10a      	bne.n	8007046 <_vfiprintf_r+0x156>
 8007030:	7863      	ldrb	r3, [r4, #1]
 8007032:	2b2a      	cmp	r3, #42	@ 0x2a
 8007034:	d132      	bne.n	800709c <_vfiprintf_r+0x1ac>
 8007036:	9b03      	ldr	r3, [sp, #12]
 8007038:	1d1a      	adds	r2, r3, #4
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	9203      	str	r2, [sp, #12]
 800703e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007042:	3402      	adds	r4, #2
 8007044:	9305      	str	r3, [sp, #20]
 8007046:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800711c <_vfiprintf_r+0x22c>
 800704a:	7821      	ldrb	r1, [r4, #0]
 800704c:	2203      	movs	r2, #3
 800704e:	4650      	mov	r0, sl
 8007050:	f7f9 f8e6 	bl	8000220 <memchr>
 8007054:	b138      	cbz	r0, 8007066 <_vfiprintf_r+0x176>
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	eba0 000a 	sub.w	r0, r0, sl
 800705c:	2240      	movs	r2, #64	@ 0x40
 800705e:	4082      	lsls	r2, r0
 8007060:	4313      	orrs	r3, r2
 8007062:	3401      	adds	r4, #1
 8007064:	9304      	str	r3, [sp, #16]
 8007066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706a:	4829      	ldr	r0, [pc, #164]	@ (8007110 <_vfiprintf_r+0x220>)
 800706c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007070:	2206      	movs	r2, #6
 8007072:	f7f9 f8d5 	bl	8000220 <memchr>
 8007076:	2800      	cmp	r0, #0
 8007078:	d03f      	beq.n	80070fa <_vfiprintf_r+0x20a>
 800707a:	4b26      	ldr	r3, [pc, #152]	@ (8007114 <_vfiprintf_r+0x224>)
 800707c:	bb1b      	cbnz	r3, 80070c6 <_vfiprintf_r+0x1d6>
 800707e:	9b03      	ldr	r3, [sp, #12]
 8007080:	3307      	adds	r3, #7
 8007082:	f023 0307 	bic.w	r3, r3, #7
 8007086:	3308      	adds	r3, #8
 8007088:	9303      	str	r3, [sp, #12]
 800708a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708c:	443b      	add	r3, r7
 800708e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007090:	e76a      	b.n	8006f68 <_vfiprintf_r+0x78>
 8007092:	fb0c 3202 	mla	r2, ip, r2, r3
 8007096:	460c      	mov	r4, r1
 8007098:	2001      	movs	r0, #1
 800709a:	e7a8      	b.n	8006fee <_vfiprintf_r+0xfe>
 800709c:	2300      	movs	r3, #0
 800709e:	3401      	adds	r4, #1
 80070a0:	9305      	str	r3, [sp, #20]
 80070a2:	4619      	mov	r1, r3
 80070a4:	f04f 0c0a 	mov.w	ip, #10
 80070a8:	4620      	mov	r0, r4
 80070aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070ae:	3a30      	subs	r2, #48	@ 0x30
 80070b0:	2a09      	cmp	r2, #9
 80070b2:	d903      	bls.n	80070bc <_vfiprintf_r+0x1cc>
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0c6      	beq.n	8007046 <_vfiprintf_r+0x156>
 80070b8:	9105      	str	r1, [sp, #20]
 80070ba:	e7c4      	b.n	8007046 <_vfiprintf_r+0x156>
 80070bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80070c0:	4604      	mov	r4, r0
 80070c2:	2301      	movs	r3, #1
 80070c4:	e7f0      	b.n	80070a8 <_vfiprintf_r+0x1b8>
 80070c6:	ab03      	add	r3, sp, #12
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	462a      	mov	r2, r5
 80070cc:	4b12      	ldr	r3, [pc, #72]	@ (8007118 <_vfiprintf_r+0x228>)
 80070ce:	a904      	add	r1, sp, #16
 80070d0:	4630      	mov	r0, r6
 80070d2:	f3af 8000 	nop.w
 80070d6:	4607      	mov	r7, r0
 80070d8:	1c78      	adds	r0, r7, #1
 80070da:	d1d6      	bne.n	800708a <_vfiprintf_r+0x19a>
 80070dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070de:	07d9      	lsls	r1, r3, #31
 80070e0:	d405      	bmi.n	80070ee <_vfiprintf_r+0x1fe>
 80070e2:	89ab      	ldrh	r3, [r5, #12]
 80070e4:	059a      	lsls	r2, r3, #22
 80070e6:	d402      	bmi.n	80070ee <_vfiprintf_r+0x1fe>
 80070e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070ea:	f7fe f979 	bl	80053e0 <__retarget_lock_release_recursive>
 80070ee:	89ab      	ldrh	r3, [r5, #12]
 80070f0:	065b      	lsls	r3, r3, #25
 80070f2:	f53f af1f 	bmi.w	8006f34 <_vfiprintf_r+0x44>
 80070f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070f8:	e71e      	b.n	8006f38 <_vfiprintf_r+0x48>
 80070fa:	ab03      	add	r3, sp, #12
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	462a      	mov	r2, r5
 8007100:	4b05      	ldr	r3, [pc, #20]	@ (8007118 <_vfiprintf_r+0x228>)
 8007102:	a904      	add	r1, sp, #16
 8007104:	4630      	mov	r0, r6
 8007106:	f7ff fc4b 	bl	80069a0 <_printf_i>
 800710a:	e7e4      	b.n	80070d6 <_vfiprintf_r+0x1e6>
 800710c:	08007810 	.word	0x08007810
 8007110:	0800781a 	.word	0x0800781a
 8007114:	00000000 	.word	0x00000000
 8007118:	08006ecd 	.word	0x08006ecd
 800711c:	08007816 	.word	0x08007816

08007120 <__swbuf_r>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	460e      	mov	r6, r1
 8007124:	4614      	mov	r4, r2
 8007126:	4605      	mov	r5, r0
 8007128:	b118      	cbz	r0, 8007132 <__swbuf_r+0x12>
 800712a:	6a03      	ldr	r3, [r0, #32]
 800712c:	b90b      	cbnz	r3, 8007132 <__swbuf_r+0x12>
 800712e:	f7fe f81f 	bl	8005170 <__sinit>
 8007132:	69a3      	ldr	r3, [r4, #24]
 8007134:	60a3      	str	r3, [r4, #8]
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	071a      	lsls	r2, r3, #28
 800713a:	d501      	bpl.n	8007140 <__swbuf_r+0x20>
 800713c:	6923      	ldr	r3, [r4, #16]
 800713e:	b943      	cbnz	r3, 8007152 <__swbuf_r+0x32>
 8007140:	4621      	mov	r1, r4
 8007142:	4628      	mov	r0, r5
 8007144:	f000 f82a 	bl	800719c <__swsetup_r>
 8007148:	b118      	cbz	r0, 8007152 <__swbuf_r+0x32>
 800714a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800714e:	4638      	mov	r0, r7
 8007150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	6922      	ldr	r2, [r4, #16]
 8007156:	1a98      	subs	r0, r3, r2
 8007158:	6963      	ldr	r3, [r4, #20]
 800715a:	b2f6      	uxtb	r6, r6
 800715c:	4283      	cmp	r3, r0
 800715e:	4637      	mov	r7, r6
 8007160:	dc05      	bgt.n	800716e <__swbuf_r+0x4e>
 8007162:	4621      	mov	r1, r4
 8007164:	4628      	mov	r0, r5
 8007166:	f7ff fdbf 	bl	8006ce8 <_fflush_r>
 800716a:	2800      	cmp	r0, #0
 800716c:	d1ed      	bne.n	800714a <__swbuf_r+0x2a>
 800716e:	68a3      	ldr	r3, [r4, #8]
 8007170:	3b01      	subs	r3, #1
 8007172:	60a3      	str	r3, [r4, #8]
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	6022      	str	r2, [r4, #0]
 800717a:	701e      	strb	r6, [r3, #0]
 800717c:	6962      	ldr	r2, [r4, #20]
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	429a      	cmp	r2, r3
 8007182:	d004      	beq.n	800718e <__swbuf_r+0x6e>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	07db      	lsls	r3, r3, #31
 8007188:	d5e1      	bpl.n	800714e <__swbuf_r+0x2e>
 800718a:	2e0a      	cmp	r6, #10
 800718c:	d1df      	bne.n	800714e <__swbuf_r+0x2e>
 800718e:	4621      	mov	r1, r4
 8007190:	4628      	mov	r0, r5
 8007192:	f7ff fda9 	bl	8006ce8 <_fflush_r>
 8007196:	2800      	cmp	r0, #0
 8007198:	d0d9      	beq.n	800714e <__swbuf_r+0x2e>
 800719a:	e7d6      	b.n	800714a <__swbuf_r+0x2a>

0800719c <__swsetup_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4b29      	ldr	r3, [pc, #164]	@ (8007244 <__swsetup_r+0xa8>)
 80071a0:	4605      	mov	r5, r0
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	460c      	mov	r4, r1
 80071a6:	b118      	cbz	r0, 80071b0 <__swsetup_r+0x14>
 80071a8:	6a03      	ldr	r3, [r0, #32]
 80071aa:	b90b      	cbnz	r3, 80071b0 <__swsetup_r+0x14>
 80071ac:	f7fd ffe0 	bl	8005170 <__sinit>
 80071b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b4:	0719      	lsls	r1, r3, #28
 80071b6:	d422      	bmi.n	80071fe <__swsetup_r+0x62>
 80071b8:	06da      	lsls	r2, r3, #27
 80071ba:	d407      	bmi.n	80071cc <__swsetup_r+0x30>
 80071bc:	2209      	movs	r2, #9
 80071be:	602a      	str	r2, [r5, #0]
 80071c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071ca:	e033      	b.n	8007234 <__swsetup_r+0x98>
 80071cc:	0758      	lsls	r0, r3, #29
 80071ce:	d512      	bpl.n	80071f6 <__swsetup_r+0x5a>
 80071d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071d2:	b141      	cbz	r1, 80071e6 <__swsetup_r+0x4a>
 80071d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071d8:	4299      	cmp	r1, r3
 80071da:	d002      	beq.n	80071e2 <__swsetup_r+0x46>
 80071dc:	4628      	mov	r0, r5
 80071de:	f7fe f917 	bl	8005410 <_free_r>
 80071e2:	2300      	movs	r3, #0
 80071e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071ec:	81a3      	strh	r3, [r4, #12]
 80071ee:	2300      	movs	r3, #0
 80071f0:	6063      	str	r3, [r4, #4]
 80071f2:	6923      	ldr	r3, [r4, #16]
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f043 0308 	orr.w	r3, r3, #8
 80071fc:	81a3      	strh	r3, [r4, #12]
 80071fe:	6923      	ldr	r3, [r4, #16]
 8007200:	b94b      	cbnz	r3, 8007216 <__swsetup_r+0x7a>
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800720c:	d003      	beq.n	8007216 <__swsetup_r+0x7a>
 800720e:	4621      	mov	r1, r4
 8007210:	4628      	mov	r0, r5
 8007212:	f000 f883 	bl	800731c <__smakebuf_r>
 8007216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800721a:	f013 0201 	ands.w	r2, r3, #1
 800721e:	d00a      	beq.n	8007236 <__swsetup_r+0x9a>
 8007220:	2200      	movs	r2, #0
 8007222:	60a2      	str	r2, [r4, #8]
 8007224:	6962      	ldr	r2, [r4, #20]
 8007226:	4252      	negs	r2, r2
 8007228:	61a2      	str	r2, [r4, #24]
 800722a:	6922      	ldr	r2, [r4, #16]
 800722c:	b942      	cbnz	r2, 8007240 <__swsetup_r+0xa4>
 800722e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007232:	d1c5      	bne.n	80071c0 <__swsetup_r+0x24>
 8007234:	bd38      	pop	{r3, r4, r5, pc}
 8007236:	0799      	lsls	r1, r3, #30
 8007238:	bf58      	it	pl
 800723a:	6962      	ldrpl	r2, [r4, #20]
 800723c:	60a2      	str	r2, [r4, #8]
 800723e:	e7f4      	b.n	800722a <__swsetup_r+0x8e>
 8007240:	2000      	movs	r0, #0
 8007242:	e7f7      	b.n	8007234 <__swsetup_r+0x98>
 8007244:	20000184 	.word	0x20000184

08007248 <_raise_r>:
 8007248:	291f      	cmp	r1, #31
 800724a:	b538      	push	{r3, r4, r5, lr}
 800724c:	4605      	mov	r5, r0
 800724e:	460c      	mov	r4, r1
 8007250:	d904      	bls.n	800725c <_raise_r+0x14>
 8007252:	2316      	movs	r3, #22
 8007254:	6003      	str	r3, [r0, #0]
 8007256:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800725e:	b112      	cbz	r2, 8007266 <_raise_r+0x1e>
 8007260:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007264:	b94b      	cbnz	r3, 800727a <_raise_r+0x32>
 8007266:	4628      	mov	r0, r5
 8007268:	f000 f830 	bl	80072cc <_getpid_r>
 800726c:	4622      	mov	r2, r4
 800726e:	4601      	mov	r1, r0
 8007270:	4628      	mov	r0, r5
 8007272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007276:	f000 b817 	b.w	80072a8 <_kill_r>
 800727a:	2b01      	cmp	r3, #1
 800727c:	d00a      	beq.n	8007294 <_raise_r+0x4c>
 800727e:	1c59      	adds	r1, r3, #1
 8007280:	d103      	bne.n	800728a <_raise_r+0x42>
 8007282:	2316      	movs	r3, #22
 8007284:	6003      	str	r3, [r0, #0]
 8007286:	2001      	movs	r0, #1
 8007288:	e7e7      	b.n	800725a <_raise_r+0x12>
 800728a:	2100      	movs	r1, #0
 800728c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007290:	4620      	mov	r0, r4
 8007292:	4798      	blx	r3
 8007294:	2000      	movs	r0, #0
 8007296:	e7e0      	b.n	800725a <_raise_r+0x12>

08007298 <raise>:
 8007298:	4b02      	ldr	r3, [pc, #8]	@ (80072a4 <raise+0xc>)
 800729a:	4601      	mov	r1, r0
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	f7ff bfd3 	b.w	8007248 <_raise_r>
 80072a2:	bf00      	nop
 80072a4:	20000184 	.word	0x20000184

080072a8 <_kill_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4d07      	ldr	r5, [pc, #28]	@ (80072c8 <_kill_r+0x20>)
 80072ac:	2300      	movs	r3, #0
 80072ae:	4604      	mov	r4, r0
 80072b0:	4608      	mov	r0, r1
 80072b2:	4611      	mov	r1, r2
 80072b4:	602b      	str	r3, [r5, #0]
 80072b6:	f7fa fcbd 	bl	8001c34 <_kill>
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	d102      	bne.n	80072c4 <_kill_r+0x1c>
 80072be:	682b      	ldr	r3, [r5, #0]
 80072c0:	b103      	cbz	r3, 80072c4 <_kill_r+0x1c>
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	bd38      	pop	{r3, r4, r5, pc}
 80072c6:	bf00      	nop
 80072c8:	200005b0 	.word	0x200005b0

080072cc <_getpid_r>:
 80072cc:	f7fa bcaa 	b.w	8001c24 <_getpid>

080072d0 <__swhatbuf_r>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	460c      	mov	r4, r1
 80072d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d8:	2900      	cmp	r1, #0
 80072da:	b096      	sub	sp, #88	@ 0x58
 80072dc:	4615      	mov	r5, r2
 80072de:	461e      	mov	r6, r3
 80072e0:	da0d      	bge.n	80072fe <__swhatbuf_r+0x2e>
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072e8:	f04f 0100 	mov.w	r1, #0
 80072ec:	bf14      	ite	ne
 80072ee:	2340      	movne	r3, #64	@ 0x40
 80072f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072f4:	2000      	movs	r0, #0
 80072f6:	6031      	str	r1, [r6, #0]
 80072f8:	602b      	str	r3, [r5, #0]
 80072fa:	b016      	add	sp, #88	@ 0x58
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	466a      	mov	r2, sp
 8007300:	f000 f848 	bl	8007394 <_fstat_r>
 8007304:	2800      	cmp	r0, #0
 8007306:	dbec      	blt.n	80072e2 <__swhatbuf_r+0x12>
 8007308:	9901      	ldr	r1, [sp, #4]
 800730a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800730e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007312:	4259      	negs	r1, r3
 8007314:	4159      	adcs	r1, r3
 8007316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800731a:	e7eb      	b.n	80072f4 <__swhatbuf_r+0x24>

0800731c <__smakebuf_r>:
 800731c:	898b      	ldrh	r3, [r1, #12]
 800731e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007320:	079d      	lsls	r5, r3, #30
 8007322:	4606      	mov	r6, r0
 8007324:	460c      	mov	r4, r1
 8007326:	d507      	bpl.n	8007338 <__smakebuf_r+0x1c>
 8007328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	6123      	str	r3, [r4, #16]
 8007330:	2301      	movs	r3, #1
 8007332:	6163      	str	r3, [r4, #20]
 8007334:	b003      	add	sp, #12
 8007336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007338:	ab01      	add	r3, sp, #4
 800733a:	466a      	mov	r2, sp
 800733c:	f7ff ffc8 	bl	80072d0 <__swhatbuf_r>
 8007340:	9f00      	ldr	r7, [sp, #0]
 8007342:	4605      	mov	r5, r0
 8007344:	4639      	mov	r1, r7
 8007346:	4630      	mov	r0, r6
 8007348:	f7fe fc08 	bl	8005b5c <_malloc_r>
 800734c:	b948      	cbnz	r0, 8007362 <__smakebuf_r+0x46>
 800734e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007352:	059a      	lsls	r2, r3, #22
 8007354:	d4ee      	bmi.n	8007334 <__smakebuf_r+0x18>
 8007356:	f023 0303 	bic.w	r3, r3, #3
 800735a:	f043 0302 	orr.w	r3, r3, #2
 800735e:	81a3      	strh	r3, [r4, #12]
 8007360:	e7e2      	b.n	8007328 <__smakebuf_r+0xc>
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	6020      	str	r0, [r4, #0]
 8007366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	9b01      	ldr	r3, [sp, #4]
 800736e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007372:	b15b      	cbz	r3, 800738c <__smakebuf_r+0x70>
 8007374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007378:	4630      	mov	r0, r6
 800737a:	f000 f81d 	bl	80073b8 <_isatty_r>
 800737e:	b128      	cbz	r0, 800738c <__smakebuf_r+0x70>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	f023 0303 	bic.w	r3, r3, #3
 8007386:	f043 0301 	orr.w	r3, r3, #1
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	89a3      	ldrh	r3, [r4, #12]
 800738e:	431d      	orrs	r5, r3
 8007390:	81a5      	strh	r5, [r4, #12]
 8007392:	e7cf      	b.n	8007334 <__smakebuf_r+0x18>

08007394 <_fstat_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4d07      	ldr	r5, [pc, #28]	@ (80073b4 <_fstat_r+0x20>)
 8007398:	2300      	movs	r3, #0
 800739a:	4604      	mov	r4, r0
 800739c:	4608      	mov	r0, r1
 800739e:	4611      	mov	r1, r2
 80073a0:	602b      	str	r3, [r5, #0]
 80073a2:	f7fa fca7 	bl	8001cf4 <_fstat>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	d102      	bne.n	80073b0 <_fstat_r+0x1c>
 80073aa:	682b      	ldr	r3, [r5, #0]
 80073ac:	b103      	cbz	r3, 80073b0 <_fstat_r+0x1c>
 80073ae:	6023      	str	r3, [r4, #0]
 80073b0:	bd38      	pop	{r3, r4, r5, pc}
 80073b2:	bf00      	nop
 80073b4:	200005b0 	.word	0x200005b0

080073b8 <_isatty_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d06      	ldr	r5, [pc, #24]	@ (80073d4 <_isatty_r+0x1c>)
 80073bc:	2300      	movs	r3, #0
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	602b      	str	r3, [r5, #0]
 80073c4:	f7fa fca6 	bl	8001d14 <_isatty>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_isatty_r+0x1a>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_isatty_r+0x1a>
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	200005b0 	.word	0x200005b0

080073d8 <_init>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr

080073e4 <_fini>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr
