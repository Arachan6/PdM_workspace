#include "stm32f4xx_hal.h"
#include "API_uart.h"

/* Function prototypes */
void SystemClock_Config(void);


int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_UART5_Init();
    MX_USART2_UART_Init();

    uint8_t rxData[100]; // Buffer to receive data from UART5
    uint16_t len; // Length of received data

    while (1)
    {
        // Receive data from UART5
        /*if (HAL_UART_Receive(&huart5, rxData, sizeof(rxData), HAL_MAX_DELAY) == HAL_OK)
        {
            // Send received data to USART2
            if (HAL_UART_Transmit(&huart2, rxData, sizeof(rxData), HAL_MAX_DELAY) != HAL_OK)
            {
                // Transmission error handling
                Error_Handler();
            }
        }*/
    }
}





void SystemClock_Config(void)
{
    // Clock configuration code (usually auto-generated by STM32CubeMX)
}

void Error_Handler(void)
{
    /* Turn on LED or debug LED to indicate error */
    while (1)
    {
        // Loop forever
    }
}






#define NMEA_BUFFER_SIZE 256


uint8_t nmea_buffer[NMEA_BUFFER_SIZE];
uint8_t nmea_index = 0;
uint8_t sentence_started = 0;

void UART5_IRQHandler(void) {
    HAL_UART_IRQHandler(&huart5);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	HAL_UART_Transmit(&huart2, "z", sizeof("z"), HAL_MAX_DELAY);
    if (huart->Instance == UART5) {
        if (rx_char == '$') {
            // Nuevo comienzo de una sentencia NMEA
            nmea_index = 0;
            sentence_started = 1;
        }

        if (sentence_started) {
            nmea_buffer[nmea_index++] = rx_char;

            // Asegurarse de no desbordar el buffer
            if (nmea_index >= NMEA_BUFFER_SIZE) {
                nmea_index = NMEA_BUFFER_SIZE - 1;
            }

            // Comprobar el final de la sentencia NMEA
            if (rx_char == '\n' || rx_char == '\r') {
                nmea_buffer[nmea_index] = '\0'; // Terminar la cadena
                sentence_started = 0;

                // Enviar la sentencia NMEA completa a través de USART2
                HAL_UART_Transmit(&huart2, nmea_buffer, nmea_index, HAL_MAX_DELAY);
            }
        }

        // Continuar recibiendo el siguiente carácter
        HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_char, 1);
    }
}




