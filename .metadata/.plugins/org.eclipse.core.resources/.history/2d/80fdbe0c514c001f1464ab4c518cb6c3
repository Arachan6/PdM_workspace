#include "stm32f4xx_hal.h"

/* Define UART handles */
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* Function prototypes */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_UART5_Init(void);
static void MX_USART2_UART_Init(void);
void Error_Handler(void);

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_UART5_Init();
    MX_USART2_UART_Init();

    uint8_t rxData[100]; // Buffer to receive data from UART5
    uint16_t len; // Length of received data

    HAL_UART_Transmit(&huart2, "aaaabb", sizeof("aaaabb"), HAL_MAX_DELAY);
    while (1)
    {
        // Receive data from UART5
        if (HAL_UART_Receive(&huart5, rxData, sizeof(rxData), HAL_MAX_DELAY) == HAL_OK)
        {
            // Send received data to USART2
            if (HAL_UART_Transmit(&huart2, rxData, sizeof(rxData), HAL_MAX_DELAY) != HAL_OK)
            {
                // Transmission error handling
                Error_Handler();
            }
        }
    }
}

static void MX_UART5_Init(void)
{
    huart5.Instance = UART5;
    huart5.Init.BaudRate = 9600;
    huart5.Init.WordLength = UART_WORDLENGTH_8B;
    huart5.Init.StopBits = UART_STOPBITS_1;
    huart5.Init.Parity = UART_PARITY_NONE;
    huart5.Init.Mode = UART_MODE_TX_RX;
    huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart5) != HAL_OK){Error_Handler();}

    // Habilitar la interrupción UART5
	//HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(UART5_IRQn);
	//HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_char, 1);
}

static void MX_USART2_UART_Init(void)
{
    huart2.Instance = USART2;
    huart2.Init.BaudRate = 9600;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart2) != HAL_OK)
    {
        // Initialization Error
        Error_Handler();
    }
}

static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    /* Enable GPIO Clocks */
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOD_CLK_ENABLE();
    __HAL_RCC_USART2_CLK_ENABLE();
    __HAL_RCC_UART5_CLK_ENABLE();

    /* Configure PC12 for UART5 TX */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* Configure PD2 for UART5 RX */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    /* Configure PD5 for USART2 TX */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    /* Configure PD6 for USART2 RX */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}

void SystemClock_Config(void)
{
    // Clock configuration code (usually auto-generated by STM32CubeMX)
}

void Error_Handler(void)
{
    /* Turn on LED or debug LED to indicate error */
    while (1)
    {
        // Loop forever
    }
}






#define NMEA_BUFFER_SIZE 256

uint8_t rx_char;
uint8_t nmea_buffer[NMEA_BUFFER_SIZE];
uint8_t nmea_index = 0;
uint8_t sentence_started = 0;

void UART5_IRQHandler(void) {
    HAL_UART_IRQHandler(&huart5);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == UART5) {
        if (rx_char == '$') {
            // Nuevo comienzo de una sentencia NMEA
            nmea_index = 0;
            sentence_started = 1;
        }

        if (sentence_started) {
            nmea_buffer[nmea_index++] = rx_char;

            // Asegurarse de no desbordar el buffer
            if (nmea_index >= NMEA_BUFFER_SIZE) {
                nmea_index = NMEA_BUFFER_SIZE - 1;
            }

            // Comprobar el final de la sentencia NMEA
            if (rx_char == '\n' || rx_char == '\r') {
                nmea_buffer[nmea_index] = '\0'; // Terminar la cadena
                sentence_started = 0;

                // Enviar la sentencia NMEA completa a través de USART2
                HAL_UART_Transmit(&huart2, nmea_buffer, nmea_index, HAL_MAX_DELAY);
            }
        }

        // Continuar recibiendo el siguiente carácter
        HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_char, 1);
    }
}




