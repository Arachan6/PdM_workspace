

#define TIMEoN 200
#define TIMEoFF 200
#include "main.h"
#include <stdbool.h>
#include "liquidcrystal_i2c.h"

#define DEVICE_ADDR 0x27 << 1 // Update this address according to your device

I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef UartHandle;

Led_TypeDef LED_secuence[] = {LED1, LED2, LED3};

static void SystemClock_Config(void);
static void Error_Handler(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
    HAL_Init();
    SystemClock_Config();

    MX_GPIO_Init();
    MX_I2C1_Init();

    if (HAL_I2C_IsDeviceReady(&hi2c1, DEVICE_ADDR, 10, HAL_MAX_DELAY) != HAL_OK)
    {
        // Device is not ready
        Error_Handler();
    }

    HD44780_Init(2);

    HD44780_Cursor();
    HD44780_SetCursor(0, 0);
    HD44780_PrintStr("HELLO STM32!!!");
    HD44780_PrintSpecialChar(0);

    HD44780_Display();
    HD44780_SetCursor(0, 1);
    HD44780_PrintStr("BYE STM32!!!");
    HD44780_PrintSpecialChar(1);
    HD44780_Blink();

    BSP_LED_Init(LED1);
    BSP_LED_Init(LED2);
    BSP_LED_Init(LED3);
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);

    const uint8_t MAXLED = sizeof(LED_secuence) / sizeof(Led_TypeDef);
    bool aux = true;

    while (1)
    {
        if (BSP_PB_GetState(BUTTON_USER)) {
            aux = !aux;
        }

        int8_t index;
        if (aux) {
            for (index = 0; index < MAXLED; index++) {
                LED_blink(LED_secuence[index], TIMEoN, TIMEoFF);
            }
        } else {
            for (index = MAXLED - 1; index > -1; index--) {
                LED_blink(LED_secuence[index], TIMEoN, TIMEoFF);
            }
        }
    }
}

void LED_blink(Led_TypeDef led, uint32_t timeOn, uint32_t timeOff)
{
    BSP_LED_On(led);
    HAL_Delay(timeOn);
    BSP_LED_Off(led);
    HAL_Delay(timeOff);
}

void SystemClock_Config(void)
{
    // Clock configuration as before
}

static void MX_I2C1_Init(void)
{
    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000;
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    {
        Error_Handler();
    }
}

static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOH_CLK_ENABLE();
    __HAL_RCC_GPIOD_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();

    __HAL_RCC_I2C1_CLK_ENABLE();

    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

static void Error_Handler(void)
{
    BSP_LED_On(LED2);
    while (1)
    {
    }
}
