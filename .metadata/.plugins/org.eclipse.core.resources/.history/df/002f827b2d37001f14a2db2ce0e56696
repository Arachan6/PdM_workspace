#include "hd44780.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t dpFunction;
uint8_t dpControl;
uint8_t dpMode;
uint8_t dpRows;
uint8_t dpBacklight;

static void SendCommand(uint8_t);
static void ExpanderWrite(uint8_t);
static void DelayUS(uint32_t);

void HD44780_Init(uint8_t rows)
{
  dpRows = rows;
  dpBacklight = LCD_BACKLIGHT;

  dpFunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;

  /* Wait for initialization */
  HAL_Delay(1000);

  /* 4bit Mode */
  ExpanderWrite(0x03 << 4);
  DelayUS(4500);

  ExpanderWrite(0x03 << 4);
  DelayUS(4500);

  ExpanderWrite(0x03 << 4);
  DelayUS(4500);

  ExpanderWrite(0x02 << 4);
  DelayUS(100);

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);

  //dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
  HD44780_Display();
  HD44780_Cursor();

  /* Display Mode */
  //dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  //SendCommand(LCD_ENTRYMODESET | dpMode);
  //DelayUS(4500);

  //HD44780_Home();
}

void HD44780_Display(){
  dpControl |= LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_NoDisplay(){
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Cursor(){
  dpControl |= LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_NoCursor(){
  dpControl &= ~LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Clear(){
  SendCommand(LCD_CLEARDISPLAY);
  DelayUS(2000);
}

static void SendCommand(uint8_t cmd){
	uint8_t highnib = cmd & 0xF0;
	uint8_t lownib = (cmd<<4) & 0xF0;
	ExpanderWrite(highnib);
	ExpanderWrite(lownib);
}

static void ExpanderWrite(uint8_t value)
{
	uint8_t data = value | dpBacklight;
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);

	data = (value | ENABLE) | dpBacklight;
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
	DelayUS(20);

	data = (value & ~ENABLE) | dpBacklight;
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
	DelayUS(20);
}

static void DelayUS(uint32_t us) {
	uint32_t cycles = (SystemCoreClock/1000000L)*us;
	uint32_t start = DWT->CYCCNT;
	volatile uint32_t cnt;

	do{
		cnt = DWT->CYCCNT - start;
	} while(cnt < cycles);
}
