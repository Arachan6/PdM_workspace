
Practica 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e7c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800302c  0800302c  0000402c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800313c  0800313c  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  0800313c  0800313c  0000413c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003144  08003144  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003144  08003144  00004144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003148  08003148  00004148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800314c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000506c  2**0
                  CONTENTS
 10 .bss          000001c0  2000006c  2000006c  0000506c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  0000506c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000089e9  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ba6  00000000  00000000  0000da85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  0000f630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c5  00000000  00000000  0000fde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025df9  00000000  00000000  000103ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c843  00000000  00000000  000361a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e19ca  00000000  00000000  000429e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001243b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021a8  00000000  00000000  001243f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  001265a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003014 	.word	0x08003014

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08003014 	.word	0x08003014

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <debounceFSM_update>:
	buttonState = BUTTON_UP;
	delayInit(&d1, VALID_BUTTON_TIME);
}

/* Verifica el estado del botón y actualiza el estado de la maquina de estados */
void debounceFSM_update(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	switch(buttonState){
 8000594:	4b30      	ldr	r3, [pc, #192]	@ (8000658 <debounceFSM_update+0xc8>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d851      	bhi.n	8000640 <debounceFSM_update+0xb0>
 800059c:	a201      	add	r2, pc, #4	@ (adr r2, 80005a4 <debounceFSM_update+0x14>)
 800059e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a2:	bf00      	nop
 80005a4:	080005b5 	.word	0x080005b5
 80005a8:	08000615 	.word	0x08000615
 80005ac:	080005cf 	.word	0x080005cf
 80005b0:	080005e9 	.word	0x080005e9
		case BUTTON_UP:
			if (BSP_PB_GetState(BUTTON_USER)){
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fa85 	bl	8000ac4 <BSP_PB_GetState>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d042      	beq.n	8000646 <debounceFSM_update+0xb6>
				buttonState = BUTTON_FALLING;
 80005c0:	4b25      	ldr	r3, [pc, #148]	@ (8000658 <debounceFSM_update+0xc8>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]
				delayRead(&d1);
 80005c6:	4825      	ldr	r0, [pc, #148]	@ (800065c <debounceFSM_update+0xcc>)
 80005c8:	f000 f880 	bl	80006cc <delayRead>
			}
			break;
 80005cc:	e03b      	b.n	8000646 <debounceFSM_update+0xb6>
		case BUTTON_DOWN:
			if (!BSP_PB_GetState(BUTTON_USER)){
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fa78 	bl	8000ac4 <BSP_PB_GetState>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d137      	bne.n	800064a <debounceFSM_update+0xba>
				buttonState = BUTTON_RAISING;
 80005da:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <debounceFSM_update+0xc8>)
 80005dc:	2203      	movs	r2, #3
 80005de:	701a      	strb	r2, [r3, #0]
				delayRead(&d1);
 80005e0:	481e      	ldr	r0, [pc, #120]	@ (800065c <debounceFSM_update+0xcc>)
 80005e2:	f000 f873 	bl	80006cc <delayRead>
			}
			break;
 80005e6:	e030      	b.n	800064a <debounceFSM_update+0xba>
		case BUTTON_RAISING:
			if (delayRead(&d1)){
 80005e8:	481c      	ldr	r0, [pc, #112]	@ (800065c <debounceFSM_update+0xcc>)
 80005ea:	f000 f86f 	bl	80006cc <delayRead>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d02c      	beq.n	800064e <debounceFSM_update+0xbe>
				if (!BSP_PB_GetState(BUTTON_USER)){
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fa65 	bl	8000ac4 <BSP_PB_GetState>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d105      	bne.n	800060c <debounceFSM_update+0x7c>
					buttonState = BUTTON_UP;
 8000600:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <debounceFSM_update+0xc8>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
					buttonReleased();
 8000606:	f000 f83d 	bl	8000684 <buttonReleased>
				} else {
					buttonState = BUTTON_DOWN;
				}
			}
			break;
 800060a:	e020      	b.n	800064e <debounceFSM_update+0xbe>
					buttonState = BUTTON_DOWN;
 800060c:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <debounceFSM_update+0xc8>)
 800060e:	2202      	movs	r2, #2
 8000610:	701a      	strb	r2, [r3, #0]
			break;
 8000612:	e01c      	b.n	800064e <debounceFSM_update+0xbe>
		case BUTTON_FALLING:
			if (delayRead(&d1)){
 8000614:	4811      	ldr	r0, [pc, #68]	@ (800065c <debounceFSM_update+0xcc>)
 8000616:	f000 f859 	bl	80006cc <delayRead>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d018      	beq.n	8000652 <debounceFSM_update+0xc2>
				if (BSP_PB_GetState(BUTTON_USER)){
 8000620:	2000      	movs	r0, #0
 8000622:	f000 fa4f 	bl	8000ac4 <BSP_PB_GetState>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d005      	beq.n	8000638 <debounceFSM_update+0xa8>
					buttonState = BUTTON_DOWN;
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <debounceFSM_update+0xc8>)
 800062e:	2202      	movs	r2, #2
 8000630:	701a      	strb	r2, [r3, #0]
					buttonPressed();
 8000632:	f000 f815 	bl	8000660 <buttonPressed>
				} else {
					buttonState = BUTTON_UP;
				}
			}
			break;
 8000636:	e00c      	b.n	8000652 <debounceFSM_update+0xc2>
					buttonState = BUTTON_UP;
 8000638:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <debounceFSM_update+0xc8>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
			break;
 800063e:	e008      	b.n	8000652 <debounceFSM_update+0xc2>
		default:
			Error_Handler();
 8000640:	f002 f81e 	bl	8002680 <Error_Handler>
			break;
 8000644:	e006      	b.n	8000654 <debounceFSM_update+0xc4>
			break;
 8000646:	bf00      	nop
 8000648:	e004      	b.n	8000654 <debounceFSM_update+0xc4>
			break;
 800064a:	bf00      	nop
 800064c:	e002      	b.n	8000654 <debounceFSM_update+0xc4>
			break;
 800064e:	bf00      	nop
 8000650:	e000      	b.n	8000654 <debounceFSM_update+0xc4>
			break;
 8000652:	bf00      	nop
	}
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000089 	.word	0x20000089
 800065c:	2000008c 	.word	0x2000008c

08000660 <buttonPressed>:

/* Prende el LED1 */
void buttonPressed(){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 f989 	bl	800097c <BSP_LED_On>
	buttonPress=true;
 800066a:	4b04      	ldr	r3, [pc, #16]	@ (800067c <buttonPressed+0x1c>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
	uartSendString((uint8_t*)"Flanco descendente detectado\n\r");
 8000670:	4803      	ldr	r0, [pc, #12]	@ (8000680 <buttonPressed+0x20>)
 8000672:	f000 f91d 	bl	80008b0 <uartSendString>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000088 	.word	0x20000088
 8000680:	0800302c 	.word	0x0800302c

08000684 <buttonReleased>:

/* Apaga el LED1 */
void buttonReleased(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 8000688:	2000      	movs	r0, #0
 800068a:	f000 f991 	bl	80009b0 <BSP_LED_Off>
	uartSendString((uint8_t*)"Flanco ascendente detectado\n\r");
 800068e:	4802      	ldr	r0, [pc, #8]	@ (8000698 <buttonReleased+0x14>)
 8000690:	f000 f90e 	bl	80008b0 <uartSendString>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	0800304c 	.word	0x0800304c

0800069c <readKey>:

bool_t readKey(){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
	bool_t rtrn = false;
 80006a2:	2300      	movs	r3, #0
 80006a4:	71fb      	strb	r3, [r7, #7]

	if (buttonPress==true){
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <readKey+0x2c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d004      	beq.n	80006b8 <readKey+0x1c>
		rtrn=true;
 80006ae:	2301      	movs	r3, #1
 80006b0:	71fb      	strb	r3, [r7, #7]
		buttonPress=false;
 80006b2:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <readKey+0x2c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
	}

	return rtrn;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000088 	.word	0x20000088

080006cc <delayRead>:
	delay->running = false;
	delay->startTime = 0;
	delay->duration = duration;
}

bool_t delayRead(delay_t* delay){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

	if(delay == NULL){Error_Handler();}
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d101      	bne.n	80006de <delayRead+0x12>
 80006da:	f001 ffd1 	bl	8002680 <Error_Handler>

	if (delay->running == false){
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a1b      	ldrb	r3, [r3, #8]
 80006e2:	f083 0301 	eor.w	r3, r3, #1
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d009      	beq.n	8000700 <delayRead+0x34>
		delay->startTime = HAL_GetTick();
 80006ec:	f000 fafe 	bl	8000cec <HAL_GetTick>
 80006f0:	4602      	mov	r2, r0
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	721a      	strb	r2, [r3, #8]
		return false;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e00f      	b.n	8000720 <delayRead+0x54>
	}

	if ((HAL_GetTick() - delay->startTime) >= delay->duration){
 8000700:	f000 faf4 	bl	8000cec <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	1ad2      	subs	r2, r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	429a      	cmp	r2, r3
 8000712:	d304      	bcc.n	800071e <delayRead+0x52>
		delay->running = false;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	721a      	strb	r2, [r3, #8]
		return true;
 800071a:	2301      	movs	r3, #1
 800071c:	e000      	b.n	8000720 <delayRead+0x54>
	}

	return false;
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <delayWrite>:

void delayWrite(delay_t* delay, tick_t  duration){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]

	if(delay == NULL){Error_Handler();}
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d101      	bne.n	800073c <delayWrite+0x14>
 8000738:	f001 ffa2 	bl	8002680 <Error_Handler>

	delay->duration = duration;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	605a      	str	r2, [r3, #4]
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <uartInit>:

/**
 * @brief Initialize uart peripheral
 * @return true if successful, false otherwise.
 */
bool_t uartInit(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	@ 0x30
 8000750:	af00      	add	r7, sp, #0
	bool_t rtrn=true;
 8000752:	2301      	movs	r3, #1
 8000754:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	char baudRate[10]={};
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
 800075c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	809a      	strh	r2, [r3, #4]
	char wordLength[10]={};
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	809a      	strh	r2, [r3, #4]
	char stopBits[10]={};
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	809a      	strh	r2, [r3, #4]
	char parityBits[10]={};
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	809a      	strh	r2, [r3, #4]

	UartHandle.Instance        = USARTx;
 800078e:	4b3e      	ldr	r3, [pc, #248]	@ (8000888 <uartInit+0x13c>)
 8000790:	4a3e      	ldr	r2, [pc, #248]	@ (800088c <uartInit+0x140>)
 8000792:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 9600;
 8000794:	4b3c      	ldr	r3, [pc, #240]	@ (8000888 <uartInit+0x13c>)
 8000796:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800079a:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800079c:	4b3a      	ldr	r3, [pc, #232]	@ (8000888 <uartInit+0x13c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80007a2:	4b39      	ldr	r3, [pc, #228]	@ (8000888 <uartInit+0x13c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80007a8:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <uartInit+0x13c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80007ae:	4b36      	ldr	r3, [pc, #216]	@ (8000888 <uartInit+0x13c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80007b4:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <uartInit+0x13c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ba:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <uartInit+0x13c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK){rtrn=false;}
 80007c0:	4831      	ldr	r0, [pc, #196]	@ (8000888 <uartInit+0x13c>)
 80007c2:	f001 faeb 	bl	8001d9c <HAL_UART_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <uartInit+0x86>
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	// Con sprintf convierto integer a string
	// Quiero por ej baudRate = ['9','6','0','0',...]
	sprintf(baudRate, "%d", (int)UartHandle.Init.BaudRate);
 80007d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <uartInit+0x13c>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	461a      	mov	r2, r3
 80007d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007dc:	492c      	ldr	r1, [pc, #176]	@ (8000890 <uartInit+0x144>)
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 ff80 	bl	80026e4 <siprintf>
	sprintf(wordLength, "%d",(int)UartHandle.Init.WordLength);
 80007e4:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <uartInit+0x13c>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	461a      	mov	r2, r3
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	4928      	ldr	r1, [pc, #160]	@ (8000890 <uartInit+0x144>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 ff77 	bl	80026e4 <siprintf>
	sprintf(stopBits, "%d",(int)UartHandle.Init.StopBits);
 80007f6:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <uartInit+0x13c>)
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	461a      	mov	r2, r3
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	4923      	ldr	r1, [pc, #140]	@ (8000890 <uartInit+0x144>)
 8000802:	4618      	mov	r0, r3
 8000804:	f001 ff6e 	bl	80026e4 <siprintf>
	sprintf(parityBits, "%d",(int)UartHandle.Init.Parity);
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <uartInit+0x13c>)
 800080a:	691b      	ldr	r3, [r3, #16]
 800080c:	461a      	mov	r2, r3
 800080e:	463b      	mov	r3, r7
 8000810:	491f      	ldr	r1, [pc, #124]	@ (8000890 <uartInit+0x144>)
 8000812:	4618      	mov	r0, r3
 8000814:	f001 ff66 	bl	80026e4 <siprintf>

	// La funcion uartSendString recibe un puntero a uint
	// Si le paso un string directamente es un puntero a int porque un char es un int entre -127 y 127
	// Sin el casteo tira warning porque la conversion de signed a unsigned da cualquier cosa si convierte un negativo
	uartSendString((uint8_t*)"Uart Inicializada Correctamente\n\r");
 8000818:	481e      	ldr	r0, [pc, #120]	@ (8000894 <uartInit+0x148>)
 800081a:	f000 f849 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)"Parametros Configurados:\n\r");
 800081e:	481e      	ldr	r0, [pc, #120]	@ (8000898 <uartInit+0x14c>)
 8000820:	f000 f846 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)"Baud rate: ");
 8000824:	481d      	ldr	r0, [pc, #116]	@ (800089c <uartInit+0x150>)
 8000826:	f000 f843 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)baudRate);
 800082a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f83e 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)"\n\r");
 8000834:	481a      	ldr	r0, [pc, #104]	@ (80008a0 <uartInit+0x154>)
 8000836:	f000 f83b 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)"Word Length: ");
 800083a:	481a      	ldr	r0, [pc, #104]	@ (80008a4 <uartInit+0x158>)
 800083c:	f000 f838 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)wordLength);
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f833 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)"\n\r");
 800084a:	4815      	ldr	r0, [pc, #84]	@ (80008a0 <uartInit+0x154>)
 800084c:	f000 f830 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)"Stop Bits: ");
 8000850:	4815      	ldr	r0, [pc, #84]	@ (80008a8 <uartInit+0x15c>)
 8000852:	f000 f82d 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)stopBits);
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f828 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)"\n\r");
 8000860:	480f      	ldr	r0, [pc, #60]	@ (80008a0 <uartInit+0x154>)
 8000862:	f000 f825 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)"Parity: ");
 8000866:	4811      	ldr	r0, [pc, #68]	@ (80008ac <uartInit+0x160>)
 8000868:	f000 f822 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)parityBits);
 800086c:	463b      	mov	r3, r7
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f81e 	bl	80008b0 <uartSendString>
	uartSendString((uint8_t*)"\n\r");
 8000874:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <uartInit+0x154>)
 8000876:	f000 f81b 	bl	80008b0 <uartSendString>

	return rtrn;
 800087a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800087e:	4618      	mov	r0, r3
 8000880:	3730      	adds	r7, #48	@ 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000098 	.word	0x20000098
 800088c:	40004800 	.word	0x40004800
 8000890:	0800306c 	.word	0x0800306c
 8000894:	08003070 	.word	0x08003070
 8000898:	08003094 	.word	0x08003094
 800089c:	080030b0 	.word	0x080030b0
 80008a0:	080030bc 	.word	0x080030bc
 80008a4:	080030c0 	.word	0x080030c0
 80008a8:	080030d0 	.word	0x080030d0
 80008ac:	080030dc 	.word	0x080030dc

080008b0 <uartSendString>:

/**
 * @brief send a string through initialized uart peripheral.
 * @param pointer to bytes sequence.
 */
void uartSendString(uint8_t * pstring){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UartHandle,(uint8_t*) pstring, strlen(pstring), HAL_MAX_TIMEOUT);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff fc99 	bl	80001f0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <uartSendString+0x28>)
 80008ca:	f001 fab4 	bl	8001e36 <HAL_UART_Transmit>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000098 	.word	0x20000098

080008dc <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	@ 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10e      	bne.n	800090a <BSP_LED_Init+0x2e>
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <BSP_LED_Init+0x94>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000970 <BSP_LED_Init+0x94>)
 80008f6:	f043 0302 	orr.w	r3, r3, #2
 80008fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <BSP_LED_Init+0x94>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	e00d      	b.n	8000926 <BSP_LED_Init+0x4a>
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <BSP_LED_Init+0x94>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <BSP_LED_Init+0x94>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <BSP_LED_Init+0x94>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	4a12      	ldr	r2, [pc, #72]	@ (8000974 <BSP_LED_Init+0x98>)
 800092a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4a0e      	ldr	r2, [pc, #56]	@ (8000978 <BSP_LED_Init+0x9c>)
 8000940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000944:	f107 0214 	add.w	r2, r7, #20
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f000 faec 	bl	8000f28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4a09      	ldr	r2, [pc, #36]	@ (8000978 <BSP_LED_Init+0x9c>)
 8000954:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4a06      	ldr	r2, [pc, #24]	@ (8000974 <BSP_LED_Init+0x98>)
 800095c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000960:	2200      	movs	r2, #0
 8000962:	4619      	mov	r1, r3
 8000964:	f000 fca4 	bl	80012b0 <HAL_GPIO_WritePin>
}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	@ 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	080030e8 	.word	0x080030e8
 8000978:	20000000 	.word	0x20000000

0800097c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <BSP_LED_On+0x2c>)
 800098a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	4a06      	ldr	r2, [pc, #24]	@ (80009ac <BSP_LED_On+0x30>)
 8000992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000996:	2201      	movs	r2, #1
 8000998:	4619      	mov	r1, r3
 800099a:	f000 fc89 	bl	80012b0 <HAL_GPIO_WritePin>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000000 	.word	0x20000000
 80009ac:	080030e8 	.word	0x080030e8

080009b0 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4a07      	ldr	r2, [pc, #28]	@ (80009dc <BSP_LED_Off+0x2c>)
 80009be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a06      	ldr	r2, [pc, #24]	@ (80009e0 <BSP_LED_Off+0x30>)
 80009c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	f000 fc6f 	bl	80012b0 <HAL_GPIO_WritePin>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000000 	.word	0x20000000
 80009e0:	080030e8 	.word	0x080030e8

080009e4 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <BSP_LED_Toggle+0x2c>)
 80009f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	4906      	ldr	r1, [pc, #24]	@ (8000a14 <BSP_LED_Toggle+0x30>)
 80009fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009fe:	4619      	mov	r1, r3
 8000a00:	4610      	mov	r0, r2
 8000a02:	f000 fc6e 	bl	80012e2 <HAL_GPIO_TogglePin>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000000 	.word	0x20000000
 8000a14:	080030e8 	.word	0x080030e8

08000a18 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	460a      	mov	r2, r1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	4b23      	ldr	r3, [pc, #140]	@ (8000abc <BSP_PB_Init+0xa4>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a30:	4a22      	ldr	r2, [pc, #136]	@ (8000abc <BSP_PB_Init+0xa4>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a38:	4b20      	ldr	r3, [pc, #128]	@ (8000abc <BSP_PB_Init+0xa4>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000a44:	79bb      	ldrb	r3, [r7, #6]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d112      	bne.n	8000a70 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a54:	2302      	movs	r3, #2
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	4a18      	ldr	r2, [pc, #96]	@ (8000ac0 <BSP_PB_Init+0xa8>)
 8000a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a64:	f107 020c 	add.w	r2, r7, #12
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fa5c 	bl	8000f28 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d11d      	bne.n	8000ab2 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000a80:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a84:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <BSP_PB_Init+0xa8>)
 8000a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8e:	f107 020c 	add.w	r2, r7, #12
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fa47 	bl	8000f28 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000a9a:	2328      	movs	r3, #40	@ 0x28
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fa09 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000aa8:	2328      	movs	r3, #40	@ 0x28
 8000aaa:	b25b      	sxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fa20 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	2000000c 	.word	0x2000000c

08000ac4 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4a06      	ldr	r2, [pc, #24]	@ (8000aec <BSP_PB_GetState+0x28>)
 8000ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fbcf 	bl	8001280 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000000c 	.word	0x2000000c

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <SystemInit+0x60>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a15      	ldr	r2, [pc, #84]	@ (8000b50 <SystemInit+0x60>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <SystemInit+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <SystemInit+0x64>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b10:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <SystemInit+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <SystemInit+0x64>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <SystemInit+0x64>)
 8000b1c:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <SystemInit+0x64>)
 8000b28:	4a0b      	ldr	r2, [pc, #44]	@ (8000b58 <SystemInit+0x68>)
 8000b2a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <SystemInit+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <SystemInit+0x64>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <SystemInit+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b3e:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <SystemInit+0x60>)
 8000b40:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b44:	609a      	str	r2, [r3, #8]
#endif
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00
 8000b54:	40023800 	.word	0x40023800
 8000b58:	24003010 	.word	0x24003010

08000b5c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b6e:	bf00      	nop
 8000b70:	e7fd      	b.n	8000b6e <HardFault_Handler+0x4>

08000b72 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b76:	bf00      	nop
 8000b78:	e7fd      	b.n	8000b76 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b7e:	bf00      	nop
 8000b80:	e7fd      	b.n	8000b7e <BusFault_Handler+0x4>

08000b82 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b86:	bf00      	nop
 8000b88:	e7fd      	b.n	8000b86 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000bb8:	f000 f884 	bl	8000cc4 <HAL_IncTick>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	@ (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f001 fd98 	bl	8002724 <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20030000 	.word	0x20030000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	200000dc 	.word	0x200000dc
 8000c28:	20000230 	.word	0x20000230

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <HAL_Init+0x34>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <HAL_Init+0x34>)
 8000c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3a:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <HAL_Init+0x34>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <HAL_Init+0x34>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f92b 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	200f      	movs	r0, #15
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f000 fbb2 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023c00 	.word	0x40023c00

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f943 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ca0:	f000 f90b 	bl	8000eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	@ (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000010 	.word	0x20000010
 8000cbc:	20000018 	.word	0x20000018
 8000cc0:	20000014 	.word	0x20000014

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000018 	.word	0x20000018
 8000ce8:	200000e0 	.word	0x200000e0

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200000e0 	.word	0x200000e0

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4907      	ldr	r1, [pc, #28]	@ (8000da0 <__NVIC_EnableIRQ+0x38>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	@ (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	@ (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	@ 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	@ 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff29 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff3e 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff8e 	bl	8000df8 <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5d 	bl	8000da4 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff31 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffa2 	bl	8000e60 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
 8000f42:	e177      	b.n	8001234 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f44:	2201      	movs	r2, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	f040 8166 	bne.w	800122e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d005      	beq.n	8000f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d130      	bne.n	8000fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	091b      	lsrs	r3, r3, #4
 8000fc6:	f003 0201 	and.w	r2, r3, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d017      	beq.n	8001018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d123      	bne.n	800106c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	220f      	movs	r2, #15
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3208      	adds	r2, #8
 8001066:	69b9      	ldr	r1, [r7, #24]
 8001068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0203 	and.w	r2, r3, #3
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 80c0 	beq.w	800122e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b66      	ldr	r3, [pc, #408]	@ (800124c <HAL_GPIO_Init+0x324>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	4a65      	ldr	r2, [pc, #404]	@ (800124c <HAL_GPIO_Init+0x324>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010be:	4b63      	ldr	r3, [pc, #396]	@ (800124c <HAL_GPIO_Init+0x324>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ca:	4a61      	ldr	r2, [pc, #388]	@ (8001250 <HAL_GPIO_Init+0x328>)
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a58      	ldr	r2, [pc, #352]	@ (8001254 <HAL_GPIO_Init+0x32c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d037      	beq.n	8001166 <HAL_GPIO_Init+0x23e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a57      	ldr	r2, [pc, #348]	@ (8001258 <HAL_GPIO_Init+0x330>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d031      	beq.n	8001162 <HAL_GPIO_Init+0x23a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a56      	ldr	r2, [pc, #344]	@ (800125c <HAL_GPIO_Init+0x334>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d02b      	beq.n	800115e <HAL_GPIO_Init+0x236>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a55      	ldr	r2, [pc, #340]	@ (8001260 <HAL_GPIO_Init+0x338>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d025      	beq.n	800115a <HAL_GPIO_Init+0x232>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a54      	ldr	r2, [pc, #336]	@ (8001264 <HAL_GPIO_Init+0x33c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d01f      	beq.n	8001156 <HAL_GPIO_Init+0x22e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a53      	ldr	r2, [pc, #332]	@ (8001268 <HAL_GPIO_Init+0x340>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d019      	beq.n	8001152 <HAL_GPIO_Init+0x22a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a52      	ldr	r2, [pc, #328]	@ (800126c <HAL_GPIO_Init+0x344>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x226>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a51      	ldr	r2, [pc, #324]	@ (8001270 <HAL_GPIO_Init+0x348>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x222>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a50      	ldr	r2, [pc, #320]	@ (8001274 <HAL_GPIO_Init+0x34c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x21e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4f      	ldr	r2, [pc, #316]	@ (8001278 <HAL_GPIO_Init+0x350>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x21a>
 800113e:	2309      	movs	r3, #9
 8001140:	e012      	b.n	8001168 <HAL_GPIO_Init+0x240>
 8001142:	230a      	movs	r3, #10
 8001144:	e010      	b.n	8001168 <HAL_GPIO_Init+0x240>
 8001146:	2308      	movs	r3, #8
 8001148:	e00e      	b.n	8001168 <HAL_GPIO_Init+0x240>
 800114a:	2307      	movs	r3, #7
 800114c:	e00c      	b.n	8001168 <HAL_GPIO_Init+0x240>
 800114e:	2306      	movs	r3, #6
 8001150:	e00a      	b.n	8001168 <HAL_GPIO_Init+0x240>
 8001152:	2305      	movs	r3, #5
 8001154:	e008      	b.n	8001168 <HAL_GPIO_Init+0x240>
 8001156:	2304      	movs	r3, #4
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x240>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x240>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x240>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x240>
 8001166:	2300      	movs	r3, #0
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	@ (8001250 <HAL_GPIO_Init+0x328>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001186:	4b3d      	ldr	r3, [pc, #244]	@ (800127c <HAL_GPIO_Init+0x354>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011aa:	4a34      	ldr	r2, [pc, #208]	@ (800127c <HAL_GPIO_Init+0x354>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011b0:	4b32      	ldr	r3, [pc, #200]	@ (800127c <HAL_GPIO_Init+0x354>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d4:	4a29      	ldr	r2, [pc, #164]	@ (800127c <HAL_GPIO_Init+0x354>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011da:	4b28      	ldr	r3, [pc, #160]	@ (800127c <HAL_GPIO_Init+0x354>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fe:	4a1f      	ldr	r2, [pc, #124]	@ (800127c <HAL_GPIO_Init+0x354>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001204:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <HAL_GPIO_Init+0x354>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001228:	4a14      	ldr	r2, [pc, #80]	@ (800127c <HAL_GPIO_Init+0x354>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	f67f ae84 	bls.w	8000f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40013800 	.word	0x40013800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40021400 	.word	0x40021400
 800126c:	40021800 	.word	0x40021800
 8001270:	40021c00 	.word	0x40021c00
 8001274:	40022000 	.word	0x40022000
 8001278:	40022400 	.word	0x40022400
 800127c:	40013c00 	.word	0x40013c00

08001280 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	e001      	b.n	80012a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b085      	sub	sp, #20
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f4:	887a      	ldrh	r2, [r7, #2]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4013      	ands	r3, r2
 80012fa:	041a      	lsls	r2, r3, #16
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43d9      	mvns	r1, r3
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	400b      	ands	r3, r1
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <HAL_UART_MspInit+0x9c>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001328:	4a22      	ldr	r2, [pc, #136]	@ (80013b4 <HAL_UART_MspInit+0x9c>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001330:	4b20      	ldr	r3, [pc, #128]	@ (80013b4 <HAL_UART_MspInit+0x9c>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <HAL_UART_MspInit+0x9c>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	4a1b      	ldr	r2, [pc, #108]	@ (80013b4 <HAL_UART_MspInit+0x9c>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6313      	str	r3, [r2, #48]	@ 0x30
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <HAL_UART_MspInit+0x9c>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_UART_MspInit+0x9c>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	4a14      	ldr	r2, [pc, #80]	@ (80013b4 <HAL_UART_MspInit+0x9c>)
 8001362:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001366:	6413      	str	r3, [r2, #64]	@ 0x40
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <HAL_UART_MspInit+0x9c>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800137e:	2301      	movs	r3, #1
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001386:	2307      	movs	r3, #7
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <HAL_UART_MspInit+0xa0>)
 8001392:	f7ff fdc9 	bl	8000f28 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001396:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800139c:	2307      	movs	r3, #7
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <HAL_UART_MspInit+0xa0>)
 80013a8:	f7ff fdbe 	bl	8000f28 <HAL_GPIO_Init>
}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	@ 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020c00 	.word	0x40020c00

080013bc <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <HAL_PWREx_EnableOverDrive+0x90>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	4a1f      	ldr	r2, [pc, #124]	@ (800145c <HAL_PWREx_EnableOverDrive+0x90>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e6:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <HAL_PWREx_EnableOverDrive+0x90>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <HAL_PWREx_EnableOverDrive+0x94>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f8:	f7ff fc78 	bl	8000cec <HAL_GetTick>
 80013fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013fe:	e009      	b.n	8001414 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001400:	f7ff fc74 	bl	8000cec <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800140e:	d901      	bls.n	8001414 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e01f      	b.n	8001454 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <HAL_PWREx_EnableOverDrive+0x98>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001420:	d1ee      	bne.n	8001400 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001428:	f7ff fc60 	bl	8000cec <HAL_GetTick>
 800142c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800142e:	e009      	b.n	8001444 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001430:	f7ff fc5c 	bl	8000cec <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800143e:	d901      	bls.n	8001444 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e007      	b.n	8001454 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <HAL_PWREx_EnableOverDrive+0x98>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001450:	d1ee      	bne.n	8001430 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	420e0040 	.word	0x420e0040
 8001464:	40007000 	.word	0x40007000
 8001468:	420e0044 	.word	0x420e0044

0800146c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e267      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d075      	beq.n	8001576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148a:	4b88      	ldr	r3, [pc, #544]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b04      	cmp	r3, #4
 8001494:	d00c      	beq.n	80014b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001496:	4b85      	ldr	r3, [pc, #532]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d112      	bne.n	80014c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a2:	4b82      	ldr	r3, [pc, #520]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014ae:	d10b      	bne.n	80014c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	4b7e      	ldr	r3, [pc, #504]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d05b      	beq.n	8001574 <HAL_RCC_OscConfig+0x108>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d157      	bne.n	8001574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e242      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d0:	d106      	bne.n	80014e0 <HAL_RCC_OscConfig+0x74>
 80014d2:	4b76      	ldr	r3, [pc, #472]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a75      	ldr	r2, [pc, #468]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e01d      	b.n	800151c <HAL_RCC_OscConfig+0xb0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x98>
 80014ea:	4b70      	ldr	r3, [pc, #448]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6f      	ldr	r2, [pc, #444]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	4b6d      	ldr	r3, [pc, #436]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a6c      	ldr	r2, [pc, #432]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e00b      	b.n	800151c <HAL_RCC_OscConfig+0xb0>
 8001504:	4b69      	ldr	r3, [pc, #420]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a68      	ldr	r2, [pc, #416]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 800150a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b66      	ldr	r3, [pc, #408]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a65      	ldr	r2, [pc, #404]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800151a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fbe2 	bl	8000cec <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff fbde 	bl	8000cec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b64      	cmp	r3, #100	@ 0x64
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e207      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	4b5b      	ldr	r3, [pc, #364]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0xc0>
 800154a:	e014      	b.n	8001576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fbce 	bl	8000cec <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff fbca 	bl	8000cec <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	@ 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e1f3      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001566:	4b51      	ldr	r3, [pc, #324]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0xe8>
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d063      	beq.n	800164a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001582:	4b4a      	ldr	r3, [pc, #296]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00b      	beq.n	80015a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158e:	4b47      	ldr	r3, [pc, #284]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001596:	2b08      	cmp	r3, #8
 8001598:	d11c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159a:	4b44      	ldr	r3, [pc, #272]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d116      	bne.n	80015d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	4b41      	ldr	r3, [pc, #260]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <HAL_RCC_OscConfig+0x152>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d001      	beq.n	80015be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e1c7      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015be:	4b3b      	ldr	r3, [pc, #236]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4937      	ldr	r1, [pc, #220]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d2:	e03a      	b.n	800164a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d020      	beq.n	800161e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015dc:	4b34      	ldr	r3, [pc, #208]	@ (80016b0 <HAL_RCC_OscConfig+0x244>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb83 	bl	8000cec <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ea:	f7ff fb7f 	bl	8000cec <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e1a8      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fc:	4b2b      	ldr	r3, [pc, #172]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001608:	4b28      	ldr	r3, [pc, #160]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4925      	ldr	r1, [pc, #148]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
 800161c:	e015      	b.n	800164a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161e:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <HAL_RCC_OscConfig+0x244>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fb62 	bl	8000cec <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162c:	f7ff fb5e 	bl	8000cec <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e187      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d036      	beq.n	80016c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d016      	beq.n	800168c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_RCC_OscConfig+0x248>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001664:	f7ff fb42 	bl	8000cec <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166c:	f7ff fb3e 	bl	8000cec <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e167      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x200>
 800168a:	e01b      	b.n	80016c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_RCC_OscConfig+0x248>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001692:	f7ff fb2b 	bl	8000cec <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001698:	e00e      	b.n	80016b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169a:	f7ff fb27 	bl	8000cec <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d907      	bls.n	80016b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e150      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
 80016ac:	40023800 	.word	0x40023800
 80016b0:	42470000 	.word	0x42470000
 80016b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b8:	4b88      	ldr	r3, [pc, #544]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 80016ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ea      	bne.n	800169a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8097 	beq.w	8001800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d6:	4b81      	ldr	r3, [pc, #516]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10f      	bne.n	8001702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b7d      	ldr	r3, [pc, #500]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a7c      	ldr	r2, [pc, #496]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f2:	4b7a      	ldr	r3, [pc, #488]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001702:	4b77      	ldr	r3, [pc, #476]	@ (80018e0 <HAL_RCC_OscConfig+0x474>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d118      	bne.n	8001740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170e:	4b74      	ldr	r3, [pc, #464]	@ (80018e0 <HAL_RCC_OscConfig+0x474>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a73      	ldr	r2, [pc, #460]	@ (80018e0 <HAL_RCC_OscConfig+0x474>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171a:	f7ff fae7 	bl	8000cec <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7ff fae3 	bl	8000cec <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e10c      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b6a      	ldr	r3, [pc, #424]	@ (80018e0 <HAL_RCC_OscConfig+0x474>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x2ea>
 8001748:	4b64      	ldr	r3, [pc, #400]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174c:	4a63      	ldr	r2, [pc, #396]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6713      	str	r3, [r2, #112]	@ 0x70
 8001754:	e01c      	b.n	8001790 <HAL_RCC_OscConfig+0x324>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b05      	cmp	r3, #5
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x30c>
 800175e:	4b5f      	ldr	r3, [pc, #380]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001762:	4a5e      	ldr	r2, [pc, #376]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6713      	str	r3, [r2, #112]	@ 0x70
 800176a:	4b5c      	ldr	r3, [pc, #368]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176e:	4a5b      	ldr	r2, [pc, #364]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6713      	str	r3, [r2, #112]	@ 0x70
 8001776:	e00b      	b.n	8001790 <HAL_RCC_OscConfig+0x324>
 8001778:	4b58      	ldr	r3, [pc, #352]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177c:	4a57      	ldr	r2, [pc, #348]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6713      	str	r3, [r2, #112]	@ 0x70
 8001784:	4b55      	ldr	r3, [pc, #340]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	4a54      	ldr	r2, [pc, #336]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 800178a:	f023 0304 	bic.w	r3, r3, #4
 800178e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d015      	beq.n	80017c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff faa8 	bl	8000cec <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f7ff faa4 	bl	8000cec <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e0cb      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b6:	4b49      	ldr	r3, [pc, #292]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0ee      	beq.n	80017a0 <HAL_RCC_OscConfig+0x334>
 80017c2:	e014      	b.n	80017ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7ff fa92 	bl	8000cec <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017cc:	f7ff fa8e 	bl	8000cec <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e0b5      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e2:	4b3e      	ldr	r3, [pc, #248]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ee      	bne.n	80017cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f4:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	4a38      	ldr	r2, [pc, #224]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 80017fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80a1 	beq.w	800194c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800180a:	4b34      	ldr	r3, [pc, #208]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b08      	cmp	r3, #8
 8001814:	d05c      	beq.n	80018d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d141      	bne.n	80018a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181e:	4b31      	ldr	r3, [pc, #196]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fa62 	bl	8000cec <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182c:	f7ff fa5e 	bl	8000cec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e087      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	4b27      	ldr	r3, [pc, #156]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69da      	ldr	r2, [r3, #28]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	019b      	lsls	r3, r3, #6
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	3b01      	subs	r3, #1
 8001864:	041b      	lsls	r3, r3, #16
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	491b      	ldr	r1, [pc, #108]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fa37 	bl	8000cec <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff fa33 	bl	8000cec <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e05c      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001894:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x416>
 80018a0:	e054      	b.n	800194c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fa20 	bl	8000cec <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff fa1c 	bl	8000cec <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e045      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_RCC_OscConfig+0x470>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x444>
 80018ce:	e03d      	b.n	800194c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e038      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40007000 	.word	0x40007000
 80018e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <HAL_RCC_OscConfig+0x4ec>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d028      	beq.n	8001948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d121      	bne.n	8001948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d11a      	bne.n	8001948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001918:	4013      	ands	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800191e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001920:	4293      	cmp	r3, r2
 8001922:	d111      	bne.n	8001948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192e:	085b      	lsrs	r3, r3, #1
 8001930:	3b01      	subs	r3, #1
 8001932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d107      	bne.n	8001948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800

0800195c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0cc      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001970:	4b68      	ldr	r3, [pc, #416]	@ (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d90c      	bls.n	8001998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b65      	ldr	r3, [pc, #404]	@ (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b63      	ldr	r3, [pc, #396]	@ (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0b8      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b0:	4b59      	ldr	r3, [pc, #356]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a58      	ldr	r2, [pc, #352]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c8:	4b53      	ldr	r3, [pc, #332]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4a52      	ldr	r2, [pc, #328]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b50      	ldr	r3, [pc, #320]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	494d      	ldr	r1, [pc, #308]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d044      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	4b47      	ldr	r3, [pc, #284]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d119      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e07f      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d003      	beq.n	8001a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d109      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e06f      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e067      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3a:	4b37      	ldr	r3, [pc, #220]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f023 0203 	bic.w	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4934      	ldr	r1, [pc, #208]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a4c:	f7ff f94e 	bl	8000cec <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a54:	f7ff f94a 	bl	8000cec <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e04f      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 020c 	and.w	r2, r3, #12
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d1eb      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d20c      	bcs.n	8001aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b20      	ldr	r3, [pc, #128]	@ (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e032      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab0:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4916      	ldr	r1, [pc, #88]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d009      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	490e      	ldr	r1, [pc, #56]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ae2:	f000 f821 	bl	8001b28 <HAL_RCC_GetSysClockFreq>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	490a      	ldr	r1, [pc, #40]	@ (8001b1c <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	5ccb      	ldrb	r3, [r1, r3]
 8001af6:	fa22 f303 	lsr.w	r3, r2, r3
 8001afa:	4a09      	ldr	r2, [pc, #36]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f8ae 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023c00 	.word	0x40023c00
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	080030f0 	.word	0x080030f0
 8001b20:	20000010 	.word	0x20000010
 8001b24:	20000014 	.word	0x20000014

08001b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b2c:	b094      	sub	sp, #80	@ 0x50
 8001b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b34:	2300      	movs	r3, #0
 8001b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b38:	2300      	movs	r3, #0
 8001b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b40:	4b79      	ldr	r3, [pc, #484]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d00d      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x40>
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	f200 80e1 	bhi.w	8001d14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x34>
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b5a:	e0db      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b5c:	4b73      	ldr	r3, [pc, #460]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001b60:	e0db      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b62:	4b73      	ldr	r3, [pc, #460]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b66:	e0d8      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b68:	4b6f      	ldr	r3, [pc, #444]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b70:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b72:	4b6d      	ldr	r3, [pc, #436]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d063      	beq.n	8001c46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	2200      	movs	r2, #0
 8001b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b92:	2300      	movs	r3, #0
 8001b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	462b      	mov	r3, r5
 8001b9e:	f04f 0000 	mov.w	r0, #0
 8001ba2:	f04f 0100 	mov.w	r1, #0
 8001ba6:	0159      	lsls	r1, r3, #5
 8001ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bac:	0150      	lsls	r0, r2, #5
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	1a51      	subs	r1, r2, r1
 8001bb6:	6139      	str	r1, [r7, #16]
 8001bb8:	4629      	mov	r1, r5
 8001bba:	eb63 0301 	sbc.w	r3, r3, r1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bcc:	4659      	mov	r1, fp
 8001bce:	018b      	lsls	r3, r1, #6
 8001bd0:	4651      	mov	r1, sl
 8001bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bd6:	4651      	mov	r1, sl
 8001bd8:	018a      	lsls	r2, r1, #6
 8001bda:	4651      	mov	r1, sl
 8001bdc:	ebb2 0801 	subs.w	r8, r2, r1
 8001be0:	4659      	mov	r1, fp
 8001be2:	eb63 0901 	sbc.w	r9, r3, r1
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bfa:	4690      	mov	r8, r2
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	4623      	mov	r3, r4
 8001c00:	eb18 0303 	adds.w	r3, r8, r3
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	462b      	mov	r3, r5
 8001c08:	eb49 0303 	adc.w	r3, r9, r3
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	024b      	lsls	r3, r1, #9
 8001c1e:	4621      	mov	r1, r4
 8001c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c24:	4621      	mov	r1, r4
 8001c26:	024a      	lsls	r2, r1, #9
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c2e:	2200      	movs	r2, #0
 8001c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c38:	f7fe fb32 	bl	80002a0 <__aeabi_uldivmod>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4613      	mov	r3, r2
 8001c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c44:	e058      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c46:	4b38      	ldr	r3, [pc, #224]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	099b      	lsrs	r3, r3, #6
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4611      	mov	r1, r2
 8001c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c56:	623b      	str	r3, [r7, #32]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c60:	4642      	mov	r2, r8
 8001c62:	464b      	mov	r3, r9
 8001c64:	f04f 0000 	mov.w	r0, #0
 8001c68:	f04f 0100 	mov.w	r1, #0
 8001c6c:	0159      	lsls	r1, r3, #5
 8001c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c72:	0150      	lsls	r0, r2, #5
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4641      	mov	r1, r8
 8001c7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c7e:	4649      	mov	r1, r9
 8001c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c98:	ebb2 040a 	subs.w	r4, r2, sl
 8001c9c:	eb63 050b 	sbc.w	r5, r3, fp
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	00eb      	lsls	r3, r5, #3
 8001caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cae:	00e2      	lsls	r2, r4, #3
 8001cb0:	4614      	mov	r4, r2
 8001cb2:	461d      	mov	r5, r3
 8001cb4:	4643      	mov	r3, r8
 8001cb6:	18e3      	adds	r3, r4, r3
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	464b      	mov	r3, r9
 8001cbc:	eb45 0303 	adc.w	r3, r5, r3
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cce:	4629      	mov	r1, r5
 8001cd0:	028b      	lsls	r3, r1, #10
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cd8:	4621      	mov	r1, r4
 8001cda:	028a      	lsls	r2, r1, #10
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	61fa      	str	r2, [r7, #28]
 8001ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cec:	f7fe fad8 	bl	80002a0 <__aeabi_uldivmod>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	0c1b      	lsrs	r3, r3, #16
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	3301      	adds	r3, #1
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001d08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d12:	e002      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3750      	adds	r7, #80	@ 0x50
 8001d20:	46bd      	mov	sp, r7
 8001d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	00f42400 	.word	0x00f42400
 8001d30:	007a1200 	.word	0x007a1200

08001d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d38:	4b03      	ldr	r3, [pc, #12]	@ (8001d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000010 	.word	0x20000010

08001d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d50:	f7ff fff0 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	0a9b      	lsrs	r3, r3, #10
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	4903      	ldr	r1, [pc, #12]	@ (8001d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d62:	5ccb      	ldrb	r3, [r1, r3]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	08003100 	.word	0x08003100

08001d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d78:	f7ff ffdc 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	0b5b      	lsrs	r3, r3, #13
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4903      	ldr	r1, [pc, #12]	@ (8001d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40023800 	.word	0x40023800
 8001d98:	08003100 	.word	0x08003100

08001d9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e03f      	b.n	8001e2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff faa8 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	@ 0x24
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001dde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f929 	bl	8002038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b08a      	sub	sp, #40	@ 0x28
 8001e3a:	af02      	add	r7, sp, #8
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d17c      	bne.n	8001f50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <HAL_UART_Transmit+0x2c>
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e075      	b.n	8001f52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_UART_Transmit+0x3e>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e06e      	b.n	8001f52 <HAL_UART_Transmit+0x11c>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2221      	movs	r2, #33	@ 0x21
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e8a:	f7fe ff2f 	bl	8000cec <HAL_GetTick>
 8001e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	88fa      	ldrh	r2, [r7, #6]
 8001e9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ea4:	d108      	bne.n	8001eb8 <HAL_UART_Transmit+0x82>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d104      	bne.n	8001eb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	e003      	b.n	8001ec0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8001ec8:	e02a      	b.n	8001f20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2180      	movs	r1, #128	@ 0x80
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 f840 	bl	8001f5a <UART_WaitOnFlagUntilTimeout>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e036      	b.n	8001f52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10b      	bne.n	8001f02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ef8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	3302      	adds	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	e007      	b.n	8001f12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1cf      	bne.n	8001eca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2200      	movs	r2, #0
 8001f32:	2140      	movs	r1, #64	@ 0x40
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f810 	bl	8001f5a <UART_WaitOnFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e006      	b.n	8001f52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f50:	2302      	movs	r3, #2
  }
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3720      	adds	r7, #32
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b090      	sub	sp, #64	@ 0x40
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	4613      	mov	r3, r2
 8001f68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f6a:	e050      	b.n	800200e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f72:	d04c      	beq.n	800200e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <UART_WaitOnFlagUntilTimeout+0x30>
 8001f7a:	f7fe feb7 	bl	8000cec <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d241      	bcs.n	800200e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	330c      	adds	r3, #12
 8001f90:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f94:	e853 3f00 	ldrex	r3, [r3]
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001faa:	637a      	str	r2, [r7, #52]	@ 0x34
 8001fac:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fb2:	e841 2300 	strex	r3, r2, [r1]
 8001fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1e5      	bne.n	8001f8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3314      	adds	r3, #20
 8001fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	e853 3f00 	ldrex	r3, [r3]
 8001fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	3314      	adds	r3, #20
 8001fdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001fde:	623a      	str	r2, [r7, #32]
 8001fe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe2:	69f9      	ldr	r1, [r7, #28]
 8001fe4:	6a3a      	ldr	r2, [r7, #32]
 8001fe6:	e841 2300 	strex	r3, r2, [r1]
 8001fea:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1e5      	bne.n	8001fbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e00f      	b.n	800202e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4013      	ands	r3, r2
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	429a      	cmp	r2, r3
 800201c:	bf0c      	ite	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	2300      	movne	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	429a      	cmp	r2, r3
 800202a:	d09f      	beq.n	8001f6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3740      	adds	r7, #64	@ 0x40
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800203c:	b0c0      	sub	sp, #256	@ 0x100
 800203e:	af00      	add	r7, sp, #0
 8002040:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002054:	68d9      	ldr	r1, [r3, #12]
 8002056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	ea40 0301 	orr.w	r3, r0, r1
 8002060:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	431a      	orrs	r2, r3
 8002070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	431a      	orrs	r2, r3
 8002078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002090:	f021 010c 	bic.w	r1, r1, #12
 8002094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800209e:	430b      	orrs	r3, r1
 80020a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80020ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b2:	6999      	ldr	r1, [r3, #24]
 80020b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	ea40 0301 	orr.w	r3, r0, r1
 80020be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002304 <UART_SetConfig+0x2cc>)
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d005      	beq.n	80020d8 <UART_SetConfig+0xa0>
 80020cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002308 <UART_SetConfig+0x2d0>)
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d104      	bne.n	80020e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020d8:	f7ff fe4c 	bl	8001d74 <HAL_RCC_GetPCLK2Freq>
 80020dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80020e0:	e003      	b.n	80020ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020e2:	f7ff fe33 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 80020e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020f4:	f040 810c 	bne.w	8002310 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020fc:	2200      	movs	r2, #0
 80020fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002102:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002106:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800210a:	4622      	mov	r2, r4
 800210c:	462b      	mov	r3, r5
 800210e:	1891      	adds	r1, r2, r2
 8002110:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002112:	415b      	adcs	r3, r3
 8002114:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800211a:	4621      	mov	r1, r4
 800211c:	eb12 0801 	adds.w	r8, r2, r1
 8002120:	4629      	mov	r1, r5
 8002122:	eb43 0901 	adc.w	r9, r3, r1
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800213a:	4690      	mov	r8, r2
 800213c:	4699      	mov	r9, r3
 800213e:	4623      	mov	r3, r4
 8002140:	eb18 0303 	adds.w	r3, r8, r3
 8002144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002148:	462b      	mov	r3, r5
 800214a:	eb49 0303 	adc.w	r3, r9, r3
 800214e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800215e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002166:	460b      	mov	r3, r1
 8002168:	18db      	adds	r3, r3, r3
 800216a:	653b      	str	r3, [r7, #80]	@ 0x50
 800216c:	4613      	mov	r3, r2
 800216e:	eb42 0303 	adc.w	r3, r2, r3
 8002172:	657b      	str	r3, [r7, #84]	@ 0x54
 8002174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002178:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800217c:	f7fe f890 	bl	80002a0 <__aeabi_uldivmod>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4b61      	ldr	r3, [pc, #388]	@ (800230c <UART_SetConfig+0x2d4>)
 8002186:	fba3 2302 	umull	r2, r3, r3, r2
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	011c      	lsls	r4, r3, #4
 800218e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002192:	2200      	movs	r2, #0
 8002194:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002198:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800219c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80021a0:	4642      	mov	r2, r8
 80021a2:	464b      	mov	r3, r9
 80021a4:	1891      	adds	r1, r2, r2
 80021a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80021a8:	415b      	adcs	r3, r3
 80021aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021b0:	4641      	mov	r1, r8
 80021b2:	eb12 0a01 	adds.w	sl, r2, r1
 80021b6:	4649      	mov	r1, r9
 80021b8:	eb43 0b01 	adc.w	fp, r3, r1
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021d0:	4692      	mov	sl, r2
 80021d2:	469b      	mov	fp, r3
 80021d4:	4643      	mov	r3, r8
 80021d6:	eb1a 0303 	adds.w	r3, sl, r3
 80021da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80021de:	464b      	mov	r3, r9
 80021e0:	eb4b 0303 	adc.w	r3, fp, r3
 80021e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80021e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80021f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80021f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80021fc:	460b      	mov	r3, r1
 80021fe:	18db      	adds	r3, r3, r3
 8002200:	643b      	str	r3, [r7, #64]	@ 0x40
 8002202:	4613      	mov	r3, r2
 8002204:	eb42 0303 	adc.w	r3, r2, r3
 8002208:	647b      	str	r3, [r7, #68]	@ 0x44
 800220a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800220e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002212:	f7fe f845 	bl	80002a0 <__aeabi_uldivmod>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4611      	mov	r1, r2
 800221c:	4b3b      	ldr	r3, [pc, #236]	@ (800230c <UART_SetConfig+0x2d4>)
 800221e:	fba3 2301 	umull	r2, r3, r3, r1
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2264      	movs	r2, #100	@ 0x64
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	1acb      	subs	r3, r1, r3
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002232:	4b36      	ldr	r3, [pc, #216]	@ (800230c <UART_SetConfig+0x2d4>)
 8002234:	fba3 2302 	umull	r2, r3, r3, r2
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002240:	441c      	add	r4, r3
 8002242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002246:	2200      	movs	r2, #0
 8002248:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800224c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002250:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002254:	4642      	mov	r2, r8
 8002256:	464b      	mov	r3, r9
 8002258:	1891      	adds	r1, r2, r2
 800225a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800225c:	415b      	adcs	r3, r3
 800225e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002264:	4641      	mov	r1, r8
 8002266:	1851      	adds	r1, r2, r1
 8002268:	6339      	str	r1, [r7, #48]	@ 0x30
 800226a:	4649      	mov	r1, r9
 800226c:	414b      	adcs	r3, r1
 800226e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800227c:	4659      	mov	r1, fp
 800227e:	00cb      	lsls	r3, r1, #3
 8002280:	4651      	mov	r1, sl
 8002282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002286:	4651      	mov	r1, sl
 8002288:	00ca      	lsls	r2, r1, #3
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	4603      	mov	r3, r0
 8002290:	4642      	mov	r2, r8
 8002292:	189b      	adds	r3, r3, r2
 8002294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002298:	464b      	mov	r3, r9
 800229a:	460a      	mov	r2, r1
 800229c:	eb42 0303 	adc.w	r3, r2, r3
 80022a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80022b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80022b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80022b8:	460b      	mov	r3, r1
 80022ba:	18db      	adds	r3, r3, r3
 80022bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022be:	4613      	mov	r3, r2
 80022c0:	eb42 0303 	adc.w	r3, r2, r3
 80022c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80022ce:	f7fd ffe7 	bl	80002a0 <__aeabi_uldivmod>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4b0d      	ldr	r3, [pc, #52]	@ (800230c <UART_SetConfig+0x2d4>)
 80022d8:	fba3 1302 	umull	r1, r3, r3, r2
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	2164      	movs	r1, #100	@ 0x64
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	3332      	adds	r3, #50	@ 0x32
 80022ea:	4a08      	ldr	r2, [pc, #32]	@ (800230c <UART_SetConfig+0x2d4>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	f003 0207 	and.w	r2, r3, #7
 80022f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4422      	add	r2, r4
 80022fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002300:	e106      	b.n	8002510 <UART_SetConfig+0x4d8>
 8002302:	bf00      	nop
 8002304:	40011000 	.word	0x40011000
 8002308:	40011400 	.word	0x40011400
 800230c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002314:	2200      	movs	r2, #0
 8002316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800231a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800231e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002322:	4642      	mov	r2, r8
 8002324:	464b      	mov	r3, r9
 8002326:	1891      	adds	r1, r2, r2
 8002328:	6239      	str	r1, [r7, #32]
 800232a:	415b      	adcs	r3, r3
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
 800232e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002332:	4641      	mov	r1, r8
 8002334:	1854      	adds	r4, r2, r1
 8002336:	4649      	mov	r1, r9
 8002338:	eb43 0501 	adc.w	r5, r3, r1
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	00eb      	lsls	r3, r5, #3
 8002346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800234a:	00e2      	lsls	r2, r4, #3
 800234c:	4614      	mov	r4, r2
 800234e:	461d      	mov	r5, r3
 8002350:	4643      	mov	r3, r8
 8002352:	18e3      	adds	r3, r4, r3
 8002354:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002358:	464b      	mov	r3, r9
 800235a:	eb45 0303 	adc.w	r3, r5, r3
 800235e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800236e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800237e:	4629      	mov	r1, r5
 8002380:	008b      	lsls	r3, r1, #2
 8002382:	4621      	mov	r1, r4
 8002384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002388:	4621      	mov	r1, r4
 800238a:	008a      	lsls	r2, r1, #2
 800238c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002390:	f7fd ff86 	bl	80002a0 <__aeabi_uldivmod>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4b60      	ldr	r3, [pc, #384]	@ (800251c <UART_SetConfig+0x4e4>)
 800239a:	fba3 2302 	umull	r2, r3, r3, r2
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	011c      	lsls	r4, r3, #4
 80023a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023a6:	2200      	movs	r2, #0
 80023a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80023b4:	4642      	mov	r2, r8
 80023b6:	464b      	mov	r3, r9
 80023b8:	1891      	adds	r1, r2, r2
 80023ba:	61b9      	str	r1, [r7, #24]
 80023bc:	415b      	adcs	r3, r3
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023c4:	4641      	mov	r1, r8
 80023c6:	1851      	adds	r1, r2, r1
 80023c8:	6139      	str	r1, [r7, #16]
 80023ca:	4649      	mov	r1, r9
 80023cc:	414b      	adcs	r3, r1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023dc:	4659      	mov	r1, fp
 80023de:	00cb      	lsls	r3, r1, #3
 80023e0:	4651      	mov	r1, sl
 80023e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023e6:	4651      	mov	r1, sl
 80023e8:	00ca      	lsls	r2, r1, #3
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	4642      	mov	r2, r8
 80023f2:	189b      	adds	r3, r3, r2
 80023f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023f8:	464b      	mov	r3, r9
 80023fa:	460a      	mov	r2, r1
 80023fc:	eb42 0303 	adc.w	r3, r2, r3
 8002400:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800240e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800241c:	4649      	mov	r1, r9
 800241e:	008b      	lsls	r3, r1, #2
 8002420:	4641      	mov	r1, r8
 8002422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002426:	4641      	mov	r1, r8
 8002428:	008a      	lsls	r2, r1, #2
 800242a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800242e:	f7fd ff37 	bl	80002a0 <__aeabi_uldivmod>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4611      	mov	r1, r2
 8002438:	4b38      	ldr	r3, [pc, #224]	@ (800251c <UART_SetConfig+0x4e4>)
 800243a:	fba3 2301 	umull	r2, r3, r3, r1
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2264      	movs	r2, #100	@ 0x64
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	1acb      	subs	r3, r1, r3
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	3332      	adds	r3, #50	@ 0x32
 800244c:	4a33      	ldr	r2, [pc, #204]	@ (800251c <UART_SetConfig+0x4e4>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002458:	441c      	add	r4, r3
 800245a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800245e:	2200      	movs	r2, #0
 8002460:	673b      	str	r3, [r7, #112]	@ 0x70
 8002462:	677a      	str	r2, [r7, #116]	@ 0x74
 8002464:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002468:	4642      	mov	r2, r8
 800246a:	464b      	mov	r3, r9
 800246c:	1891      	adds	r1, r2, r2
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	415b      	adcs	r3, r3
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002478:	4641      	mov	r1, r8
 800247a:	1851      	adds	r1, r2, r1
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	4649      	mov	r1, r9
 8002480:	414b      	adcs	r3, r1
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002490:	4659      	mov	r1, fp
 8002492:	00cb      	lsls	r3, r1, #3
 8002494:	4651      	mov	r1, sl
 8002496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800249a:	4651      	mov	r1, sl
 800249c:	00ca      	lsls	r2, r1, #3
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	4642      	mov	r2, r8
 80024a6:	189b      	adds	r3, r3, r2
 80024a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024aa:	464b      	mov	r3, r9
 80024ac:	460a      	mov	r2, r1
 80024ae:	eb42 0303 	adc.w	r3, r2, r3
 80024b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80024be:	667a      	str	r2, [r7, #100]	@ 0x64
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80024cc:	4649      	mov	r1, r9
 80024ce:	008b      	lsls	r3, r1, #2
 80024d0:	4641      	mov	r1, r8
 80024d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024d6:	4641      	mov	r1, r8
 80024d8:	008a      	lsls	r2, r1, #2
 80024da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80024de:	f7fd fedf 	bl	80002a0 <__aeabi_uldivmod>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <UART_SetConfig+0x4e4>)
 80024e8:	fba3 1302 	umull	r1, r3, r3, r2
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	2164      	movs	r1, #100	@ 0x64
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	3332      	adds	r3, #50	@ 0x32
 80024fa:	4a08      	ldr	r2, [pc, #32]	@ (800251c <UART_SetConfig+0x4e4>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	f003 020f 	and.w	r2, r3, #15
 8002506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4422      	add	r2, r4
 800250e:	609a      	str	r2, [r3, #8]
}
 8002510:	bf00      	nop
 8002512:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002516:	46bd      	mov	sp, r7
 8002518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800251c:	51eb851f 	.word	0x51eb851f

08002520 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 8002526:	f7fe fb81 	bl	8000c2c <HAL_Init>


	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 800252a:	f000 f847 	bl	80025bc <SystemClock_Config>

	/* Initialize BSP Leds */
	BSP_LED_Init(LED1);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe f9d4 	bl	80008dc <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8002534:	2001      	movs	r0, #1
 8002536:	f7fe f9d1 	bl	80008dc <BSP_LED_Init>
	BSP_LED_Init(LED3);
 800253a:	2002      	movs	r0, #2
 800253c:	f7fe f9ce 	bl	80008dc <BSP_LED_Init>

	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8002540:	2100      	movs	r1, #0
 8002542:	2000      	movs	r0, #0
 8002544:	f7fe fa68 	bl	8000a18 <BSP_PB_Init>

	/* Declare delays and load durations */
	delay_t freqLed;
	delayWrite(&freqLed, shortPeriod);
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	2164      	movs	r1, #100	@ 0x64
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe f8eb 	bl	8000728 <delayWrite>
	uartInit();
 8002552:	f7fe f8fb 	bl	800074c <uartInit>
	/* Infinite loop */
	while (1){
		//Actualizar MEF
		debounceFSM_update();
 8002556:	f7fe f81b 	bl	8000590 <debounceFSM_update>

		//Si se pulsó el boton cambio la frecuencia de encedido y apagado del LED2
		if (readKey()){
 800255a:	f7fe f89f 	bl	800069c <readKey>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01e      	beq.n	80025a2 <main+0x82>
			freqState = !freqState;
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <main+0x98>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f083 0301 	eor.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <main+0x98>)
 8002580:	701a      	strb	r2, [r3, #0]

			if (freqState){
 8002582:	4b0d      	ldr	r3, [pc, #52]	@ (80025b8 <main+0x98>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d006      	beq.n	8002598 <main+0x78>
				delayWrite(&freqLed, longPeriod);
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe f8c9 	bl	8000728 <delayWrite>
 8002596:	e004      	b.n	80025a2 <main+0x82>
			} else {
				delayWrite(&freqLed, shortPeriod);
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	2164      	movs	r1, #100	@ 0x64
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe f8c3 	bl	8000728 <delayWrite>
			}
		}

		//Toggle led cuando se cumple la duracion
		if (delayRead(&freqLed) == true){
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe f891 	bl	80006cc <delayRead>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0d2      	beq.n	8002556 <main+0x36>
			BSP_LED_Toggle(LED2);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7fe fa17 	bl	80009e4 <BSP_LED_Toggle>
		debounceFSM_update();
 80025b6:	e7ce      	b.n	8002556 <main+0x36>
 80025b8:	20000019 	.word	0x20000019

080025bc <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b094      	sub	sp, #80	@ 0x50
 80025c0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002678 <SystemClock_Config+0xbc>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002678 <SystemClock_Config+0xbc>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d2:	4b29      	ldr	r3, [pc, #164]	@ (8002678 <SystemClock_Config+0xbc>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	4b26      	ldr	r3, [pc, #152]	@ (800267c <SystemClock_Config+0xc0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a25      	ldr	r2, [pc, #148]	@ (800267c <SystemClock_Config+0xc0>)
 80025e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b23      	ldr	r3, [pc, #140]	@ (800267c <SystemClock_Config+0xc0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025fe:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002602:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002604:	2302      	movs	r3, #2
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002608:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800260c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 800260e:	2308      	movs	r3, #8
 8002610:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8002612:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8002616:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002618:	2302      	movs	r3, #2
 800261a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800261c:	2307      	movs	r3, #7
 800261e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe ff21 	bl	800146c <HAL_RCC_OscConfig>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8002630:	f000 f826 	bl	8002680 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002634:	f7fe feca 	bl	80013cc <HAL_PWREx_EnableOverDrive>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 800263e:	f000 f81f 	bl	8002680 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002642:	230f      	movs	r3, #15
 8002644:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002646:	2302      	movs	r3, #2
 8002648:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800264a:	2300      	movs	r3, #0
 800264c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800264e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002652:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002658:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800265a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800265e:	2105      	movs	r1, #5
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f97b 	bl	800195c <HAL_RCC_ClockConfig>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 800266c:	f000 f808 	bl	8002680 <Error_Handler>
	}
}
 8002670:	bf00      	nop
 8002672:	3750      	adds	r7, #80	@ 0x50
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40023800 	.word	0x40023800
 800267c:	40007000 	.word	0x40007000

08002680 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8002684:	2001      	movs	r0, #1
 8002686:	f7fe f979 	bl	800097c <BSP_LED_On>
	while (1)
 800268a:	bf00      	nop
 800268c:	e7fd      	b.n	800268a <Error_Handler+0xa>
	...

08002690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026c8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002694:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002696:	e003      	b.n	80026a0 <LoopCopyDataInit>

08002698 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800269a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800269c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800269e:	3104      	adds	r1, #4

080026a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026a0:	480b      	ldr	r0, [pc, #44]	@ (80026d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026a8:	d3f6      	bcc.n	8002698 <CopyDataInit>
  ldr  r2, =_sbss
 80026aa:	4a0b      	ldr	r2, [pc, #44]	@ (80026d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026ac:	e002      	b.n	80026b4 <LoopFillZerobss>

080026ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026b0:	f842 3b04 	str.w	r3, [r2], #4

080026b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026b4:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026b8:	d3f9      	bcc.n	80026ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026ba:	f7fe fa19 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026be:	f000 f837 	bl	8002730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026c2:	f7ff ff2d 	bl	8002520 <main>
  bx  lr    
 80026c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80026c8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80026cc:	0800314c 	.word	0x0800314c
  ldr  r0, =_sdata
 80026d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026d4:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 80026d8:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 80026dc:	2000022c 	.word	0x2000022c

080026e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e0:	e7fe      	b.n	80026e0 <ADC_IRQHandler>
	...

080026e4 <siprintf>:
 80026e4:	b40e      	push	{r1, r2, r3}
 80026e6:	b500      	push	{lr}
 80026e8:	b09c      	sub	sp, #112	@ 0x70
 80026ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80026ec:	9002      	str	r0, [sp, #8]
 80026ee:	9006      	str	r0, [sp, #24]
 80026f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80026f4:	4809      	ldr	r0, [pc, #36]	@ (800271c <siprintf+0x38>)
 80026f6:	9107      	str	r1, [sp, #28]
 80026f8:	9104      	str	r1, [sp, #16]
 80026fa:	4909      	ldr	r1, [pc, #36]	@ (8002720 <siprintf+0x3c>)
 80026fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002700:	9105      	str	r1, [sp, #20]
 8002702:	6800      	ldr	r0, [r0, #0]
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	a902      	add	r1, sp, #8
 8002708:	f000 f98c 	bl	8002a24 <_svfiprintf_r>
 800270c:	9b02      	ldr	r3, [sp, #8]
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	b01c      	add	sp, #112	@ 0x70
 8002714:	f85d eb04 	ldr.w	lr, [sp], #4
 8002718:	b003      	add	sp, #12
 800271a:	4770      	bx	lr
 800271c:	2000001c 	.word	0x2000001c
 8002720:	ffff0208 	.word	0xffff0208

08002724 <__errno>:
 8002724:	4b01      	ldr	r3, [pc, #4]	@ (800272c <__errno+0x8>)
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	2000001c 	.word	0x2000001c

08002730 <__libc_init_array>:
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	4d0d      	ldr	r5, [pc, #52]	@ (8002768 <__libc_init_array+0x38>)
 8002734:	4c0d      	ldr	r4, [pc, #52]	@ (800276c <__libc_init_array+0x3c>)
 8002736:	1b64      	subs	r4, r4, r5
 8002738:	10a4      	asrs	r4, r4, #2
 800273a:	2600      	movs	r6, #0
 800273c:	42a6      	cmp	r6, r4
 800273e:	d109      	bne.n	8002754 <__libc_init_array+0x24>
 8002740:	4d0b      	ldr	r5, [pc, #44]	@ (8002770 <__libc_init_array+0x40>)
 8002742:	4c0c      	ldr	r4, [pc, #48]	@ (8002774 <__libc_init_array+0x44>)
 8002744:	f000 fc66 	bl	8003014 <_init>
 8002748:	1b64      	subs	r4, r4, r5
 800274a:	10a4      	asrs	r4, r4, #2
 800274c:	2600      	movs	r6, #0
 800274e:	42a6      	cmp	r6, r4
 8002750:	d105      	bne.n	800275e <__libc_init_array+0x2e>
 8002752:	bd70      	pop	{r4, r5, r6, pc}
 8002754:	f855 3b04 	ldr.w	r3, [r5], #4
 8002758:	4798      	blx	r3
 800275a:	3601      	adds	r6, #1
 800275c:	e7ee      	b.n	800273c <__libc_init_array+0xc>
 800275e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002762:	4798      	blx	r3
 8002764:	3601      	adds	r6, #1
 8002766:	e7f2      	b.n	800274e <__libc_init_array+0x1e>
 8002768:	08003144 	.word	0x08003144
 800276c:	08003144 	.word	0x08003144
 8002770:	08003144 	.word	0x08003144
 8002774:	08003148 	.word	0x08003148

08002778 <__retarget_lock_acquire_recursive>:
 8002778:	4770      	bx	lr

0800277a <__retarget_lock_release_recursive>:
 800277a:	4770      	bx	lr

0800277c <_free_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	4605      	mov	r5, r0
 8002780:	2900      	cmp	r1, #0
 8002782:	d041      	beq.n	8002808 <_free_r+0x8c>
 8002784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002788:	1f0c      	subs	r4, r1, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	bfb8      	it	lt
 800278e:	18e4      	addlt	r4, r4, r3
 8002790:	f000 f8e0 	bl	8002954 <__malloc_lock>
 8002794:	4a1d      	ldr	r2, [pc, #116]	@ (800280c <_free_r+0x90>)
 8002796:	6813      	ldr	r3, [r2, #0]
 8002798:	b933      	cbnz	r3, 80027a8 <_free_r+0x2c>
 800279a:	6063      	str	r3, [r4, #4]
 800279c:	6014      	str	r4, [r2, #0]
 800279e:	4628      	mov	r0, r5
 80027a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027a4:	f000 b8dc 	b.w	8002960 <__malloc_unlock>
 80027a8:	42a3      	cmp	r3, r4
 80027aa:	d908      	bls.n	80027be <_free_r+0x42>
 80027ac:	6820      	ldr	r0, [r4, #0]
 80027ae:	1821      	adds	r1, r4, r0
 80027b0:	428b      	cmp	r3, r1
 80027b2:	bf01      	itttt	eq
 80027b4:	6819      	ldreq	r1, [r3, #0]
 80027b6:	685b      	ldreq	r3, [r3, #4]
 80027b8:	1809      	addeq	r1, r1, r0
 80027ba:	6021      	streq	r1, [r4, #0]
 80027bc:	e7ed      	b.n	800279a <_free_r+0x1e>
 80027be:	461a      	mov	r2, r3
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	b10b      	cbz	r3, 80027c8 <_free_r+0x4c>
 80027c4:	42a3      	cmp	r3, r4
 80027c6:	d9fa      	bls.n	80027be <_free_r+0x42>
 80027c8:	6811      	ldr	r1, [r2, #0]
 80027ca:	1850      	adds	r0, r2, r1
 80027cc:	42a0      	cmp	r0, r4
 80027ce:	d10b      	bne.n	80027e8 <_free_r+0x6c>
 80027d0:	6820      	ldr	r0, [r4, #0]
 80027d2:	4401      	add	r1, r0
 80027d4:	1850      	adds	r0, r2, r1
 80027d6:	4283      	cmp	r3, r0
 80027d8:	6011      	str	r1, [r2, #0]
 80027da:	d1e0      	bne.n	800279e <_free_r+0x22>
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	6053      	str	r3, [r2, #4]
 80027e2:	4408      	add	r0, r1
 80027e4:	6010      	str	r0, [r2, #0]
 80027e6:	e7da      	b.n	800279e <_free_r+0x22>
 80027e8:	d902      	bls.n	80027f0 <_free_r+0x74>
 80027ea:	230c      	movs	r3, #12
 80027ec:	602b      	str	r3, [r5, #0]
 80027ee:	e7d6      	b.n	800279e <_free_r+0x22>
 80027f0:	6820      	ldr	r0, [r4, #0]
 80027f2:	1821      	adds	r1, r4, r0
 80027f4:	428b      	cmp	r3, r1
 80027f6:	bf04      	itt	eq
 80027f8:	6819      	ldreq	r1, [r3, #0]
 80027fa:	685b      	ldreq	r3, [r3, #4]
 80027fc:	6063      	str	r3, [r4, #4]
 80027fe:	bf04      	itt	eq
 8002800:	1809      	addeq	r1, r1, r0
 8002802:	6021      	streq	r1, [r4, #0]
 8002804:	6054      	str	r4, [r2, #4]
 8002806:	e7ca      	b.n	800279e <_free_r+0x22>
 8002808:	bd38      	pop	{r3, r4, r5, pc}
 800280a:	bf00      	nop
 800280c:	20000228 	.word	0x20000228

08002810 <sbrk_aligned>:
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	4e0f      	ldr	r6, [pc, #60]	@ (8002850 <sbrk_aligned+0x40>)
 8002814:	460c      	mov	r4, r1
 8002816:	6831      	ldr	r1, [r6, #0]
 8002818:	4605      	mov	r5, r0
 800281a:	b911      	cbnz	r1, 8002822 <sbrk_aligned+0x12>
 800281c:	f000 fba6 	bl	8002f6c <_sbrk_r>
 8002820:	6030      	str	r0, [r6, #0]
 8002822:	4621      	mov	r1, r4
 8002824:	4628      	mov	r0, r5
 8002826:	f000 fba1 	bl	8002f6c <_sbrk_r>
 800282a:	1c43      	adds	r3, r0, #1
 800282c:	d103      	bne.n	8002836 <sbrk_aligned+0x26>
 800282e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002832:	4620      	mov	r0, r4
 8002834:	bd70      	pop	{r4, r5, r6, pc}
 8002836:	1cc4      	adds	r4, r0, #3
 8002838:	f024 0403 	bic.w	r4, r4, #3
 800283c:	42a0      	cmp	r0, r4
 800283e:	d0f8      	beq.n	8002832 <sbrk_aligned+0x22>
 8002840:	1a21      	subs	r1, r4, r0
 8002842:	4628      	mov	r0, r5
 8002844:	f000 fb92 	bl	8002f6c <_sbrk_r>
 8002848:	3001      	adds	r0, #1
 800284a:	d1f2      	bne.n	8002832 <sbrk_aligned+0x22>
 800284c:	e7ef      	b.n	800282e <sbrk_aligned+0x1e>
 800284e:	bf00      	nop
 8002850:	20000224 	.word	0x20000224

08002854 <_malloc_r>:
 8002854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002858:	1ccd      	adds	r5, r1, #3
 800285a:	f025 0503 	bic.w	r5, r5, #3
 800285e:	3508      	adds	r5, #8
 8002860:	2d0c      	cmp	r5, #12
 8002862:	bf38      	it	cc
 8002864:	250c      	movcc	r5, #12
 8002866:	2d00      	cmp	r5, #0
 8002868:	4606      	mov	r6, r0
 800286a:	db01      	blt.n	8002870 <_malloc_r+0x1c>
 800286c:	42a9      	cmp	r1, r5
 800286e:	d904      	bls.n	800287a <_malloc_r+0x26>
 8002870:	230c      	movs	r3, #12
 8002872:	6033      	str	r3, [r6, #0]
 8002874:	2000      	movs	r0, #0
 8002876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800287a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002950 <_malloc_r+0xfc>
 800287e:	f000 f869 	bl	8002954 <__malloc_lock>
 8002882:	f8d8 3000 	ldr.w	r3, [r8]
 8002886:	461c      	mov	r4, r3
 8002888:	bb44      	cbnz	r4, 80028dc <_malloc_r+0x88>
 800288a:	4629      	mov	r1, r5
 800288c:	4630      	mov	r0, r6
 800288e:	f7ff ffbf 	bl	8002810 <sbrk_aligned>
 8002892:	1c43      	adds	r3, r0, #1
 8002894:	4604      	mov	r4, r0
 8002896:	d158      	bne.n	800294a <_malloc_r+0xf6>
 8002898:	f8d8 4000 	ldr.w	r4, [r8]
 800289c:	4627      	mov	r7, r4
 800289e:	2f00      	cmp	r7, #0
 80028a0:	d143      	bne.n	800292a <_malloc_r+0xd6>
 80028a2:	2c00      	cmp	r4, #0
 80028a4:	d04b      	beq.n	800293e <_malloc_r+0xea>
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	4639      	mov	r1, r7
 80028aa:	4630      	mov	r0, r6
 80028ac:	eb04 0903 	add.w	r9, r4, r3
 80028b0:	f000 fb5c 	bl	8002f6c <_sbrk_r>
 80028b4:	4581      	cmp	r9, r0
 80028b6:	d142      	bne.n	800293e <_malloc_r+0xea>
 80028b8:	6821      	ldr	r1, [r4, #0]
 80028ba:	1a6d      	subs	r5, r5, r1
 80028bc:	4629      	mov	r1, r5
 80028be:	4630      	mov	r0, r6
 80028c0:	f7ff ffa6 	bl	8002810 <sbrk_aligned>
 80028c4:	3001      	adds	r0, #1
 80028c6:	d03a      	beq.n	800293e <_malloc_r+0xea>
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	442b      	add	r3, r5
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	f8d8 3000 	ldr.w	r3, [r8]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	bb62      	cbnz	r2, 8002930 <_malloc_r+0xdc>
 80028d6:	f8c8 7000 	str.w	r7, [r8]
 80028da:	e00f      	b.n	80028fc <_malloc_r+0xa8>
 80028dc:	6822      	ldr	r2, [r4, #0]
 80028de:	1b52      	subs	r2, r2, r5
 80028e0:	d420      	bmi.n	8002924 <_malloc_r+0xd0>
 80028e2:	2a0b      	cmp	r2, #11
 80028e4:	d917      	bls.n	8002916 <_malloc_r+0xc2>
 80028e6:	1961      	adds	r1, r4, r5
 80028e8:	42a3      	cmp	r3, r4
 80028ea:	6025      	str	r5, [r4, #0]
 80028ec:	bf18      	it	ne
 80028ee:	6059      	strne	r1, [r3, #4]
 80028f0:	6863      	ldr	r3, [r4, #4]
 80028f2:	bf08      	it	eq
 80028f4:	f8c8 1000 	streq.w	r1, [r8]
 80028f8:	5162      	str	r2, [r4, r5]
 80028fa:	604b      	str	r3, [r1, #4]
 80028fc:	4630      	mov	r0, r6
 80028fe:	f000 f82f 	bl	8002960 <__malloc_unlock>
 8002902:	f104 000b 	add.w	r0, r4, #11
 8002906:	1d23      	adds	r3, r4, #4
 8002908:	f020 0007 	bic.w	r0, r0, #7
 800290c:	1ac2      	subs	r2, r0, r3
 800290e:	bf1c      	itt	ne
 8002910:	1a1b      	subne	r3, r3, r0
 8002912:	50a3      	strne	r3, [r4, r2]
 8002914:	e7af      	b.n	8002876 <_malloc_r+0x22>
 8002916:	6862      	ldr	r2, [r4, #4]
 8002918:	42a3      	cmp	r3, r4
 800291a:	bf0c      	ite	eq
 800291c:	f8c8 2000 	streq.w	r2, [r8]
 8002920:	605a      	strne	r2, [r3, #4]
 8002922:	e7eb      	b.n	80028fc <_malloc_r+0xa8>
 8002924:	4623      	mov	r3, r4
 8002926:	6864      	ldr	r4, [r4, #4]
 8002928:	e7ae      	b.n	8002888 <_malloc_r+0x34>
 800292a:	463c      	mov	r4, r7
 800292c:	687f      	ldr	r7, [r7, #4]
 800292e:	e7b6      	b.n	800289e <_malloc_r+0x4a>
 8002930:	461a      	mov	r2, r3
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	42a3      	cmp	r3, r4
 8002936:	d1fb      	bne.n	8002930 <_malloc_r+0xdc>
 8002938:	2300      	movs	r3, #0
 800293a:	6053      	str	r3, [r2, #4]
 800293c:	e7de      	b.n	80028fc <_malloc_r+0xa8>
 800293e:	230c      	movs	r3, #12
 8002940:	6033      	str	r3, [r6, #0]
 8002942:	4630      	mov	r0, r6
 8002944:	f000 f80c 	bl	8002960 <__malloc_unlock>
 8002948:	e794      	b.n	8002874 <_malloc_r+0x20>
 800294a:	6005      	str	r5, [r0, #0]
 800294c:	e7d6      	b.n	80028fc <_malloc_r+0xa8>
 800294e:	bf00      	nop
 8002950:	20000228 	.word	0x20000228

08002954 <__malloc_lock>:
 8002954:	4801      	ldr	r0, [pc, #4]	@ (800295c <__malloc_lock+0x8>)
 8002956:	f7ff bf0f 	b.w	8002778 <__retarget_lock_acquire_recursive>
 800295a:	bf00      	nop
 800295c:	20000220 	.word	0x20000220

08002960 <__malloc_unlock>:
 8002960:	4801      	ldr	r0, [pc, #4]	@ (8002968 <__malloc_unlock+0x8>)
 8002962:	f7ff bf0a 	b.w	800277a <__retarget_lock_release_recursive>
 8002966:	bf00      	nop
 8002968:	20000220 	.word	0x20000220

0800296c <__ssputs_r>:
 800296c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002970:	688e      	ldr	r6, [r1, #8]
 8002972:	461f      	mov	r7, r3
 8002974:	42be      	cmp	r6, r7
 8002976:	680b      	ldr	r3, [r1, #0]
 8002978:	4682      	mov	sl, r0
 800297a:	460c      	mov	r4, r1
 800297c:	4690      	mov	r8, r2
 800297e:	d82d      	bhi.n	80029dc <__ssputs_r+0x70>
 8002980:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002984:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002988:	d026      	beq.n	80029d8 <__ssputs_r+0x6c>
 800298a:	6965      	ldr	r5, [r4, #20]
 800298c:	6909      	ldr	r1, [r1, #16]
 800298e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002992:	eba3 0901 	sub.w	r9, r3, r1
 8002996:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800299a:	1c7b      	adds	r3, r7, #1
 800299c:	444b      	add	r3, r9
 800299e:	106d      	asrs	r5, r5, #1
 80029a0:	429d      	cmp	r5, r3
 80029a2:	bf38      	it	cc
 80029a4:	461d      	movcc	r5, r3
 80029a6:	0553      	lsls	r3, r2, #21
 80029a8:	d527      	bpl.n	80029fa <__ssputs_r+0x8e>
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7ff ff52 	bl	8002854 <_malloc_r>
 80029b0:	4606      	mov	r6, r0
 80029b2:	b360      	cbz	r0, 8002a0e <__ssputs_r+0xa2>
 80029b4:	6921      	ldr	r1, [r4, #16]
 80029b6:	464a      	mov	r2, r9
 80029b8:	f000 fae8 	bl	8002f8c <memcpy>
 80029bc:	89a3      	ldrh	r3, [r4, #12]
 80029be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80029c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029c6:	81a3      	strh	r3, [r4, #12]
 80029c8:	6126      	str	r6, [r4, #16]
 80029ca:	6165      	str	r5, [r4, #20]
 80029cc:	444e      	add	r6, r9
 80029ce:	eba5 0509 	sub.w	r5, r5, r9
 80029d2:	6026      	str	r6, [r4, #0]
 80029d4:	60a5      	str	r5, [r4, #8]
 80029d6:	463e      	mov	r6, r7
 80029d8:	42be      	cmp	r6, r7
 80029da:	d900      	bls.n	80029de <__ssputs_r+0x72>
 80029dc:	463e      	mov	r6, r7
 80029de:	6820      	ldr	r0, [r4, #0]
 80029e0:	4632      	mov	r2, r6
 80029e2:	4641      	mov	r1, r8
 80029e4:	f000 faa8 	bl	8002f38 <memmove>
 80029e8:	68a3      	ldr	r3, [r4, #8]
 80029ea:	1b9b      	subs	r3, r3, r6
 80029ec:	60a3      	str	r3, [r4, #8]
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	4433      	add	r3, r6
 80029f2:	6023      	str	r3, [r4, #0]
 80029f4:	2000      	movs	r0, #0
 80029f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029fa:	462a      	mov	r2, r5
 80029fc:	f000 fad4 	bl	8002fa8 <_realloc_r>
 8002a00:	4606      	mov	r6, r0
 8002a02:	2800      	cmp	r0, #0
 8002a04:	d1e0      	bne.n	80029c8 <__ssputs_r+0x5c>
 8002a06:	6921      	ldr	r1, [r4, #16]
 8002a08:	4650      	mov	r0, sl
 8002a0a:	f7ff feb7 	bl	800277c <_free_r>
 8002a0e:	230c      	movs	r3, #12
 8002a10:	f8ca 3000 	str.w	r3, [sl]
 8002a14:	89a3      	ldrh	r3, [r4, #12]
 8002a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a1a:	81a3      	strh	r3, [r4, #12]
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a20:	e7e9      	b.n	80029f6 <__ssputs_r+0x8a>
	...

08002a24 <_svfiprintf_r>:
 8002a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a28:	4698      	mov	r8, r3
 8002a2a:	898b      	ldrh	r3, [r1, #12]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	b09d      	sub	sp, #116	@ 0x74
 8002a30:	4607      	mov	r7, r0
 8002a32:	460d      	mov	r5, r1
 8002a34:	4614      	mov	r4, r2
 8002a36:	d510      	bpl.n	8002a5a <_svfiprintf_r+0x36>
 8002a38:	690b      	ldr	r3, [r1, #16]
 8002a3a:	b973      	cbnz	r3, 8002a5a <_svfiprintf_r+0x36>
 8002a3c:	2140      	movs	r1, #64	@ 0x40
 8002a3e:	f7ff ff09 	bl	8002854 <_malloc_r>
 8002a42:	6028      	str	r0, [r5, #0]
 8002a44:	6128      	str	r0, [r5, #16]
 8002a46:	b930      	cbnz	r0, 8002a56 <_svfiprintf_r+0x32>
 8002a48:	230c      	movs	r3, #12
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a50:	b01d      	add	sp, #116	@ 0x74
 8002a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a56:	2340      	movs	r3, #64	@ 0x40
 8002a58:	616b      	str	r3, [r5, #20]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a5e:	2320      	movs	r3, #32
 8002a60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a68:	2330      	movs	r3, #48	@ 0x30
 8002a6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002c08 <_svfiprintf_r+0x1e4>
 8002a6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a72:	f04f 0901 	mov.w	r9, #1
 8002a76:	4623      	mov	r3, r4
 8002a78:	469a      	mov	sl, r3
 8002a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a7e:	b10a      	cbz	r2, 8002a84 <_svfiprintf_r+0x60>
 8002a80:	2a25      	cmp	r2, #37	@ 0x25
 8002a82:	d1f9      	bne.n	8002a78 <_svfiprintf_r+0x54>
 8002a84:	ebba 0b04 	subs.w	fp, sl, r4
 8002a88:	d00b      	beq.n	8002aa2 <_svfiprintf_r+0x7e>
 8002a8a:	465b      	mov	r3, fp
 8002a8c:	4622      	mov	r2, r4
 8002a8e:	4629      	mov	r1, r5
 8002a90:	4638      	mov	r0, r7
 8002a92:	f7ff ff6b 	bl	800296c <__ssputs_r>
 8002a96:	3001      	adds	r0, #1
 8002a98:	f000 80a7 	beq.w	8002bea <_svfiprintf_r+0x1c6>
 8002a9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a9e:	445a      	add	r2, fp
 8002aa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8002aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 809f 	beq.w	8002bea <_svfiprintf_r+0x1c6>
 8002aac:	2300      	movs	r3, #0
 8002aae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ab6:	f10a 0a01 	add.w	sl, sl, #1
 8002aba:	9304      	str	r3, [sp, #16]
 8002abc:	9307      	str	r3, [sp, #28]
 8002abe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ac2:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ac4:	4654      	mov	r4, sl
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002acc:	484e      	ldr	r0, [pc, #312]	@ (8002c08 <_svfiprintf_r+0x1e4>)
 8002ace:	f7fd fb97 	bl	8000200 <memchr>
 8002ad2:	9a04      	ldr	r2, [sp, #16]
 8002ad4:	b9d8      	cbnz	r0, 8002b0e <_svfiprintf_r+0xea>
 8002ad6:	06d0      	lsls	r0, r2, #27
 8002ad8:	bf44      	itt	mi
 8002ada:	2320      	movmi	r3, #32
 8002adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ae0:	0711      	lsls	r1, r2, #28
 8002ae2:	bf44      	itt	mi
 8002ae4:	232b      	movmi	r3, #43	@ 0x2b
 8002ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002aea:	f89a 3000 	ldrb.w	r3, [sl]
 8002aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8002af0:	d015      	beq.n	8002b1e <_svfiprintf_r+0xfa>
 8002af2:	9a07      	ldr	r2, [sp, #28]
 8002af4:	4654      	mov	r4, sl
 8002af6:	2000      	movs	r0, #0
 8002af8:	f04f 0c0a 	mov.w	ip, #10
 8002afc:	4621      	mov	r1, r4
 8002afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b02:	3b30      	subs	r3, #48	@ 0x30
 8002b04:	2b09      	cmp	r3, #9
 8002b06:	d94b      	bls.n	8002ba0 <_svfiprintf_r+0x17c>
 8002b08:	b1b0      	cbz	r0, 8002b38 <_svfiprintf_r+0x114>
 8002b0a:	9207      	str	r2, [sp, #28]
 8002b0c:	e014      	b.n	8002b38 <_svfiprintf_r+0x114>
 8002b0e:	eba0 0308 	sub.w	r3, r0, r8
 8002b12:	fa09 f303 	lsl.w	r3, r9, r3
 8002b16:	4313      	orrs	r3, r2
 8002b18:	9304      	str	r3, [sp, #16]
 8002b1a:	46a2      	mov	sl, r4
 8002b1c:	e7d2      	b.n	8002ac4 <_svfiprintf_r+0xa0>
 8002b1e:	9b03      	ldr	r3, [sp, #12]
 8002b20:	1d19      	adds	r1, r3, #4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	9103      	str	r1, [sp, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bfbb      	ittet	lt
 8002b2a:	425b      	neglt	r3, r3
 8002b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8002b30:	9307      	strge	r3, [sp, #28]
 8002b32:	9307      	strlt	r3, [sp, #28]
 8002b34:	bfb8      	it	lt
 8002b36:	9204      	strlt	r2, [sp, #16]
 8002b38:	7823      	ldrb	r3, [r4, #0]
 8002b3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b3c:	d10a      	bne.n	8002b54 <_svfiprintf_r+0x130>
 8002b3e:	7863      	ldrb	r3, [r4, #1]
 8002b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b42:	d132      	bne.n	8002baa <_svfiprintf_r+0x186>
 8002b44:	9b03      	ldr	r3, [sp, #12]
 8002b46:	1d1a      	adds	r2, r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	9203      	str	r2, [sp, #12]
 8002b4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b50:	3402      	adds	r4, #2
 8002b52:	9305      	str	r3, [sp, #20]
 8002b54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002c18 <_svfiprintf_r+0x1f4>
 8002b58:	7821      	ldrb	r1, [r4, #0]
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	4650      	mov	r0, sl
 8002b5e:	f7fd fb4f 	bl	8000200 <memchr>
 8002b62:	b138      	cbz	r0, 8002b74 <_svfiprintf_r+0x150>
 8002b64:	9b04      	ldr	r3, [sp, #16]
 8002b66:	eba0 000a 	sub.w	r0, r0, sl
 8002b6a:	2240      	movs	r2, #64	@ 0x40
 8002b6c:	4082      	lsls	r2, r0
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	3401      	adds	r4, #1
 8002b72:	9304      	str	r3, [sp, #16]
 8002b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b78:	4824      	ldr	r0, [pc, #144]	@ (8002c0c <_svfiprintf_r+0x1e8>)
 8002b7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b7e:	2206      	movs	r2, #6
 8002b80:	f7fd fb3e 	bl	8000200 <memchr>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	d036      	beq.n	8002bf6 <_svfiprintf_r+0x1d2>
 8002b88:	4b21      	ldr	r3, [pc, #132]	@ (8002c10 <_svfiprintf_r+0x1ec>)
 8002b8a:	bb1b      	cbnz	r3, 8002bd4 <_svfiprintf_r+0x1b0>
 8002b8c:	9b03      	ldr	r3, [sp, #12]
 8002b8e:	3307      	adds	r3, #7
 8002b90:	f023 0307 	bic.w	r3, r3, #7
 8002b94:	3308      	adds	r3, #8
 8002b96:	9303      	str	r3, [sp, #12]
 8002b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b9a:	4433      	add	r3, r6
 8002b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b9e:	e76a      	b.n	8002a76 <_svfiprintf_r+0x52>
 8002ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ba4:	460c      	mov	r4, r1
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	e7a8      	b.n	8002afc <_svfiprintf_r+0xd8>
 8002baa:	2300      	movs	r3, #0
 8002bac:	3401      	adds	r4, #1
 8002bae:	9305      	str	r3, [sp, #20]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f04f 0c0a 	mov.w	ip, #10
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bbc:	3a30      	subs	r2, #48	@ 0x30
 8002bbe:	2a09      	cmp	r2, #9
 8002bc0:	d903      	bls.n	8002bca <_svfiprintf_r+0x1a6>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0c6      	beq.n	8002b54 <_svfiprintf_r+0x130>
 8002bc6:	9105      	str	r1, [sp, #20]
 8002bc8:	e7c4      	b.n	8002b54 <_svfiprintf_r+0x130>
 8002bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bce:	4604      	mov	r4, r0
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e7f0      	b.n	8002bb6 <_svfiprintf_r+0x192>
 8002bd4:	ab03      	add	r3, sp, #12
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	462a      	mov	r2, r5
 8002bda:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <_svfiprintf_r+0x1f0>)
 8002bdc:	a904      	add	r1, sp, #16
 8002bde:	4638      	mov	r0, r7
 8002be0:	f3af 8000 	nop.w
 8002be4:	1c42      	adds	r2, r0, #1
 8002be6:	4606      	mov	r6, r0
 8002be8:	d1d6      	bne.n	8002b98 <_svfiprintf_r+0x174>
 8002bea:	89ab      	ldrh	r3, [r5, #12]
 8002bec:	065b      	lsls	r3, r3, #25
 8002bee:	f53f af2d 	bmi.w	8002a4c <_svfiprintf_r+0x28>
 8002bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002bf4:	e72c      	b.n	8002a50 <_svfiprintf_r+0x2c>
 8002bf6:	ab03      	add	r3, sp, #12
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	462a      	mov	r2, r5
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <_svfiprintf_r+0x1f0>)
 8002bfe:	a904      	add	r1, sp, #16
 8002c00:	4638      	mov	r0, r7
 8002c02:	f000 f879 	bl	8002cf8 <_printf_i>
 8002c06:	e7ed      	b.n	8002be4 <_svfiprintf_r+0x1c0>
 8002c08:	08003108 	.word	0x08003108
 8002c0c:	08003112 	.word	0x08003112
 8002c10:	00000000 	.word	0x00000000
 8002c14:	0800296d 	.word	0x0800296d
 8002c18:	0800310e 	.word	0x0800310e

08002c1c <_printf_common>:
 8002c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c20:	4616      	mov	r6, r2
 8002c22:	4698      	mov	r8, r3
 8002c24:	688a      	ldr	r2, [r1, #8]
 8002c26:	690b      	ldr	r3, [r1, #16]
 8002c28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	bfb8      	it	lt
 8002c30:	4613      	movlt	r3, r2
 8002c32:	6033      	str	r3, [r6, #0]
 8002c34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c38:	4607      	mov	r7, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	b10a      	cbz	r2, 8002c42 <_printf_common+0x26>
 8002c3e:	3301      	adds	r3, #1
 8002c40:	6033      	str	r3, [r6, #0]
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	0699      	lsls	r1, r3, #26
 8002c46:	bf42      	ittt	mi
 8002c48:	6833      	ldrmi	r3, [r6, #0]
 8002c4a:	3302      	addmi	r3, #2
 8002c4c:	6033      	strmi	r3, [r6, #0]
 8002c4e:	6825      	ldr	r5, [r4, #0]
 8002c50:	f015 0506 	ands.w	r5, r5, #6
 8002c54:	d106      	bne.n	8002c64 <_printf_common+0x48>
 8002c56:	f104 0a19 	add.w	sl, r4, #25
 8002c5a:	68e3      	ldr	r3, [r4, #12]
 8002c5c:	6832      	ldr	r2, [r6, #0]
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	42ab      	cmp	r3, r5
 8002c62:	dc26      	bgt.n	8002cb2 <_printf_common+0x96>
 8002c64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c68:	6822      	ldr	r2, [r4, #0]
 8002c6a:	3b00      	subs	r3, #0
 8002c6c:	bf18      	it	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	0692      	lsls	r2, r2, #26
 8002c72:	d42b      	bmi.n	8002ccc <_printf_common+0xb0>
 8002c74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c78:	4641      	mov	r1, r8
 8002c7a:	4638      	mov	r0, r7
 8002c7c:	47c8      	blx	r9
 8002c7e:	3001      	adds	r0, #1
 8002c80:	d01e      	beq.n	8002cc0 <_printf_common+0xa4>
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	6922      	ldr	r2, [r4, #16]
 8002c86:	f003 0306 	and.w	r3, r3, #6
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf02      	ittt	eq
 8002c8e:	68e5      	ldreq	r5, [r4, #12]
 8002c90:	6833      	ldreq	r3, [r6, #0]
 8002c92:	1aed      	subeq	r5, r5, r3
 8002c94:	68a3      	ldr	r3, [r4, #8]
 8002c96:	bf0c      	ite	eq
 8002c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c9c:	2500      	movne	r5, #0
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	bfc4      	itt	gt
 8002ca2:	1a9b      	subgt	r3, r3, r2
 8002ca4:	18ed      	addgt	r5, r5, r3
 8002ca6:	2600      	movs	r6, #0
 8002ca8:	341a      	adds	r4, #26
 8002caa:	42b5      	cmp	r5, r6
 8002cac:	d11a      	bne.n	8002ce4 <_printf_common+0xc8>
 8002cae:	2000      	movs	r0, #0
 8002cb0:	e008      	b.n	8002cc4 <_printf_common+0xa8>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	4652      	mov	r2, sl
 8002cb6:	4641      	mov	r1, r8
 8002cb8:	4638      	mov	r0, r7
 8002cba:	47c8      	blx	r9
 8002cbc:	3001      	adds	r0, #1
 8002cbe:	d103      	bne.n	8002cc8 <_printf_common+0xac>
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc8:	3501      	adds	r5, #1
 8002cca:	e7c6      	b.n	8002c5a <_printf_common+0x3e>
 8002ccc:	18e1      	adds	r1, r4, r3
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	2030      	movs	r0, #48	@ 0x30
 8002cd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002cd6:	4422      	add	r2, r4
 8002cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002cdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	e7c7      	b.n	8002c74 <_printf_common+0x58>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	4641      	mov	r1, r8
 8002cea:	4638      	mov	r0, r7
 8002cec:	47c8      	blx	r9
 8002cee:	3001      	adds	r0, #1
 8002cf0:	d0e6      	beq.n	8002cc0 <_printf_common+0xa4>
 8002cf2:	3601      	adds	r6, #1
 8002cf4:	e7d9      	b.n	8002caa <_printf_common+0x8e>
	...

08002cf8 <_printf_i>:
 8002cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cfc:	7e0f      	ldrb	r7, [r1, #24]
 8002cfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d00:	2f78      	cmp	r7, #120	@ 0x78
 8002d02:	4691      	mov	r9, r2
 8002d04:	4680      	mov	r8, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	469a      	mov	sl, r3
 8002d0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d0e:	d807      	bhi.n	8002d20 <_printf_i+0x28>
 8002d10:	2f62      	cmp	r7, #98	@ 0x62
 8002d12:	d80a      	bhi.n	8002d2a <_printf_i+0x32>
 8002d14:	2f00      	cmp	r7, #0
 8002d16:	f000 80d2 	beq.w	8002ebe <_printf_i+0x1c6>
 8002d1a:	2f58      	cmp	r7, #88	@ 0x58
 8002d1c:	f000 80b9 	beq.w	8002e92 <_printf_i+0x19a>
 8002d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d28:	e03a      	b.n	8002da0 <_printf_i+0xa8>
 8002d2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d2e:	2b15      	cmp	r3, #21
 8002d30:	d8f6      	bhi.n	8002d20 <_printf_i+0x28>
 8002d32:	a101      	add	r1, pc, #4	@ (adr r1, 8002d38 <_printf_i+0x40>)
 8002d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d38:	08002d91 	.word	0x08002d91
 8002d3c:	08002da5 	.word	0x08002da5
 8002d40:	08002d21 	.word	0x08002d21
 8002d44:	08002d21 	.word	0x08002d21
 8002d48:	08002d21 	.word	0x08002d21
 8002d4c:	08002d21 	.word	0x08002d21
 8002d50:	08002da5 	.word	0x08002da5
 8002d54:	08002d21 	.word	0x08002d21
 8002d58:	08002d21 	.word	0x08002d21
 8002d5c:	08002d21 	.word	0x08002d21
 8002d60:	08002d21 	.word	0x08002d21
 8002d64:	08002ea5 	.word	0x08002ea5
 8002d68:	08002dcf 	.word	0x08002dcf
 8002d6c:	08002e5f 	.word	0x08002e5f
 8002d70:	08002d21 	.word	0x08002d21
 8002d74:	08002d21 	.word	0x08002d21
 8002d78:	08002ec7 	.word	0x08002ec7
 8002d7c:	08002d21 	.word	0x08002d21
 8002d80:	08002dcf 	.word	0x08002dcf
 8002d84:	08002d21 	.word	0x08002d21
 8002d88:	08002d21 	.word	0x08002d21
 8002d8c:	08002e67 	.word	0x08002e67
 8002d90:	6833      	ldr	r3, [r6, #0]
 8002d92:	1d1a      	adds	r2, r3, #4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6032      	str	r2, [r6, #0]
 8002d98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002da0:	2301      	movs	r3, #1
 8002da2:	e09d      	b.n	8002ee0 <_printf_i+0x1e8>
 8002da4:	6833      	ldr	r3, [r6, #0]
 8002da6:	6820      	ldr	r0, [r4, #0]
 8002da8:	1d19      	adds	r1, r3, #4
 8002daa:	6031      	str	r1, [r6, #0]
 8002dac:	0606      	lsls	r6, r0, #24
 8002dae:	d501      	bpl.n	8002db4 <_printf_i+0xbc>
 8002db0:	681d      	ldr	r5, [r3, #0]
 8002db2:	e003      	b.n	8002dbc <_printf_i+0xc4>
 8002db4:	0645      	lsls	r5, r0, #25
 8002db6:	d5fb      	bpl.n	8002db0 <_printf_i+0xb8>
 8002db8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002dbc:	2d00      	cmp	r5, #0
 8002dbe:	da03      	bge.n	8002dc8 <_printf_i+0xd0>
 8002dc0:	232d      	movs	r3, #45	@ 0x2d
 8002dc2:	426d      	negs	r5, r5
 8002dc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002dc8:	4859      	ldr	r0, [pc, #356]	@ (8002f30 <_printf_i+0x238>)
 8002dca:	230a      	movs	r3, #10
 8002dcc:	e011      	b.n	8002df2 <_printf_i+0xfa>
 8002dce:	6821      	ldr	r1, [r4, #0]
 8002dd0:	6833      	ldr	r3, [r6, #0]
 8002dd2:	0608      	lsls	r0, r1, #24
 8002dd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8002dd8:	d402      	bmi.n	8002de0 <_printf_i+0xe8>
 8002dda:	0649      	lsls	r1, r1, #25
 8002ddc:	bf48      	it	mi
 8002dde:	b2ad      	uxthmi	r5, r5
 8002de0:	2f6f      	cmp	r7, #111	@ 0x6f
 8002de2:	4853      	ldr	r0, [pc, #332]	@ (8002f30 <_printf_i+0x238>)
 8002de4:	6033      	str	r3, [r6, #0]
 8002de6:	bf14      	ite	ne
 8002de8:	230a      	movne	r3, #10
 8002dea:	2308      	moveq	r3, #8
 8002dec:	2100      	movs	r1, #0
 8002dee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002df2:	6866      	ldr	r6, [r4, #4]
 8002df4:	60a6      	str	r6, [r4, #8]
 8002df6:	2e00      	cmp	r6, #0
 8002df8:	bfa2      	ittt	ge
 8002dfa:	6821      	ldrge	r1, [r4, #0]
 8002dfc:	f021 0104 	bicge.w	r1, r1, #4
 8002e00:	6021      	strge	r1, [r4, #0]
 8002e02:	b90d      	cbnz	r5, 8002e08 <_printf_i+0x110>
 8002e04:	2e00      	cmp	r6, #0
 8002e06:	d04b      	beq.n	8002ea0 <_printf_i+0x1a8>
 8002e08:	4616      	mov	r6, r2
 8002e0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e0e:	fb03 5711 	mls	r7, r3, r1, r5
 8002e12:	5dc7      	ldrb	r7, [r0, r7]
 8002e14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e18:	462f      	mov	r7, r5
 8002e1a:	42bb      	cmp	r3, r7
 8002e1c:	460d      	mov	r5, r1
 8002e1e:	d9f4      	bls.n	8002e0a <_printf_i+0x112>
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d10b      	bne.n	8002e3c <_printf_i+0x144>
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	07df      	lsls	r7, r3, #31
 8002e28:	d508      	bpl.n	8002e3c <_printf_i+0x144>
 8002e2a:	6923      	ldr	r3, [r4, #16]
 8002e2c:	6861      	ldr	r1, [r4, #4]
 8002e2e:	4299      	cmp	r1, r3
 8002e30:	bfde      	ittt	le
 8002e32:	2330      	movle	r3, #48	@ 0x30
 8002e34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e38:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002e3c:	1b92      	subs	r2, r2, r6
 8002e3e:	6122      	str	r2, [r4, #16]
 8002e40:	f8cd a000 	str.w	sl, [sp]
 8002e44:	464b      	mov	r3, r9
 8002e46:	aa03      	add	r2, sp, #12
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4640      	mov	r0, r8
 8002e4c:	f7ff fee6 	bl	8002c1c <_printf_common>
 8002e50:	3001      	adds	r0, #1
 8002e52:	d14a      	bne.n	8002eea <_printf_i+0x1f2>
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e58:	b004      	add	sp, #16
 8002e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	f043 0320 	orr.w	r3, r3, #32
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	4833      	ldr	r0, [pc, #204]	@ (8002f34 <_printf_i+0x23c>)
 8002e68:	2778      	movs	r7, #120	@ 0x78
 8002e6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	6831      	ldr	r1, [r6, #0]
 8002e72:	061f      	lsls	r7, r3, #24
 8002e74:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e78:	d402      	bmi.n	8002e80 <_printf_i+0x188>
 8002e7a:	065f      	lsls	r7, r3, #25
 8002e7c:	bf48      	it	mi
 8002e7e:	b2ad      	uxthmi	r5, r5
 8002e80:	6031      	str	r1, [r6, #0]
 8002e82:	07d9      	lsls	r1, r3, #31
 8002e84:	bf44      	itt	mi
 8002e86:	f043 0320 	orrmi.w	r3, r3, #32
 8002e8a:	6023      	strmi	r3, [r4, #0]
 8002e8c:	b11d      	cbz	r5, 8002e96 <_printf_i+0x19e>
 8002e8e:	2310      	movs	r3, #16
 8002e90:	e7ac      	b.n	8002dec <_printf_i+0xf4>
 8002e92:	4827      	ldr	r0, [pc, #156]	@ (8002f30 <_printf_i+0x238>)
 8002e94:	e7e9      	b.n	8002e6a <_printf_i+0x172>
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	f023 0320 	bic.w	r3, r3, #32
 8002e9c:	6023      	str	r3, [r4, #0]
 8002e9e:	e7f6      	b.n	8002e8e <_printf_i+0x196>
 8002ea0:	4616      	mov	r6, r2
 8002ea2:	e7bd      	b.n	8002e20 <_printf_i+0x128>
 8002ea4:	6833      	ldr	r3, [r6, #0]
 8002ea6:	6825      	ldr	r5, [r4, #0]
 8002ea8:	6961      	ldr	r1, [r4, #20]
 8002eaa:	1d18      	adds	r0, r3, #4
 8002eac:	6030      	str	r0, [r6, #0]
 8002eae:	062e      	lsls	r6, r5, #24
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	d501      	bpl.n	8002eb8 <_printf_i+0x1c0>
 8002eb4:	6019      	str	r1, [r3, #0]
 8002eb6:	e002      	b.n	8002ebe <_printf_i+0x1c6>
 8002eb8:	0668      	lsls	r0, r5, #25
 8002eba:	d5fb      	bpl.n	8002eb4 <_printf_i+0x1bc>
 8002ebc:	8019      	strh	r1, [r3, #0]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	6123      	str	r3, [r4, #16]
 8002ec2:	4616      	mov	r6, r2
 8002ec4:	e7bc      	b.n	8002e40 <_printf_i+0x148>
 8002ec6:	6833      	ldr	r3, [r6, #0]
 8002ec8:	1d1a      	adds	r2, r3, #4
 8002eca:	6032      	str	r2, [r6, #0]
 8002ecc:	681e      	ldr	r6, [r3, #0]
 8002ece:	6862      	ldr	r2, [r4, #4]
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	f7fd f994 	bl	8000200 <memchr>
 8002ed8:	b108      	cbz	r0, 8002ede <_printf_i+0x1e6>
 8002eda:	1b80      	subs	r0, r0, r6
 8002edc:	6060      	str	r0, [r4, #4]
 8002ede:	6863      	ldr	r3, [r4, #4]
 8002ee0:	6123      	str	r3, [r4, #16]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ee8:	e7aa      	b.n	8002e40 <_printf_i+0x148>
 8002eea:	6923      	ldr	r3, [r4, #16]
 8002eec:	4632      	mov	r2, r6
 8002eee:	4649      	mov	r1, r9
 8002ef0:	4640      	mov	r0, r8
 8002ef2:	47d0      	blx	sl
 8002ef4:	3001      	adds	r0, #1
 8002ef6:	d0ad      	beq.n	8002e54 <_printf_i+0x15c>
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	079b      	lsls	r3, r3, #30
 8002efc:	d413      	bmi.n	8002f26 <_printf_i+0x22e>
 8002efe:	68e0      	ldr	r0, [r4, #12]
 8002f00:	9b03      	ldr	r3, [sp, #12]
 8002f02:	4298      	cmp	r0, r3
 8002f04:	bfb8      	it	lt
 8002f06:	4618      	movlt	r0, r3
 8002f08:	e7a6      	b.n	8002e58 <_printf_i+0x160>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	4632      	mov	r2, r6
 8002f0e:	4649      	mov	r1, r9
 8002f10:	4640      	mov	r0, r8
 8002f12:	47d0      	blx	sl
 8002f14:	3001      	adds	r0, #1
 8002f16:	d09d      	beq.n	8002e54 <_printf_i+0x15c>
 8002f18:	3501      	adds	r5, #1
 8002f1a:	68e3      	ldr	r3, [r4, #12]
 8002f1c:	9903      	ldr	r1, [sp, #12]
 8002f1e:	1a5b      	subs	r3, r3, r1
 8002f20:	42ab      	cmp	r3, r5
 8002f22:	dcf2      	bgt.n	8002f0a <_printf_i+0x212>
 8002f24:	e7eb      	b.n	8002efe <_printf_i+0x206>
 8002f26:	2500      	movs	r5, #0
 8002f28:	f104 0619 	add.w	r6, r4, #25
 8002f2c:	e7f5      	b.n	8002f1a <_printf_i+0x222>
 8002f2e:	bf00      	nop
 8002f30:	08003119 	.word	0x08003119
 8002f34:	0800312a 	.word	0x0800312a

08002f38 <memmove>:
 8002f38:	4288      	cmp	r0, r1
 8002f3a:	b510      	push	{r4, lr}
 8002f3c:	eb01 0402 	add.w	r4, r1, r2
 8002f40:	d902      	bls.n	8002f48 <memmove+0x10>
 8002f42:	4284      	cmp	r4, r0
 8002f44:	4623      	mov	r3, r4
 8002f46:	d807      	bhi.n	8002f58 <memmove+0x20>
 8002f48:	1e43      	subs	r3, r0, #1
 8002f4a:	42a1      	cmp	r1, r4
 8002f4c:	d008      	beq.n	8002f60 <memmove+0x28>
 8002f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f56:	e7f8      	b.n	8002f4a <memmove+0x12>
 8002f58:	4402      	add	r2, r0
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	428a      	cmp	r2, r1
 8002f5e:	d100      	bne.n	8002f62 <memmove+0x2a>
 8002f60:	bd10      	pop	{r4, pc}
 8002f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f6a:	e7f7      	b.n	8002f5c <memmove+0x24>

08002f6c <_sbrk_r>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	4d06      	ldr	r5, [pc, #24]	@ (8002f88 <_sbrk_r+0x1c>)
 8002f70:	2300      	movs	r3, #0
 8002f72:	4604      	mov	r4, r0
 8002f74:	4608      	mov	r0, r1
 8002f76:	602b      	str	r3, [r5, #0]
 8002f78:	f7fd fe22 	bl	8000bc0 <_sbrk>
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	d102      	bne.n	8002f86 <_sbrk_r+0x1a>
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	b103      	cbz	r3, 8002f86 <_sbrk_r+0x1a>
 8002f84:	6023      	str	r3, [r4, #0]
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
 8002f88:	2000021c 	.word	0x2000021c

08002f8c <memcpy>:
 8002f8c:	440a      	add	r2, r1
 8002f8e:	4291      	cmp	r1, r2
 8002f90:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002f94:	d100      	bne.n	8002f98 <memcpy+0xc>
 8002f96:	4770      	bx	lr
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fa2:	4291      	cmp	r1, r2
 8002fa4:	d1f9      	bne.n	8002f9a <memcpy+0xe>
 8002fa6:	bd10      	pop	{r4, pc}

08002fa8 <_realloc_r>:
 8002fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fac:	4680      	mov	r8, r0
 8002fae:	4615      	mov	r5, r2
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	b921      	cbnz	r1, 8002fbe <_realloc_r+0x16>
 8002fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb8:	4611      	mov	r1, r2
 8002fba:	f7ff bc4b 	b.w	8002854 <_malloc_r>
 8002fbe:	b92a      	cbnz	r2, 8002fcc <_realloc_r+0x24>
 8002fc0:	f7ff fbdc 	bl	800277c <_free_r>
 8002fc4:	2400      	movs	r4, #0
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fcc:	f000 f81a 	bl	8003004 <_malloc_usable_size_r>
 8002fd0:	4285      	cmp	r5, r0
 8002fd2:	4606      	mov	r6, r0
 8002fd4:	d802      	bhi.n	8002fdc <_realloc_r+0x34>
 8002fd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002fda:	d8f4      	bhi.n	8002fc6 <_realloc_r+0x1e>
 8002fdc:	4629      	mov	r1, r5
 8002fde:	4640      	mov	r0, r8
 8002fe0:	f7ff fc38 	bl	8002854 <_malloc_r>
 8002fe4:	4607      	mov	r7, r0
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d0ec      	beq.n	8002fc4 <_realloc_r+0x1c>
 8002fea:	42b5      	cmp	r5, r6
 8002fec:	462a      	mov	r2, r5
 8002fee:	4621      	mov	r1, r4
 8002ff0:	bf28      	it	cs
 8002ff2:	4632      	movcs	r2, r6
 8002ff4:	f7ff ffca 	bl	8002f8c <memcpy>
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	4640      	mov	r0, r8
 8002ffc:	f7ff fbbe 	bl	800277c <_free_r>
 8003000:	463c      	mov	r4, r7
 8003002:	e7e0      	b.n	8002fc6 <_realloc_r+0x1e>

08003004 <_malloc_usable_size_r>:
 8003004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003008:	1f18      	subs	r0, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	bfbc      	itt	lt
 800300e:	580b      	ldrlt	r3, [r1, r0]
 8003010:	18c0      	addlt	r0, r0, r3
 8003012:	4770      	bx	lr

08003014 <_init>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr

08003020 <_fini>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr
